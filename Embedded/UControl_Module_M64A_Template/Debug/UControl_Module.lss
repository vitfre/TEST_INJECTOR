
UControl_Module.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00000766  000007fa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000766  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000004a  00800100  00800100  000007fa  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  000007fc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000097  00000000  00000000  00000ec8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00000f5f  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000002a8  00000000  00000000  00000f8e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002426  00000000  00000000  00001236  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000bd4  00000000  00000000  0000365c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000105f  00000000  00000000  00004230  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  0000068c  00000000  00000000  00005290  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000611  00000000  00000000  0000591c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000128b  00000000  00000000  00005f2d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000230  00000000  00000000  000071b8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:

char const _BURN_OK_[]			PROGMEM = "  Hello  world  ";

//****************************************************************************************
void Main_menu_i2c (unsigned int data)
{
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
	set_i2c_lcd_position(1,1);
   8:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
   c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
	send_i2c_lcd_string_P(_BURN_OK_);
  10:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  14:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
	set_i2c_lcd_position(2,1);
  18:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  1c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
	detect_i2c_string(data);				// Виводим на дисплей
  20:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
};			//Main_menu
  24:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  28:	0c 94 03 01 	jmp	0x206	; 0x206 <__vector_10>
  2c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  30:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  34:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  38:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__vector_14>
  3c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  40:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__vector_16>
  44:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  48:	0c 94 0f 03 	jmp	0x61e	; 0x61e <__vector_18>
  4c:	0c 94 33 03 	jmp	0x666	; 0x666 <__vector_19>
  50:	0c 94 57 03 	jmp	0x6ae	; 0x6ae <__vector_20>
  54:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  58:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  5c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  60:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  64:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  68:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  6c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  70:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  74:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__vector_29>
  78:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__vector_30>
  7c:	0c 94 84 00 	jmp	0x108	; 0x108 <__vector_31>
  80:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__vector_32>
  84:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  88:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	aa 34       	cpi	r26, 0x4A	; 74
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	0e 94 99 01 	call	0x332	; 0x332 <main>
  ac:	0c 94 b1 03 	jmp	0x762	; 0x762 <_exit>

000000b0 <__bad_interrupt>:
  b0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b4 <init_adc>:
{
	//---------------------------------------------------------------------------------------
	// ADC initialization
	// ADC Clock frequency: 500,000 kHz
	// ADC Voltage Reference: AVCC pin
	ADMUX=ADC_VREF_TYPE & 0xff;
  b4:	80 e4       	ldi	r24, 0x40	; 64
  b6:	87 b9       	out	0x07, r24	; 7
	ADCSRA=0x85;
  b8:	85 e8       	ldi	r24, 0x85	; 133
  ba:	86 b9       	out	0x06, r24	; 6
  bc:	08 95       	ret

000000be <__vector_30>:

#include "buart_1.h"

//****************************************************************************************
ISR(USART1_RX_vect)
{
  be:	1f 92       	push	r1
  c0:	0f 92       	push	r0
  c2:	0f b6       	in	r0, 0x3f	; 63
  c4:	0f 92       	push	r0
  c6:	11 24       	eor	r1, r1
  c8:	2f 93       	push	r18
  ca:	8f 93       	push	r24
  cc:	9f 93       	push	r25
  ce:	ef 93       	push	r30
  d0:	ff 93       	push	r31
	//---------------------------------------------------------------------------------------
	uint8_t byte;
	uint8_t wr = (uart_1_rxwr+1) & UART_BUFEND_1_;
  d2:	e0 91 22 01 	lds	r30, 0x0122
  d6:	8e 2f       	mov	r24, r30
  d8:	8f 5f       	subi	r24, 0xFF	; 255
  da:	8f 70       	andi	r24, 0x0F	; 15
	byte = UDR1;
  dc:	20 91 9c 00 	lds	r18, 0x009C
	if(wr != uart_1_rxrd)
  e0:	90 91 23 01 	lds	r25, 0x0123
  e4:	89 17       	cp	r24, r25
  e6:	31 f0       	breq	.+12     	; 0xf4 <__vector_30+0x36>
	{
		uart_1_rx[uart_1_rxwr] = byte;
  e8:	f0 e0       	ldi	r31, 0x00	; 0
  ea:	ef 5e       	subi	r30, 0xEF	; 239
  ec:	fe 4f       	sbci	r31, 0xFE	; 254
  ee:	20 83       	st	Z, r18
		uart_1_rxwr = wr;
  f0:	80 93 22 01 	sts	0x0122, r24
	};
	return;
	//---------------------------------------------------------------------------------------
};
  f4:	ff 91       	pop	r31
  f6:	ef 91       	pop	r30
  f8:	9f 91       	pop	r25
  fa:	8f 91       	pop	r24
  fc:	2f 91       	pop	r18
  fe:	0f 90       	pop	r0
 100:	0f be       	out	0x3f, r0	; 63
 102:	0f 90       	pop	r0
 104:	1f 90       	pop	r1
 106:	18 95       	reti

00000108 <__vector_31>:
//****************************************************************************************
ISR(USART1_UDRE_vect)
{
 108:	1f 92       	push	r1
 10a:	0f 92       	push	r0
 10c:	0f b6       	in	r0, 0x3f	; 63
 10e:	0f 92       	push	r0
 110:	11 24       	eor	r1, r1
 112:	8f 93       	push	r24
 114:	9f 93       	push	r25
 116:	ef 93       	push	r30
 118:	ff 93       	push	r31
	//---------------------------------------------------------------------------------------
	uint8_t rd = uart_1_txrd;
 11a:	80 91 00 01 	lds	r24, 0x0100
	if(rd != uart_1_txwr)
 11e:	90 91 21 01 	lds	r25, 0x0121
 122:	89 17       	cp	r24, r25
 124:	61 f0       	breq	.+24     	; 0x13e <__vector_31+0x36>
	{
		UDR1 = uart_1_tx[rd];
 126:	e8 2f       	mov	r30, r24
 128:	f0 e0       	ldi	r31, 0x00	; 0
 12a:	ef 5f       	subi	r30, 0xFF	; 255
 12c:	fe 4f       	sbci	r31, 0xFE	; 254
 12e:	90 81       	ld	r25, Z
 130:	90 93 9c 00 	sts	0x009C, r25
		uart_1_txrd = (rd+1) & UART_BUFEND_1_;
 134:	8f 5f       	subi	r24, 0xFF	; 255
 136:	8f 70       	andi	r24, 0x0F	; 15
 138:	80 93 00 01 	sts	0x0100, r24
		return;
 13c:	05 c0       	rjmp	.+10     	; 0x148 <__vector_31+0x40>
	};
	UCSR1B &= ~(1<<UDRIE1);
 13e:	ea e9       	ldi	r30, 0x9A	; 154
 140:	f0 e0       	ldi	r31, 0x00	; 0
 142:	80 81       	ld	r24, Z
 144:	8f 7d       	andi	r24, 0xDF	; 223
 146:	80 83       	st	Z, r24
	return;
	//---------------------------------------------------------------------------------------
};
 148:	ff 91       	pop	r31
 14a:	ef 91       	pop	r30
 14c:	9f 91       	pop	r25
 14e:	8f 91       	pop	r24
 150:	0f 90       	pop	r0
 152:	0f be       	out	0x3f, r0	; 63
 154:	0f 90       	pop	r0
 156:	1f 90       	pop	r1
 158:	18 95       	reti

0000015a <__vector_32>:
//****************************************************************************************
ISR(USART1_TX_vect)
{
 15a:	1f 92       	push	r1
 15c:	0f 92       	push	r0
 15e:	0f b6       	in	r0, 0x3f	; 63
 160:	0f 92       	push	r0
 162:	11 24       	eor	r1, r1
	//---------------------------------------------------------------------------------------
	return;
	//---------------------------------------------------------------------------------------
};
 164:	0f 90       	pop	r0
 166:	0f be       	out	0x3f, r0	; 63
 168:	0f 90       	pop	r0
 16a:	1f 90       	pop	r1
 16c:	18 95       	reti

0000016e <uart_1_write>:
};
//****************************************************************************************
void uart_1_write(uint8_t byte)
{
	//---------------------------------------------------------------------------------------
	uint8_t wr = (uart_1_txwr+1) & UART_BUFEND_1_;
 16e:	e0 91 21 01 	lds	r30, 0x0121
 172:	9e 2f       	mov	r25, r30
 174:	9f 5f       	subi	r25, 0xFF	; 255
 176:	9f 70       	andi	r25, 0x0F	; 15
	if(wr != uart_1_txrd)
 178:	20 91 00 01 	lds	r18, 0x0100
 17c:	92 17       	cp	r25, r18
 17e:	59 f0       	breq	.+22     	; 0x196 <uart_1_write+0x28>
	{
		uart_1_tx[uart_1_txwr] = byte;
 180:	f0 e0       	ldi	r31, 0x00	; 0
 182:	ef 5f       	subi	r30, 0xFF	; 255
 184:	fe 4f       	sbci	r31, 0xFE	; 254
 186:	80 83       	st	Z, r24
		uart_1_txwr = wr;
 188:	90 93 21 01 	sts	0x0121, r25
		UCSR1B |= (1<<UDRIE1);
 18c:	ea e9       	ldi	r30, 0x9A	; 154
 18e:	f0 e0       	ldi	r31, 0x00	; 0
 190:	80 81       	ld	r24, Z
 192:	80 62       	ori	r24, 0x20	; 32
 194:	80 83       	st	Z, r24
 196:	08 95       	ret

00000198 <uart_1_init>:
};
//****************************************************************************************
void uart_1_init()
{
	//---------------------------------------------------------------------------------------
	UBRR1L = F_CPU/UART_BAUD_RATE_1_/16-1;
 198:	89 e1       	ldi	r24, 0x19	; 25
 19a:	80 93 99 00 	sts	0x0099, r24
	UBRR1H = (F_CPU/UART_BAUD_RATE_1_/16-1)>>8;
 19e:	10 92 98 00 	sts	0x0098, r1
	UCSR1B = (1<<RXCIE1)|(1<<TXCIE1)|(1<<RXEN1)|(1<<TXEN1);
 1a2:	88 ed       	ldi	r24, 0xD8	; 216
 1a4:	80 93 9a 00 	sts	0x009A, r24
 1a8:	08 95       	ret

000001aa <__vector_16>:

//****************************************************************************************
// Timer0 overflow interrupt service routine
//****************************************************************************************
ISR (TIMER0_OVF_vect)
{
 1aa:	1f 92       	push	r1
 1ac:	0f 92       	push	r0
 1ae:	0f b6       	in	r0, 0x3f	; 63
 1b0:	0f 92       	push	r0
 1b2:	11 24       	eor	r1, r1
 1b4:	2f 93       	push	r18
 1b6:	3f 93       	push	r19
 1b8:	4f 93       	push	r20
 1ba:	5f 93       	push	r21
 1bc:	6f 93       	push	r22
 1be:	7f 93       	push	r23
 1c0:	8f 93       	push	r24
 1c2:	9f 93       	push	r25
 1c4:	af 93       	push	r26
 1c6:	bf 93       	push	r27
 1c8:	ef 93       	push	r30
 1ca:	ff 93       	push	r31
	//---------------------------------------------------------------------------------------
	BUT_Debrief();
 1cc:	0e 94 84 03 	call	0x708	; 0x708 <BUT_Debrief>

	//---------------------------------------------------------------------------------------
	return;
};
 1d0:	ff 91       	pop	r31
 1d2:	ef 91       	pop	r30
 1d4:	bf 91       	pop	r27
 1d6:	af 91       	pop	r26
 1d8:	9f 91       	pop	r25
 1da:	8f 91       	pop	r24
 1dc:	7f 91       	pop	r23
 1de:	6f 91       	pop	r22
 1e0:	5f 91       	pop	r21
 1e2:	4f 91       	pop	r20
 1e4:	3f 91       	pop	r19
 1e6:	2f 91       	pop	r18
 1e8:	0f 90       	pop	r0
 1ea:	0f be       	out	0x3f, r0	; 63
 1ec:	0f 90       	pop	r0
 1ee:	1f 90       	pop	r1
 1f0:	18 95       	reti

000001f2 <__vector_14>:
//****************************************************************************************
// Timer1 overflow interrupt service routine
//****************************************************************************************
ISR (TIMER1_OVF_vect)
{
 1f2:	1f 92       	push	r1
 1f4:	0f 92       	push	r0
 1f6:	0f b6       	in	r0, 0x3f	; 63
 1f8:	0f 92       	push	r0
 1fa:	11 24       	eor	r1, r1
// 	TCNT1L=0xDC;
	//---------------------------------------------------------------------------------------

	//---------------------------------------------------------------------------------------
	return;
};
 1fc:	0f 90       	pop	r0
 1fe:	0f be       	out	0x3f, r0	; 63
 200:	0f 90       	pop	r0
 202:	1f 90       	pop	r1
 204:	18 95       	reti

00000206 <__vector_10>:
//****************************************************************************************
// Timer2 overflow interrupt service routine
//****************************************************************************************
ISR (TIMER2_OVF_vect)
{
 206:	1f 92       	push	r1
 208:	0f 92       	push	r0
 20a:	0f b6       	in	r0, 0x3f	; 63
 20c:	0f 92       	push	r0
 20e:	11 24       	eor	r1, r1
	//---------------------------------------------------------------------------------------

	//---------------------------------------------------------------------------------------
	return;
};
 210:	0f 90       	pop	r0
 212:	0f be       	out	0x3f, r0	; 63
 214:	0f 90       	pop	r0
 216:	1f 90       	pop	r1
 218:	18 95       	reti

0000021a <__vector_29>:
//****************************************************************************************
// Timer3 overflow interrupt service routine
//****************************************************************************************
ISR (TIMER3_OVF_vect)
{
 21a:	1f 92       	push	r1
 21c:	0f 92       	push	r0
 21e:	0f b6       	in	r0, 0x3f	; 63
 220:	0f 92       	push	r0
 222:	11 24       	eor	r1, r1
	//---------------------------------------------------------------------------------------

	//---------------------------------------------------------------------------------------
	return;
};
 224:	0f 90       	pop	r0
 226:	0f be       	out	0x3f, r0	; 63
 228:	0f 90       	pop	r0
 22a:	1f 90       	pop	r1
 22c:	18 95       	reti

0000022e <init_mcu>:
	
// Input/Output Ports initialization
// Port A initialization
// Func7=Out Func6=Out Func5=Out Func4=Out Func3=Out Func2=Out Func1=In Func0=Out
// State7=0 State6=0 State5=0 State4=0 State3=0 State2=0 State1=T State0=0
PORTA=0x00;
 22e:	1b ba       	out	0x1b, r1	; 27
DDRA=0xFD;
 230:	8d ef       	ldi	r24, 0xFD	; 253
 232:	8a bb       	out	0x1a, r24	; 26

// Port B initialization
// Func7=Out Func6=Out Func5=Out Func4=Out Func3=Out Func2=In Func1=In Func0=In
// State7=0 State6=0 State5=0 State4=0 State3=0 State2=T State1=T State0=T
PORTB=0x00;
 234:	18 ba       	out	0x18, r1	; 24
DDRB=0xF8;
 236:	88 ef       	ldi	r24, 0xF8	; 248
 238:	87 bb       	out	0x17, r24	; 23

// Port C initialization
// Func7=Out Func6=Out Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
// State7=0 State6=1 State5=P State4=P State3=P State2=P State1=P State0=P
PORTC=0x7F;
 23a:	8f e7       	ldi	r24, 0x7F	; 127
 23c:	85 bb       	out	0x15, r24	; 21
DDRC=0xC0;
 23e:	80 ec       	ldi	r24, 0xC0	; 192
 240:	84 bb       	out	0x14, r24	; 20

// Port D initialization
// Func7=Out Func6=In Func5=Out Func4=In Func3=In Func2=In Func1=In Func0=In
// State7=0 State6=T State5=0 State4=T State3=T State2=T State1=T State0=T
PORTD=0x00;
 242:	12 ba       	out	0x12, r1	; 18
DDRD=0xA0;
 244:	80 ea       	ldi	r24, 0xA0	; 160
 246:	81 bb       	out	0x11, r24	; 17

// Port E initialization
// Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
// State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
PORTE=0x00;
 248:	13 b8       	out	0x03, r1	; 3
DDRE=0x00;
 24a:	12 b8       	out	0x02, r1	; 2

// Port F initialization
// Func7=In Func6=Out Func5=In Func4=Out Func3=In Func2=In Func1=In Func0=In
// State7=P State6=0 State5=P State4=0 State3=T State2=T State1=T State0=T
PORTF=0xA0;
 24c:	80 93 62 00 	sts	0x0062, r24
DDRF=0x50;
 250:	80 e5       	ldi	r24, 0x50	; 80
 252:	80 93 61 00 	sts	0x0061, r24


// Port G initialization
// Func4=Out Func3=Out Func2=In Func1=Out Func0=Out
// State4=0 State3=0 State2=T State1=1 State0=1
PORTG=0x03;
 256:	83 e0       	ldi	r24, 0x03	; 3
 258:	80 93 65 00 	sts	0x0065, r24
DDRG=0x1B;
 25c:	8b e1       	ldi	r24, 0x1B	; 27
 25e:	80 93 64 00 	sts	0x0064, r24
// Timer/Counter 0 initialization
// Clock source: System Clock
// Clock value: 62,500 kHz
// Mode: Normal top=0xFF
// OC0 output: Disconnected
ASSR=0x00;
 262:	10 be       	out	0x30, r1	; 48
TCCR0=0x06;
 264:	86 e0       	ldi	r24, 0x06	; 6
 266:	83 bf       	out	0x33, r24	; 51
TCNT0=0x00;
 268:	12 be       	out	0x32, r1	; 50
OCR0=0x00;
 26a:	11 be       	out	0x31, r1	; 49
// Timer1 Overflow Interrupt: Off
// Input Capture Interrupt: Off
// Compare A Match Interrupt: Off
// Compare B Match Interrupt: Off
// Compare C Match Interrupt: Off
TCCR1A=0x00;
 26c:	1f bc       	out	0x2f, r1	; 47
TCCR1B=0x00;
 26e:	1e bc       	out	0x2e, r1	; 46
TCNT1H=0x00;
 270:	1d bc       	out	0x2d, r1	; 45
TCNT1L=0x00;
 272:	1c bc       	out	0x2c, r1	; 44
ICR1H=0x00;
 274:	17 bc       	out	0x27, r1	; 39
ICR1L=0x00;
 276:	16 bc       	out	0x26, r1	; 38
OCR1AH=0x00;
 278:	1b bc       	out	0x2b, r1	; 43
OCR1AL=0x00;
 27a:	1a bc       	out	0x2a, r1	; 42
OCR1BH=0x00;
 27c:	19 bc       	out	0x29, r1	; 41
OCR1BL=0x00;
 27e:	18 bc       	out	0x28, r1	; 40
OCR1CH=0x00;
 280:	10 92 79 00 	sts	0x0079, r1
OCR1CL=0x00;
 284:	10 92 78 00 	sts	0x0078, r1
// Clock value: 16000,000 kHz
// Mode: Fast PWM top=0xFF
// OC2 output: Non-Inverted PWM
//TCCR2=0x69;

TCCR2=0x00;
 288:	15 bc       	out	0x25, r1	; 37
TCNT2=0x00;
 28a:	14 bc       	out	0x24, r1	; 36
OCR2=0x00;
 28c:	13 bc       	out	0x23, r1	; 35
// Compare A Match Interrupt: Off
// Compare B Match Interrupt: Off
// Compare C Match Interrupt: Off
//TCCR3A=0x00;
//TCCR3B=0x01;
TCCR3A=0x00;
 28e:	10 92 8b 00 	sts	0x008B, r1
TCCR3B=0x00;
 292:	10 92 8a 00 	sts	0x008A, r1
TCNT3H=0x00;
 296:	10 92 89 00 	sts	0x0089, r1
TCNT3L=0x00;
 29a:	10 92 88 00 	sts	0x0088, r1
ICR3H=0x00;
 29e:	10 92 81 00 	sts	0x0081, r1
ICR3L=0x00;
 2a2:	10 92 80 00 	sts	0x0080, r1
OCR3AH=0x00;
 2a6:	10 92 87 00 	sts	0x0087, r1
OCR3AL=0x00;
 2aa:	10 92 86 00 	sts	0x0086, r1
OCR3BH=0x00;
 2ae:	10 92 85 00 	sts	0x0085, r1
OCR3BL=0x00;
 2b2:	10 92 84 00 	sts	0x0084, r1
OCR3CH=0x00;
 2b6:	10 92 83 00 	sts	0x0083, r1
OCR3CL=0x00;
 2ba:	10 92 82 00 	sts	0x0082, r1
// INT3: Off
// INT4: Off
// INT5: Off
// INT6: Off
// INT7: Off
EICRA=0x00;
 2be:	10 92 6a 00 	sts	0x006A, r1
EICRB=0x00;
 2c2:	1a be       	out	0x3a, r1	; 58
EIMSK=0x00;
 2c4:	19 be       	out	0x39, r1	; 57

// Timer(s)/Counter(s) Interrupt(s) initialization
TIMSK=0x05;//TIMSK=0xC5;
 2c6:	85 e0       	ldi	r24, 0x05	; 5
 2c8:	87 bf       	out	0x37, r24	; 55
ETIMSK=0x04;
 2ca:	84 e0       	ldi	r24, 0x04	; 4
 2cc:	80 93 7d 00 	sts	0x007D, r24

// USART0 initialization
// USART0 disabled
UCSR0B=0x00;
 2d0:	1a b8       	out	0x0a, r1	; 10

// USART1 initialization
// USART1 disabled
UCSR1B=0x00;
 2d2:	10 92 9a 00 	sts	0x009A, r1

// Analog Comparator initialization
// Analog Comparator: Off
// Analog Comparator Input Capture by Timer/Counter 1: Off
ACSR=0x80;
 2d6:	80 e8       	ldi	r24, 0x80	; 128
 2d8:	88 b9       	out	0x08, r24	; 8
SFIOR=0x00;
 2da:	10 bc       	out	0x20, r1	; 32

// ADC initialization
// ADC disabled
ADCSRA=0x00;
 2dc:	16 b8       	out	0x06, r1	; 6

// SPI initialization
// SPI disabled
SPCR=0x00;
 2de:	1d b8       	out	0x0d, r1	; 13

// TWI initialization
// TWI disabled
TWCR=0x00;
 2e0:	10 92 74 00 	sts	0x0074, r1
 2e4:	08 95       	ret

000002e6 <init_pwm>:
*   Purpose :       Ініціалізаціяу ШИМ
****************************************************************************/
void init_pwm(void)
{
	//---------------------------------------------------------------------------------------
	DDRX_PWM |= (MASK_PWM);
 2e6:	87 b3       	in	r24, 0x17	; 23
 2e8:	80 6e       	ori	r24, 0xE0	; 224
 2ea:	87 bb       	out	0x17, r24	; 23
	PORT_PWM &=~ MASK_PWM;
 2ec:	c5 98       	cbi	0x18, 5	; 24
	// Timer1 Overflow Interrupt: Off
	// Input Capture Interrupt: Off
	// Compare A Match Interrupt: Off
	// Compare B Match Interrupt: Off
	// Compare C Match Interrupt: Off
	TCCR1A=0xAB;
 2ee:	8b ea       	ldi	r24, 0xAB	; 171
 2f0:	8f bd       	out	0x2f, r24	; 47
	TCCR1B=0x09;
 2f2:	89 e0       	ldi	r24, 0x09	; 9
 2f4:	8e bd       	out	0x2e, r24	; 46
	TCNT1H=0x00;
 2f6:	1d bc       	out	0x2d, r1	; 45
	TCNT1L=0x00;
 2f8:	1c bc       	out	0x2c, r1	; 44
	ICR1H=0x00;
 2fa:	17 bc       	out	0x27, r1	; 39
	ICR1L=0x00;
 2fc:	16 bc       	out	0x26, r1	; 38
	OCR1AH=0x00;
 2fe:	1b bc       	out	0x2b, r1	; 43
	OCR1AL=0x00;
 300:	1a bc       	out	0x2a, r1	; 42
	OCR1BH=0x00;
 302:	19 bc       	out	0x29, r1	; 41
	OCR1BL=0x00;
 304:	18 bc       	out	0x28, r1	; 40
	OCR1CH=0x00;
 306:	10 92 79 00 	sts	0x0079, r1
	OCR1CL=0x00;
 30a:	10 92 78 00 	sts	0x0078, r1
 30e:	08 95       	ret

00000310 <set_pwm>:
****************************************************************************/
void set_pwm(unsigned char chanel, unsigned int val)
{
	//---------------------------------------------------------------------------------------
	//---------------------------------------------------------------------------------------
	switch (chanel)
 310:	86 30       	cpi	r24, 0x06	; 6
 312:	39 f0       	breq	.+14     	; 0x322 <set_pwm+0x12>
 314:	87 30       	cpi	r24, 0x07	; 7
 316:	41 f0       	breq	.+16     	; 0x328 <set_pwm+0x18>
 318:	85 30       	cpi	r24, 0x05	; 5
 31a:	51 f4       	brne	.+20     	; 0x330 <set_pwm+0x20>
	{
		case pwm_1 :
		{
			//---------------------------------------------------------------------------------------
			OCR1A=val ;
 31c:	7b bd       	out	0x2b, r23	; 43
 31e:	6a bd       	out	0x2a, r22	; 42
			//---------------------------------------------------------------------------------------
		};
		break;
 320:	08 95       	ret
		case pwm_2 :
		{
			//---------------------------------------------------------------------------------------
			OCR1B=val;
 322:	79 bd       	out	0x29, r23	; 41
 324:	68 bd       	out	0x28, r22	; 40
			//---------------------------------------------------------------------------------------
		};
		break;
 326:	08 95       	ret
		case pwm_3 :
		{
			//---------------------------------------------------------------------------------------
			OCR1C=val ;
 328:	70 93 79 00 	sts	0x0079, r23
 32c:	60 93 78 00 	sts	0x0078, r22
 330:	08 95       	ret

00000332 <main>:
{
	//---------------------------------------------------------------------------------------
	// Declare your local variables here
	unsigned int cnt = 0;
	//---------------------------------------------------------------------------------------
	init_mcu();
 332:	0e 94 17 01 	call	0x22e	; 0x22e <init_mcu>
	//---------------------------------------------------------------------------------------
	init_adc();
 336:	0e 94 5a 00 	call	0xb4	; 0xb4 <init_adc>
	rs485_0_init();
 33a:	0e 94 74 03 	call	0x6e8	; 0x6e8 <rs485_0_init>
	uart_1_init();
 33e:	0e 94 cc 00 	call	0x198	; 0x198 <uart_1_init>
	i2c_lcd_init();
 342:	0e 94 c6 02 	call	0x58c	; 0x58c <i2c_lcd_init>
	BUT_Init();
 346:	0e 94 7d 03 	call	0x6fa	; 0x6fa <BUT_Init>
	init_pwm();
 34a:	0e 94 73 01 	call	0x2e6	; 0x2e6 <init_pwm>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 34e:	8f e3       	ldi	r24, 0x3F	; 63
 350:	9c e9       	ldi	r25, 0x9C	; 156
 352:	01 97       	sbiw	r24, 0x01	; 1
 354:	f1 f7       	brne	.-4      	; 0x352 <main+0x20>
 356:	00 c0       	rjmp	.+0      	; 0x358 <main+0x26>
 358:	00 00       	nop
	_delay_ms(10);
	//---------------------------------------------------------------------------------------
	asm("sei");
 35a:	78 94       	sei

int main(void)
{
	//---------------------------------------------------------------------------------------
	// Declare your local variables here
	unsigned int cnt = 0;
 35c:	00 e0       	ldi	r16, 0x00	; 0
 35e:	10 e0       	ldi	r17, 0x00	; 0
		SET_OUT_4
		CLR_OUT_4
		
		SET_OUT_5
		CLR_OUT_5
		SET_OUT_6
 360:	c5 e6       	ldi	r28, 0x65	; 101
 362:	d0 e0       	ldi	r29, 0x00	; 0
		SET_OUT_7
		CLR_OUT_7
		SET_OUT_8
		CLR_OUT_8
		
		SET_OUT_9
 364:	0f 2e       	mov	r0, r31
 366:	f2 e6       	ldi	r31, 0x62	; 98
 368:	ef 2e       	mov	r14, r31
 36a:	f1 2c       	mov	r15, r1
 36c:	f0 2d       	mov	r31, r0
		 set_pwm(pwm_2, 25);
		 set_pwm(pwm_3, 540);
 		cnt++;
		 if (cnt>1023)
		 {
			 cnt=1;
 36e:	cc 24       	eor	r12, r12
 370:	c3 94       	inc	r12
 372:	d1 2c       	mov	r13, r1
 374:	01 c0       	rjmp	.+2      	; 0x378 <main+0x46>
 376:	86 01       	movw	r16, r12
	asm("sei");
	//---------------------------------------------------------------------------------------
    while(1)
    {
        //TODO:: Please write your application code
		SET_OUT_1
 378:	c3 9a       	sbi	0x18, 3	; 24
		CLR_OUT_1
 37a:	c3 98       	cbi	0x18, 3	; 24
		SET_OUT_2
 37c:	c4 9a       	sbi	0x18, 4	; 24
		CLR_OUT_2
 37e:	c4 98       	cbi	0x18, 4	; 24
		SET_OUT_3
 380:	c5 9a       	sbi	0x18, 5	; 24
		CLR_OUT_3
 382:	c5 98       	cbi	0x18, 5	; 24
		SET_OUT_4
 384:	c6 9a       	sbi	0x18, 6	; 24
		CLR_OUT_4
 386:	c6 98       	cbi	0x18, 6	; 24
		
		SET_OUT_5
 388:	c7 9a       	sbi	0x18, 7	; 24
		CLR_OUT_5
 38a:	c7 98       	cbi	0x18, 7	; 24
		SET_OUT_6
 38c:	88 81       	ld	r24, Y
 38e:	88 60       	ori	r24, 0x08	; 8
 390:	88 83       	st	Y, r24
		CLR_OUT_6
 392:	88 81       	ld	r24, Y
 394:	87 7f       	andi	r24, 0xF7	; 247
 396:	88 83       	st	Y, r24
		SET_OUT_7
 398:	88 81       	ld	r24, Y
 39a:	80 61       	ori	r24, 0x10	; 16
 39c:	88 83       	st	Y, r24
		CLR_OUT_7
 39e:	88 81       	ld	r24, Y
 3a0:	8f 7e       	andi	r24, 0xEF	; 239
 3a2:	88 83       	st	Y, r24
		SET_OUT_8
 3a4:	af 9a       	sbi	0x15, 7	; 21
		CLR_OUT_8
 3a6:	af 98       	cbi	0x15, 7	; 21
		
		SET_OUT_9
 3a8:	f7 01       	movw	r30, r14
 3aa:	80 81       	ld	r24, Z
 3ac:	80 61       	ori	r24, 0x10	; 16
 3ae:	80 83       	st	Z, r24
		CLR_OUT_9
 3b0:	80 81       	ld	r24, Z
 3b2:	8f 7e       	andi	r24, 0xEF	; 239
 3b4:	80 83       	st	Z, r24
		SET_OUT_10
 3b6:	95 9a       	sbi	0x12, 5	; 18
		CLR_OUT_10
 3b8:	95 98       	cbi	0x12, 5	; 18
		SET_OUT_11
 3ba:	d8 9a       	sbi	0x1b, 0	; 27
		CLR_OUT_11
 3bc:	d8 98       	cbi	0x1b, 0	; 27
		SET_OUT_12
 3be:	97 9a       	sbi	0x12, 7	; 18
		CLR_OUT_12
 3c0:	97 98       	cbi	0x12, 7	; 18
		
		
// 		cnt=read_adc(A_IN_1);
//  		Main_menu_i2c (cnt);
// 		cnt=read_adc(A_IN_2);
		rs485_0_write (cnt);
 3c2:	80 2f       	mov	r24, r16
 3c4:	0e 94 62 03 	call	0x6c4	; 0x6c4 <rs485_0_write>
// 		cnt=read_adc(A_IN_3);
  		uart_1_write (cnt);
 3c8:	80 2f       	mov	r24, r16
 3ca:	0e 94 b7 00 	call	0x16e	; 0x16e <uart_1_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3ce:	8f ea       	ldi	r24, 0xAF	; 175
 3d0:	94 e0       	ldi	r25, 0x04	; 4
 3d2:	01 97       	sbiw	r24, 0x01	; 1
 3d4:	f1 f7       	brne	.-4      	; 0x3d2 <main+0xa0>
 3d6:	00 c0       	rjmp	.+0      	; 0x3d8 <main+0xa6>
 3d8:	00 00       	nop
 		//_delay_ms(1);
		 _delay_us(300);
		 set_pwm(pwm_1, 800);
 3da:	60 e2       	ldi	r22, 0x20	; 32
 3dc:	73 e0       	ldi	r23, 0x03	; 3
 3de:	85 e0       	ldi	r24, 0x05	; 5
 3e0:	0e 94 88 01 	call	0x310	; 0x310 <set_pwm>
		 set_pwm(pwm_2, 25);
 3e4:	69 e1       	ldi	r22, 0x19	; 25
 3e6:	70 e0       	ldi	r23, 0x00	; 0
 3e8:	86 e0       	ldi	r24, 0x06	; 6
 3ea:	0e 94 88 01 	call	0x310	; 0x310 <set_pwm>
		 set_pwm(pwm_3, 540);
 3ee:	6c e1       	ldi	r22, 0x1C	; 28
 3f0:	72 e0       	ldi	r23, 0x02	; 2
 3f2:	87 e0       	ldi	r24, 0x07	; 7
 3f4:	0e 94 88 01 	call	0x310	; 0x310 <set_pwm>
 		cnt++;
 3f8:	0f 5f       	subi	r16, 0xFF	; 255
 3fa:	1f 4f       	sbci	r17, 0xFF	; 255
		 if (cnt>1023)
 3fc:	01 15       	cp	r16, r1
 3fe:	94 e0       	ldi	r25, 0x04	; 4
 400:	19 07       	cpc	r17, r25
 402:	08 f0       	brcs	.+2      	; 0x406 <main+0xd4>
 404:	b8 cf       	rjmp	.-144    	; 0x376 <main+0x44>
 406:	b8 cf       	rjmp	.-144    	; 0x378 <main+0x46>

00000408 <i2c_init>:
*   Parameters :    нет
*   Purpose :       Инициализация i2c
****************************************************************************/
void i2c_init(void)
{
	(PORT_I2C&=~(1<<SDA));
 408:	90 98       	cbi	0x12, 0	; 18
	(PORT_I2C&=~(1<<SCL));
 40a:	91 98       	cbi	0x12, 1	; 18
	(DDR_I2C&=~(1<<SDA));
 40c:	88 98       	cbi	0x11, 0	; 17
	(DDR_I2C&=~(1<<SCL));
 40e:	89 98       	cbi	0x11, 1	; 17
 410:	85 e0       	ldi	r24, 0x05	; 5
 412:	8a 95       	dec	r24
 414:	f1 f7       	brne	.-4      	; 0x412 <i2c_init+0xa>
 416:	00 00       	nop
 418:	08 95       	ret

0000041a <i2c_start>:
*   Parameters :    нет
*   Purpose :       Старт i2c
****************************************************************************/
void i2c_start(void)         
{ 
	(DDR_I2C|=(1<<SDA)); _delay_us(pause);
 41a:	88 9a       	sbi	0x11, 0	; 17
 41c:	85 e0       	ldi	r24, 0x05	; 5
 41e:	8a 95       	dec	r24
 420:	f1 f7       	brne	.-4      	; 0x41e <i2c_start+0x4>
 422:	00 00       	nop
	(DDR_I2C|=(1<<SCL)); _delay_us(pause); 
 424:	89 9a       	sbi	0x11, 1	; 17
 426:	85 e0       	ldi	r24, 0x05	; 5
 428:	8a 95       	dec	r24
 42a:	f1 f7       	brne	.-4      	; 0x428 <i2c_start+0xe>
 42c:	00 00       	nop
 42e:	08 95       	ret

00000430 <i2c_write>:
*   Returns :       нет
*   Parameters :    Данныэ на отправку
*   Purpose :       Передача 1го байта по i2c
****************************************************************************/
void i2c_write(unsigned char byt)  
{ 
 430:	27 e0       	ldi	r18, 0x07	; 7
 432:	30 e0       	ldi	r19, 0x00	; 0
    unsigned char k;                       
    for (k = 0; k < 8; k++)    
    { 
		(DDR_I2C|=(1<<SCL));
        if(0x01 & (byt >> (7 - k)))
 434:	90 e0       	ldi	r25, 0x00	; 0
void i2c_write(unsigned char byt)  
{ 
    unsigned char k;                       
    for (k = 0; k < 8; k++)    
    { 
		(DDR_I2C|=(1<<SCL));
 436:	89 9a       	sbi	0x11, 1	; 17
        if(0x01 & (byt >> (7 - k)))
 438:	ac 01       	movw	r20, r24
 43a:	02 2e       	mov	r0, r18
 43c:	02 c0       	rjmp	.+4      	; 0x442 <i2c_write+0x12>
 43e:	55 95       	asr	r21
 440:	47 95       	ror	r20
 442:	0a 94       	dec	r0
 444:	e2 f7       	brpl	.-8      	; 0x43e <i2c_write+0xe>
 446:	40 ff       	sbrs	r20, 0
 448:	02 c0       	rjmp	.+4      	; 0x44e <i2c_write+0x1e>
		{
			(DDR_I2C&=~(1<<SDA));
 44a:	88 98       	cbi	0x11, 0	; 17
 44c:	01 c0       	rjmp	.+2      	; 0x450 <i2c_write+0x20>
		}else
		{
			(DDR_I2C|=(1<<SDA));
 44e:	88 9a       	sbi	0x11, 0	; 17
 450:	45 e0       	ldi	r20, 0x05	; 5
 452:	4a 95       	dec	r20
 454:	f1 f7       	brne	.-4      	; 0x452 <i2c_write+0x22>
 456:	00 00       	nop
		};
	    _delay_us(pause);   
        (DDR_I2C&=~(1<<SCL));
 458:	89 98       	cbi	0x11, 1	; 17
 45a:	45 e0       	ldi	r20, 0x05	; 5
 45c:	4a 95       	dec	r20
 45e:	f1 f7       	brne	.-4      	; 0x45c <i2c_write+0x2c>
 460:	00 00       	nop
 462:	21 50       	subi	r18, 0x01	; 1
 464:	31 09       	sbc	r19, r1
 466:	38 f7       	brcc	.-50     	; 0x436 <i2c_write+0x6>
		_delay_us(pause);             
    };
	(DDR_I2C&=~(1<<SDA));
 468:	88 98       	cbi	0x11, 0	; 17
	(DDR_I2C|=(1<<SCL));
 46a:	89 9a       	sbi	0x11, 1	; 17
 46c:	85 e0       	ldi	r24, 0x05	; 5
 46e:	8a 95       	dec	r24
 470:	f1 f7       	brne	.-4      	; 0x46e <i2c_write+0x3e>
 472:	00 00       	nop
	_delay_us(pause);
	(DDR_I2C&=~(1<<SCL));
 474:	89 98       	cbi	0x11, 1	; 17
 476:	45 e0       	ldi	r20, 0x05	; 5
 478:	4a 95       	dec	r20
 47a:	f1 f7       	brne	.-4      	; 0x478 <i2c_write+0x48>
 47c:	00 00       	nop
	_delay_us(pause);
	(DDR_I2C|=(1<<SCL));
 47e:	89 9a       	sbi	0x11, 1	; 17
 480:	08 95       	ret

00000482 <i2c_stop>:
*   Parameters :    нет
*   Purpose :       Стоп i2c
****************************************************************************/
void i2c_stop(void)            
{ 
    (DDR_I2C|=(1<<SDA)); _delay_us(pause);   
 482:	88 9a       	sbi	0x11, 0	; 17
 484:	85 e0       	ldi	r24, 0x05	; 5
 486:	8a 95       	dec	r24
 488:	f1 f7       	brne	.-4      	; 0x486 <i2c_stop+0x4>
 48a:	00 00       	nop
    (DDR_I2C&=~(1<<SCL)); _delay_us(pause);           
 48c:	89 98       	cbi	0x11, 1	; 17
 48e:	85 e0       	ldi	r24, 0x05	; 5
 490:	8a 95       	dec	r24
 492:	f1 f7       	brne	.-4      	; 0x490 <i2c_stop+0xe>
 494:	00 00       	nop
    (DDR_I2C&=~(1<<SDA)); _delay_us(pause);                                 
 496:	88 98       	cbi	0x11, 0	; 17
 498:	85 e0       	ldi	r24, 0x05	; 5
 49a:	8a 95       	dec	r24
 49c:	f1 f7       	brne	.-4      	; 0x49a <i2c_stop+0x18>
 49e:	00 00       	nop
 4a0:	08 95       	ret

000004a2 <i2c_acknowledge>:
    return (check);      
};

void i2c_acknowledge(void)
{
	(DDR_I2C&=~(1<<SDA));
 4a2:	88 98       	cbi	0x11, 0	; 17
	//delayMicroseconds(1);
	(DDR_I2C|=(1<<SCL));
 4a4:	89 9a       	sbi	0x11, 1	; 17
 4a6:	85 e0       	ldi	r24, 0x05	; 5
 4a8:	8a 95       	dec	r24
 4aa:	f1 f7       	brne	.-4      	; 0x4a8 <i2c_acknowledge+0x6>
 4ac:	00 00       	nop
	_delay_us(pause);
	(DDR_I2C&=~(1<<SCL));
 4ae:	89 98       	cbi	0x11, 1	; 17
 4b0:	08 95       	ret

000004b2 <PCF8574_Write>:

#include "i2c_lcd.h"

//****************************************************************************************
void PCF8574_Write(unsigned char data)
{
 4b2:	cf 93       	push	r28
 4b4:	c8 2f       	mov	r28, r24
	i2c_start();              //         |-[S]-|  ;Start Condition
 4b6:	0e 94 0d 02 	call	0x41a	; 0x41a <i2c_start>
	i2c_write(PCF8574_ADDR | I2C_WRITE);    //         |---Slave address (PCF8574)--[A2=0,A1=0,A0=0]---|   +    |-R/W-|
 4ba:	8e e4       	ldi	r24, 0x4E	; 78
 4bc:	0e 94 18 02 	call	0x430	; 0x430 <i2c_write>
	i2c_acknowledge();        //         |-[A]-|  ;Active LOW
 4c0:	0e 94 51 02 	call	0x4a2	; 0x4a2 <i2c_acknowledge>
	i2c_write(data);          //         |-------------------data to port-----------------------|
 4c4:	8c 2f       	mov	r24, r28
 4c6:	0e 94 18 02 	call	0x430	; 0x430 <i2c_write>
	i2c_acknowledge();        //         |-[A]-|  ;Active LOW
 4ca:	0e 94 51 02 	call	0x4a2	; 0x4a2 <i2c_acknowledge>
	i2c_stop();               //         |-[P]-|  ;Stop Condition
 4ce:	0e 94 41 02 	call	0x482	; 0x482 <i2c_stop>
};
 4d2:	cf 91       	pop	r28
 4d4:	08 95       	ret

000004d6 <send_i2c_lcd_byte>:
//***************************************************************************************
//Procedure sending LCD byte
//Input: Byte, Kommand/Symbol data
//***************************************************************************************
void send_i2c_lcd_byte(unsigned char lcd_data, unsigned char rs_status ) //bool lcd_command,
{
 4d6:	df 92       	push	r13
 4d8:	ef 92       	push	r14
 4da:	ff 92       	push	r15
 4dc:	0f 93       	push	r16
 4de:	1f 93       	push	r17
 4e0:	cf 93       	push	r28
 4e2:	df 93       	push	r29
	//lcd_data=0x08;
	//---------------------------------------------------------------------------------------
	rs_status=rs_status*2;
 4e4:	f6 2e       	mov	r15, r22
 4e6:	ff 0c       	add	r15, r15
	PCF8574_Write(rs_status|E_L|((lcd_data<<1)&0xE0)|((lcd_data>>3)&0x10));
 4e8:	08 2f       	mov	r16, r24
 4ea:	10 e0       	ldi	r17, 0x00	; 0
 4ec:	e8 01       	movw	r28, r16
 4ee:	cc 0f       	add	r28, r28
 4f0:	dd 1f       	adc	r29, r29
 4f2:	dc 2e       	mov	r13, r28
 4f4:	90 ee       	ldi	r25, 0xE0	; 224
 4f6:	d9 22       	and	r13, r25
 4f8:	86 95       	lsr	r24
 4fa:	86 95       	lsr	r24
 4fc:	86 95       	lsr	r24
 4fe:	68 94       	set
 500:	ee 24       	eor	r14, r14
 502:	e4 f8       	bld	r14, 4
 504:	e8 22       	and	r14, r24
 506:	1e 2d       	mov	r17, r14
 508:	1f 29       	or	r17, r15
 50a:	1d 29       	or	r17, r13
 50c:	81 2f       	mov	r24, r17
 50e:	0e 94 59 02 	call	0x4b2	; 0x4b2 <PCF8574_Write>
 512:	85 e3       	ldi	r24, 0x35	; 53
 514:	8a 95       	dec	r24
 516:	f1 f7       	brne	.-4      	; 0x514 <send_i2c_lcd_byte+0x3e>
 518:	00 00       	nop
	_delay_us(10);
	PCF8574_Write(rs_status|E_H|((lcd_data<<1)&0xE0)|((lcd_data>>3)&0x10));
 51a:	df 2d       	mov	r29, r15
 51c:	d8 60       	ori	r29, 0x08	; 8
 51e:	8d 2d       	mov	r24, r13
 520:	8d 2b       	or	r24, r29
 522:	8e 29       	or	r24, r14
 524:	0e 94 59 02 	call	0x4b2	; 0x4b2 <PCF8574_Write>
 528:	95 e3       	ldi	r25, 0x35	; 53
 52a:	9a 95       	dec	r25
 52c:	f1 f7       	brne	.-4      	; 0x52a <send_i2c_lcd_byte+0x54>
 52e:	00 00       	nop
	_delay_us(10);
	PCF8574_Write(rs_status|E_L|((lcd_data<<1)&0xE0)|((lcd_data>>3)&0x10));
 530:	81 2f       	mov	r24, r17
 532:	0e 94 59 02 	call	0x4b2	; 0x4b2 <PCF8574_Write>
 536:	85 e3       	ldi	r24, 0x35	; 53
 538:	8a 95       	dec	r24
 53a:	f1 f7       	brne	.-4      	; 0x538 <send_i2c_lcd_byte+0x62>
 53c:	00 00       	nop
	_delay_us(10);
	PCF8574_Write(rs_status|E_L|((lcd_data<<5)&0xE0)|((lcd_data<<1)&0x10));
 53e:	02 95       	swap	r16
 540:	00 0f       	add	r16, r16
 542:	00 7e       	andi	r16, 0xE0	; 224
 544:	c0 71       	andi	r28, 0x10	; 16
 546:	f0 2a       	or	r15, r16
 548:	fc 2a       	or	r15, r28
 54a:	8f 2d       	mov	r24, r15
 54c:	0e 94 59 02 	call	0x4b2	; 0x4b2 <PCF8574_Write>
 550:	95 e3       	ldi	r25, 0x35	; 53
 552:	9a 95       	dec	r25
 554:	f1 f7       	brne	.-4      	; 0x552 <send_i2c_lcd_byte+0x7c>
 556:	00 00       	nop
	_delay_us(10);
	PCF8574_Write(rs_status|E_H|((lcd_data<<5)&0xE0)|((lcd_data<<1)&0x10));
 558:	8d 2f       	mov	r24, r29
 55a:	8c 2b       	or	r24, r28
 55c:	80 2b       	or	r24, r16
 55e:	0e 94 59 02 	call	0x4b2	; 0x4b2 <PCF8574_Write>
 562:	85 e3       	ldi	r24, 0x35	; 53
 564:	8a 95       	dec	r24
 566:	f1 f7       	brne	.-4      	; 0x564 <send_i2c_lcd_byte+0x8e>
 568:	00 00       	nop
	_delay_us(10);
	PCF8574_Write(rs_status|E_L|((lcd_data<<5)&0xE0)|((lcd_data<<1)&0x10));
 56a:	8f 2d       	mov	r24, r15
 56c:	0e 94 59 02 	call	0x4b2	; 0x4b2 <PCF8574_Write>
 570:	87 ec       	ldi	r24, 0xC7	; 199
 572:	90 e0       	ldi	r25, 0x00	; 0
 574:	01 97       	sbiw	r24, 0x01	; 1
 576:	f1 f7       	brne	.-4      	; 0x574 <send_i2c_lcd_byte+0x9e>
 578:	00 c0       	rjmp	.+0      	; 0x57a <send_i2c_lcd_byte+0xa4>
 57a:	00 00       	nop

	
	
	
	
};
 57c:	df 91       	pop	r29
 57e:	cf 91       	pop	r28
 580:	1f 91       	pop	r17
 582:	0f 91       	pop	r16
 584:	ff 90       	pop	r15
 586:	ef 90       	pop	r14
 588:	df 90       	pop	r13
 58a:	08 95       	ret

0000058c <i2c_lcd_init>:
void i2c_lcd_init(void)
{
	//---------------------------------------------------------------------------------------
	//init i2c
	//---------------------------------------------------------------------------------------
	i2c_init();
 58c:	0e 94 04 02 	call	0x408	; 0x408 <i2c_init>
	//---------------------------------------------------------------------------------------
	PCF8574_Write(0x00);//E = 0 RS= 0 R/W = 0
 590:	80 e0       	ldi	r24, 0x00	; 0
 592:	0e 94 59 02 	call	0x4b2	; 0x4b2 <PCF8574_Write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 596:	8f e9       	ldi	r24, 0x9F	; 159
 598:	9f e0       	ldi	r25, 0x0F	; 15
 59a:	01 97       	sbiw	r24, 0x01	; 1
 59c:	f1 f7       	brne	.-4      	; 0x59a <i2c_lcd_init+0xe>
 59e:	00 c0       	rjmp	.+0      	; 0x5a0 <i2c_lcd_init+0x14>
 5a0:	00 00       	nop
	_delay_ms(1);
	//---------------------------------------------------------------------------------------
	//Function Set 3 ????? ?????? D4-D7 ????????????? bus
	PCF8574_Write(0x60);      //1    0x20 + 0x03
 5a2:	80 e6       	ldi	r24, 0x60	; 96
 5a4:	0e 94 59 02 	call	0x4b2	; 0x4b2 <PCF8574_Write>
 5a8:	8f e9       	ldi	r24, 0x9F	; 159
 5aa:	9f e0       	ldi	r25, 0x0F	; 15
 5ac:	01 97       	sbiw	r24, 0x01	; 1
 5ae:	f1 f7       	brne	.-4      	; 0x5ac <i2c_lcd_init+0x20>
 5b0:	00 c0       	rjmp	.+0      	; 0x5b2 <i2c_lcd_init+0x26>
 5b2:	00 00       	nop
	_delay_ms(1);
	PCF8574_Write(0x40);
 5b4:	80 e4       	ldi	r24, 0x40	; 64
 5b6:	0e 94 59 02 	call	0x4b2	; 0x4b2 <PCF8574_Write>
 5ba:	8f e9       	ldi	r24, 0x9F	; 159
 5bc:	9f e0       	ldi	r25, 0x0F	; 15
 5be:	01 97       	sbiw	r24, 0x01	; 1
 5c0:	f1 f7       	brne	.-4      	; 0x5be <i2c_lcd_init+0x32>
 5c2:	00 c0       	rjmp	.+0      	; 0x5c4 <i2c_lcd_init+0x38>
 5c4:	00 00       	nop
	_delay_ms(1);
	PCF8574_Write(E_H|0x40);     //2
 5c6:	88 e4       	ldi	r24, 0x48	; 72
 5c8:	0e 94 59 02 	call	0x4b2	; 0x4b2 <PCF8574_Write>
 5cc:	8f e9       	ldi	r24, 0x9F	; 159
 5ce:	9f e0       	ldi	r25, 0x0F	; 15
 5d0:	01 97       	sbiw	r24, 0x01	; 1
 5d2:	f1 f7       	brne	.-4      	; 0x5d0 <i2c_lcd_init+0x44>
 5d4:	00 c0       	rjmp	.+0      	; 0x5d6 <i2c_lcd_init+0x4a>
 5d6:	00 00       	nop
	_delay_ms(1);
	PCF8574_Write(E_L|0x40);
 5d8:	80 e4       	ldi	r24, 0x40	; 64
 5da:	0e 94 59 02 	call	0x4b2	; 0x4b2 <PCF8574_Write>
 5de:	8f e9       	ldi	r24, 0x9F	; 159
 5e0:	9f e0       	ldi	r25, 0x0F	; 15
 5e2:	01 97       	sbiw	r24, 0x01	; 1
 5e4:	f1 f7       	brne	.-4      	; 0x5e2 <i2c_lcd_init+0x56>
 5e6:	00 c0       	rjmp	.+0      	; 0x5e8 <i2c_lcd_init+0x5c>
 5e8:	00 00       	nop
	_delay_ms(1);
	//---------------------------------------------------------------------------------------
	send_i2c_lcd_byte(0x28,lcd_kom);			//2 lines, 5*8 pixels, 8bit data
 5ea:	60 e0       	ldi	r22, 0x00	; 0
 5ec:	88 e2       	ldi	r24, 0x28	; 40
 5ee:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <send_i2c_lcd_byte>
	send_i2c_lcd_byte(0x0C,lcd_kom);			//screen enable,
 5f2:	60 e0       	ldi	r22, 0x00	; 0
 5f4:	8c e0       	ldi	r24, 0x0C	; 12
 5f6:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <send_i2c_lcd_byte>
	send_i2c_lcd_byte(0x06,lcd_kom);			//auto shift left enable
 5fa:	60 e0       	ldi	r22, 0x00	; 0
 5fc:	86 e0       	ldi	r24, 0x06	; 6
 5fe:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <send_i2c_lcd_byte>
	send_i2c_lcd_byte(0x01,lcd_kom);			//0x01 clear screen
 602:	60 e0       	ldi	r22, 0x00	; 0
 604:	81 e0       	ldi	r24, 0x01	; 1
 606:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <send_i2c_lcd_byte>
 60a:	9f ef       	ldi	r25, 0xFF	; 255
 60c:	29 ef       	ldi	r18, 0xF9	; 249
 60e:	80 e0       	ldi	r24, 0x00	; 0
 610:	91 50       	subi	r25, 0x01	; 1
 612:	20 40       	sbci	r18, 0x00	; 0
 614:	80 40       	sbci	r24, 0x00	; 0
 616:	e1 f7       	brne	.-8      	; 0x610 <i2c_lcd_init+0x84>
 618:	00 c0       	rjmp	.+0      	; 0x61a <i2c_lcd_init+0x8e>
 61a:	00 00       	nop
 61c:	08 95       	ret

0000061e <__vector_18>:

#include "rs485_0.h"

//****************************************************************************************
ISR(USART0_RX_vect)
{
 61e:	1f 92       	push	r1
 620:	0f 92       	push	r0
 622:	0f b6       	in	r0, 0x3f	; 63
 624:	0f 92       	push	r0
 626:	11 24       	eor	r1, r1
 628:	2f 93       	push	r18
 62a:	8f 93       	push	r24
 62c:	9f 93       	push	r25
 62e:	ef 93       	push	r30
 630:	ff 93       	push	r31
	//---------------------------------------------------------------------------------------
	uint8_t byte;
	uint8_t wr = (uart_0_rxwr+1) & UART_BUFEND_0_;
 632:	e0 91 38 01 	lds	r30, 0x0138
 636:	8e 2f       	mov	r24, r30
 638:	8f 5f       	subi	r24, 0xFF	; 255
 63a:	8f 70       	andi	r24, 0x0F	; 15
	byte = UDR0;
 63c:	2c b1       	in	r18, 0x0c	; 12
	if(wr != uart_0_rxrd)
 63e:	90 91 39 01 	lds	r25, 0x0139
 642:	89 17       	cp	r24, r25
 644:	31 f0       	breq	.+12     	; 0x652 <__vector_18+0x34>
	{
		uart_0_rx[uart_0_rxwr] = byte;
 646:	f0 e0       	ldi	r31, 0x00	; 0
 648:	e9 5d       	subi	r30, 0xD9	; 217
 64a:	fe 4f       	sbci	r31, 0xFE	; 254
 64c:	20 83       	st	Z, r18
		uart_0_rxwr = wr;
 64e:	80 93 38 01 	sts	0x0138, r24
	};
	return;
	//---------------------------------------------------------------------------------------
};
 652:	ff 91       	pop	r31
 654:	ef 91       	pop	r30
 656:	9f 91       	pop	r25
 658:	8f 91       	pop	r24
 65a:	2f 91       	pop	r18
 65c:	0f 90       	pop	r0
 65e:	0f be       	out	0x3f, r0	; 63
 660:	0f 90       	pop	r0
 662:	1f 90       	pop	r1
 664:	18 95       	reti

00000666 <__vector_19>:
//****************************************************************************************
ISR(USART0_UDRE_vect)
{
 666:	1f 92       	push	r1
 668:	0f 92       	push	r0
 66a:	0f b6       	in	r0, 0x3f	; 63
 66c:	0f 92       	push	r0
 66e:	11 24       	eor	r1, r1
 670:	8f 93       	push	r24
 672:	9f 93       	push	r25
 674:	ef 93       	push	r30
 676:	ff 93       	push	r31
	//---------------------------------------------------------------------------------------
	uint8_t rd = uart_0_txrd;
 678:	80 91 37 01 	lds	r24, 0x0137
	if(rd != uart_0_txwr)
 67c:	90 91 26 01 	lds	r25, 0x0126
 680:	89 17       	cp	r24, r25
 682:	59 f0       	breq	.+22     	; 0x69a <__vector_19+0x34>
	{
		UDR0 = uart_0_tx[rd];
 684:	e8 2f       	mov	r30, r24
 686:	f0 e0       	ldi	r31, 0x00	; 0
 688:	e6 5c       	subi	r30, 0xC6	; 198
 68a:	fe 4f       	sbci	r31, 0xFE	; 254
 68c:	90 81       	ld	r25, Z
 68e:	9c b9       	out	0x0c, r25	; 12
		uart_0_txrd = (rd+1) & UART_BUFEND_0_;
 690:	8f 5f       	subi	r24, 0xFF	; 255
 692:	8f 70       	andi	r24, 0x0F	; 15
 694:	80 93 37 01 	sts	0x0137, r24
		return;
 698:	01 c0       	rjmp	.+2      	; 0x69c <__vector_19+0x36>
	}else
	{

	};
	UCSR0B &= ~(1<<UDRIE0);
 69a:	55 98       	cbi	0x0a, 5	; 10
	return;
	//---------------------------------------------------------------------------------------
};
 69c:	ff 91       	pop	r31
 69e:	ef 91       	pop	r30
 6a0:	9f 91       	pop	r25
 6a2:	8f 91       	pop	r24
 6a4:	0f 90       	pop	r0
 6a6:	0f be       	out	0x3f, r0	; 63
 6a8:	0f 90       	pop	r0
 6aa:	1f 90       	pop	r1
 6ac:	18 95       	reti

000006ae <__vector_20>:
//****************************************************************************************
ISR(USART0_TX_vect)
{
 6ae:	1f 92       	push	r1
 6b0:	0f 92       	push	r0
 6b2:	0f b6       	in	r0, 0x3f	; 63
 6b4:	0f 92       	push	r0
 6b6:	11 24       	eor	r1, r1
	//---------------------------------------------------------------------------------------
	TXD_DISABLE
 6b8:	1a 98       	cbi	0x03, 2	; 3
	return;
	//---------------------------------------------------------------------------------------
};
 6ba:	0f 90       	pop	r0
 6bc:	0f be       	out	0x3f, r0	; 63
 6be:	0f 90       	pop	r0
 6c0:	1f 90       	pop	r1
 6c2:	18 95       	reti

000006c4 <rs485_0_write>:
};
//****************************************************************************************
void rs485_0_write(uint8_t byte)
{
	//---------------------------------------------------------------------------------------
	uint8_t wr = (uart_0_txwr+1) & UART_BUFEND_0_;
 6c4:	e0 91 26 01 	lds	r30, 0x0126
 6c8:	9e 2f       	mov	r25, r30
 6ca:	9f 5f       	subi	r25, 0xFF	; 255
 6cc:	9f 70       	andi	r25, 0x0F	; 15
	if(wr != uart_0_txrd)
 6ce:	20 91 37 01 	lds	r18, 0x0137
 6d2:	92 17       	cp	r25, r18
 6d4:	41 f0       	breq	.+16     	; 0x6e6 <rs485_0_write+0x22>
	{
		uart_0_tx[uart_0_txwr] = byte;
 6d6:	f0 e0       	ldi	r31, 0x00	; 0
 6d8:	e6 5c       	subi	r30, 0xC6	; 198
 6da:	fe 4f       	sbci	r31, 0xFE	; 254
 6dc:	80 83       	st	Z, r24
		uart_0_txwr = wr;
 6de:	90 93 26 01 	sts	0x0126, r25
		TXD_ENABLE
 6e2:	1a 9a       	sbi	0x03, 2	; 3
		UCSR0B |= (1<<UDRIE0);
 6e4:	55 9a       	sbi	0x0a, 5	; 10
 6e6:	08 95       	ret

000006e8 <rs485_0_init>:
};
//****************************************************************************************
void rs485_0_init()
{
	//---------------------------------------------------------------------------------------
	(PORT_TXDE&=~(1<<TXDE));
 6e8:	1a 98       	cbi	0x03, 2	; 3
	(DDR_TXDE|=(1<<TXDE));
 6ea:	12 9a       	sbi	0x02, 2	; 2
	//---------------------------------------------------------------------------------------
	UBRR0L = F_CPU/UART_BAUD_RATE_0_/16-1;
 6ec:	89 e1       	ldi	r24, 0x19	; 25
 6ee:	89 b9       	out	0x09, r24	; 9
	UBRR0H = (F_CPU/UART_BAUD_RATE_0_/16-1)>>8;
 6f0:	10 92 90 00 	sts	0x0090, r1
	UCSR0B = (1<<RXCIE0)|(1<<TXCIE0)|(1<<RXEN0)|(1<<TXEN0);
 6f4:	88 ed       	ldi	r24, 0xD8	; 216
 6f6:	8a b9       	out	0x0a, r24	; 10
 6f8:	08 95       	ret

000006fa <BUT_Init>:
*   Purpose :       РёРЅРёС†РёР°Р»РёР·Р°С†РёСЏ РїРѕСЂС‚РѕРІ РІРІРѕРґР°/РІС‹РІРѕРґР°
*                   РІС‹Р·С‹РІР°РµС‚СЃСЏ РѕР±С‹С‡РЅРѕ РІ РЅР°С‡Р°Р»Рµ main`a
****************************************************************************/
void BUT_Init(void)
{
	DDRX_BUTTON &= ~(MASK_BUTTON);
 6fa:	84 b3       	in	r24, 0x14	; 20
 6fc:	80 7c       	andi	r24, 0xC0	; 192
 6fe:	84 bb       	out	0x14, r24	; 20
	PORT_BUTTON |= MASK_BUTTON;
 700:	85 b3       	in	r24, 0x15	; 21
 702:	8f 63       	ori	r24, 0x3F	; 63
 704:	85 bb       	out	0x15, r24	; 21
 706:	08 95       	ret

00000708 <BUT_Debrief>:
void BUT_Debrief(void)
{
	//---------------------------------------------------------------------------------------
	unsigned char key;
	//---------------------------------------------------------------------------------------
	if((((PIN_BUTTON)>>(OK))&1)==0)
 708:	98 9b       	sbis	0x13, 0	; 19
 70a:	1a c0       	rjmp	.+52     	; 0x740 <BUT_Debrief+0x38>
	{
		key = KEY_OK;
	}else if ((((PIN_BUTTON)>>(UP))&1)==0)
 70c:	99 9b       	sbis	0x13, 1	; 19
 70e:	1a c0       	rjmp	.+52     	; 0x744 <BUT_Debrief+0x3c>
	{
		key = KEY_DOWN;
	}else if ((((PIN_BUTTON)>>(DOWN))&1)==0)
 710:	9a 9b       	sbis	0x13, 2	; 19
 712:	1a c0       	rjmp	.+52     	; 0x748 <BUT_Debrief+0x40>
	{
		key = KEY_UP;
	}else if ((((PIN_BUTTON)>>(RIGHT))&1)==0)
 714:	9b 9b       	sbis	0x13, 3	; 19
 716:	1a c0       	rjmp	.+52     	; 0x74c <BUT_Debrief+0x44>
	{
		key = KEY_RIGHT;
	}
	else if ((((PIN_BUTTON)>>(LEFT))&1)==0)
 718:	9c 9b       	sbis	0x13, 4	; 19
 71a:	1a c0       	rjmp	.+52     	; 0x750 <BUT_Debrief+0x48>
	{
		key = KEY_LEFT;
	}
	else if ((((PIN_BUTTON)>>(KEY_ESC))&1)==0)
 71c:	9e 9b       	sbis	0x13, 6	; 19
 71e:	1a c0       	rjmp	.+52     	; 0x754 <BUT_Debrief+0x4c>
 720:	0c c0       	rjmp	.+24     	; 0x73a <BUT_Debrief+0x32>
	{
		//Рё РµСЃР»Рё РєРЅРѕРїРєР° СѓРґРµСЂР¶РёРІР°РµС‚СЃСЏ РґРѕР»РіРѕ
		//Р·Р°РїРёСЃР°С‚СЊ РµРµ РЅРѕРјРµСЂ РІ Р±СѓС„РµСЂ
		if (comp == THRESHOLD)
		{
			comp = THRESHOLD+10;
 722:	8f e0       	ldi	r24, 0x0F	; 15
 724:	80 93 24 01 	sts	0x0124, r24
			pressedKey = key;
 728:	90 93 25 01 	sts	0x0125, r25
			return;
 72c:	08 95       	ret
		}
		else if (comp < (THRESHOLD+5))
 72e:	8a 30       	cpi	r24, 0x0A	; 10
 730:	b8 f4       	brcc	.+46     	; 0x760 <BUT_Debrief+0x58>
		{
			comp++;
 732:	8f 5f       	subi	r24, 0xFF	; 255
 734:	80 93 24 01 	sts	0x0124, r24
 738:	08 95       	ret
		};
	}
	else
	{
		comp=0;
 73a:	10 92 24 01 	sts	0x0124, r1
 73e:	08 95       	ret
	//---------------------------------------------------------------------------------------
	unsigned char key;
	//---------------------------------------------------------------------------------------
	if((((PIN_BUTTON)>>(OK))&1)==0)
	{
		key = KEY_OK;
 740:	91 e0       	ldi	r25, 0x01	; 1
 742:	09 c0       	rjmp	.+18     	; 0x756 <BUT_Debrief+0x4e>
	}else if ((((PIN_BUTTON)>>(UP))&1)==0)
	{
		key = KEY_DOWN;
 744:	93 e0       	ldi	r25, 0x03	; 3
 746:	07 c0       	rjmp	.+14     	; 0x756 <BUT_Debrief+0x4e>
	}else if ((((PIN_BUTTON)>>(DOWN))&1)==0)
	{
		key = KEY_UP;
 748:	92 e0       	ldi	r25, 0x02	; 2
 74a:	05 c0       	rjmp	.+10     	; 0x756 <BUT_Debrief+0x4e>
	}else if ((((PIN_BUTTON)>>(RIGHT))&1)==0)
	{
		key = KEY_RIGHT;
 74c:	94 e0       	ldi	r25, 0x04	; 4
 74e:	03 c0       	rjmp	.+6      	; 0x756 <BUT_Debrief+0x4e>
	}
	else if ((((PIN_BUTTON)>>(LEFT))&1)==0)
	{
		key = KEY_LEFT;
 750:	95 e0       	ldi	r25, 0x05	; 5
 752:	01 c0       	rjmp	.+2      	; 0x756 <BUT_Debrief+0x4e>
	}
	else if ((((PIN_BUTTON)>>(KEY_ESC))&1)==0)
	{
		key = KEY_ESC;
 754:	96 e0       	ldi	r25, 0x06	; 6
	//РµСЃР»Рё РІРѕ РІСЂРµРјРµРЅРЅРѕР№ РїРµСЂРµРјРµРЅРЅРѕР№ С‡С‚Рѕ-С‚Рѕ РµСЃС‚СЊ
	if (key!=0)
	{
		//Рё РµСЃР»Рё РєРЅРѕРїРєР° СѓРґРµСЂР¶РёРІР°РµС‚СЃСЏ РґРѕР»РіРѕ
		//Р·Р°РїРёСЃР°С‚СЊ РµРµ РЅРѕРјРµСЂ РІ Р±СѓС„РµСЂ
		if (comp == THRESHOLD)
 756:	80 91 24 01 	lds	r24, 0x0124
 75a:	85 30       	cpi	r24, 0x05	; 5
 75c:	41 f7       	brne	.-48     	; 0x72e <BUT_Debrief+0x26>
 75e:	e1 cf       	rjmp	.-62     	; 0x722 <BUT_Debrief+0x1a>
 760:	08 95       	ret

00000762 <_exit>:
 762:	f8 94       	cli

00000764 <__stop_program>:
 764:	ff cf       	rjmp	.-2      	; 0x764 <__stop_program>
