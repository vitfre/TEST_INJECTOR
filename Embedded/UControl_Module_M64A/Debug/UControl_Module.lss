
UControl_Module.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  000006be  00000752  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006be  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000004a  00800100  00800100  00000752  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000752  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000258  00000000  00000000  00000782  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001f94  00000000  00000000  000009da  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000a67  00000000  00000000  0000296e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000e08  00000000  00000000  000033d5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000005f4  00000000  00000000  000041e0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000614  00000000  00000000  000047d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001276  00000000  00000000  00004de8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001f0  00000000  00000000  0000605e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:

char const _BURN_OK_[]			PROGMEM = "  Hello  world  ";

//****************************************************************************************
void Main_menu_i2c (unsigned char data)
{
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
	set_i2c_lcd_position(1,1);
   4:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
   8:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
	send_i2c_lcd_string_P(_BURN_OK_);
   c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  10:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
	set_i2c_lcd_position(2,1);
  14:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  18:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
	detect_i2c_string(data);				// Виводим на дисплей
  1c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  20:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
};			//Main_menu
  24:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  28:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__vector_10>
  2c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  30:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  34:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  38:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__vector_14>
  3c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  40:	0c 94 b1 00 	jmp	0x162	; 0x162 <__vector_16>
  44:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  48:	0c 94 b5 02 	jmp	0x56a	; 0x56a <__vector_18>
  4c:	0c 94 d9 02 	jmp	0x5b2	; 0x5b2 <__vector_19>
  50:	0c 94 04 03 	jmp	0x608	; 0x608 <__vector_20>
  54:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  58:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  5c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  60:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  64:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  68:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  6c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  70:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  74:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__vector_29>
  78:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__vector_30>
  7c:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__vector_31>
  80:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  84:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  88:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	aa 34       	cpi	r26, 0x4A	; 74
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	0e 94 57 01 	call	0x2ae	; 0x2ae <main>
  ac:	0c 94 5d 03 	jmp	0x6ba	; 0x6ba <_exit>

000000b0 <__bad_interrupt>:
  b0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b4 <__vector_30>:

#include "buart_1.h"

//****************************************************************************************
ISR(USART1_RX_vect)
{
  b4:	1f 92       	push	r1
  b6:	0f 92       	push	r0
  b8:	0f b6       	in	r0, 0x3f	; 63
  ba:	0f 92       	push	r0
  bc:	11 24       	eor	r1, r1
  be:	2f 93       	push	r18
  c0:	8f 93       	push	r24
  c2:	9f 93       	push	r25
  c4:	ef 93       	push	r30
  c6:	ff 93       	push	r31
	uint8_t byte;
	uint8_t wr = (uart_1_rxwr+1) & UART_BUFEND_1_;
  c8:	e0 91 22 01 	lds	r30, 0x0122
  cc:	81 e0       	ldi	r24, 0x01	; 1
  ce:	8e 0f       	add	r24, r30
  d0:	8f 70       	andi	r24, 0x0F	; 15
	byte = UDR1;
  d2:	20 91 9c 00 	lds	r18, 0x009C
	if(wr != uart_1_rxrd)
  d6:	90 91 23 01 	lds	r25, 0x0123
  da:	89 17       	cp	r24, r25
  dc:	31 f0       	breq	.+12     	; 0xea <__vector_30+0x36>
	{
		uart_1_rx[uart_1_rxwr] = byte;
  de:	f0 e0       	ldi	r31, 0x00	; 0
  e0:	ef 5e       	subi	r30, 0xEF	; 239
  e2:	fe 4f       	sbci	r31, 0xFE	; 254
  e4:	20 83       	st	Z, r18
		uart_1_rxwr = wr;
  e6:	80 93 22 01 	sts	0x0122, r24
	};
};
  ea:	ff 91       	pop	r31
  ec:	ef 91       	pop	r30
  ee:	9f 91       	pop	r25
  f0:	8f 91       	pop	r24
  f2:	2f 91       	pop	r18
  f4:	0f 90       	pop	r0
  f6:	0f be       	out	0x3f, r0	; 63
  f8:	0f 90       	pop	r0
  fa:	1f 90       	pop	r1
  fc:	18 95       	reti

000000fe <__vector_31>:
//****************************************************************************************
ISR(USART1_UDRE_vect)
{
  fe:	1f 92       	push	r1
 100:	0f 92       	push	r0
 102:	0f b6       	in	r0, 0x3f	; 63
 104:	0f 92       	push	r0
 106:	11 24       	eor	r1, r1
 108:	8f 93       	push	r24
 10a:	9f 93       	push	r25
 10c:	ef 93       	push	r30
 10e:	ff 93       	push	r31
	uint8_t rd = uart_1_txrd;
 110:	80 91 00 01 	lds	r24, 0x0100
	if(rd != uart_1_txwr)
 114:	90 91 21 01 	lds	r25, 0x0121
 118:	89 17       	cp	r24, r25
 11a:	61 f0       	breq	.+24     	; 0x134 <__vector_31+0x36>
	{
		UDR1 = uart_1_tx[rd];
 11c:	e8 2f       	mov	r30, r24
 11e:	f0 e0       	ldi	r31, 0x00	; 0
 120:	ef 5f       	subi	r30, 0xFF	; 255
 122:	fe 4f       	sbci	r31, 0xFE	; 254
 124:	90 81       	ld	r25, Z
 126:	90 93 9c 00 	sts	0x009C, r25
		uart_1_txrd = (rd+1) & UART_BUFEND_1_;
 12a:	8f 5f       	subi	r24, 0xFF	; 255
 12c:	8f 70       	andi	r24, 0x0F	; 15
 12e:	80 93 00 01 	sts	0x0100, r24
		return;
 132:	05 c0       	rjmp	.+10     	; 0x13e <__vector_31+0x40>
	};
	UCSR1B &= ~(1<<UDRIE1);
 134:	ea e9       	ldi	r30, 0x9A	; 154
 136:	f0 e0       	ldi	r31, 0x00	; 0
 138:	80 81       	ld	r24, Z
 13a:	8f 7d       	andi	r24, 0xDF	; 223
 13c:	80 83       	st	Z, r24
};
 13e:	ff 91       	pop	r31
 140:	ef 91       	pop	r30
 142:	9f 91       	pop	r25
 144:	8f 91       	pop	r24
 146:	0f 90       	pop	r0
 148:	0f be       	out	0x3f, r0	; 63
 14a:	0f 90       	pop	r0
 14c:	1f 90       	pop	r1
 14e:	18 95       	reti

00000150 <uart_1_init>:
	};
};
//****************************************************************************************
void uart_1_init()
{
	UBRR1L = F_CPU/UART_BAUD_RATE_1_/16-1;
 150:	89 e1       	ldi	r24, 0x19	; 25
 152:	80 93 99 00 	sts	0x0099, r24
	UBRR1H = (F_CPU/UART_BAUD_RATE_1_/16-1)>>8;
 156:	10 92 98 00 	sts	0x0098, r1
	UCSR1B = (1<<RXCIE1)|(1<<RXEN1)|(1<<TXEN1);
 15a:	88 e9       	ldi	r24, 0x98	; 152
 15c:	80 93 9a 00 	sts	0x009A, r24
 160:	08 95       	ret

00000162 <__vector_16>:

//****************************************************************************************
// Timer0 overflow interrupt service routine
//****************************************************************************************
ISR (TIMER0_OVF_vect)
{
 162:	1f 92       	push	r1
 164:	0f 92       	push	r0
 166:	0f b6       	in	r0, 0x3f	; 63
 168:	0f 92       	push	r0
 16a:	11 24       	eor	r1, r1
 16c:	2f 93       	push	r18
 16e:	3f 93       	push	r19
 170:	4f 93       	push	r20
 172:	5f 93       	push	r21
 174:	6f 93       	push	r22
 176:	7f 93       	push	r23
 178:	8f 93       	push	r24
 17a:	9f 93       	push	r25
 17c:	af 93       	push	r26
 17e:	bf 93       	push	r27
 180:	ef 93       	push	r30
 182:	ff 93       	push	r31
	//---------------------------------------------------------------------------------------
	BUT_Debrief();
 184:	0e 94 30 03 	call	0x660	; 0x660 <BUT_Debrief>

	//---------------------------------------------------------------------------------------
	return;
};
 188:	ff 91       	pop	r31
 18a:	ef 91       	pop	r30
 18c:	bf 91       	pop	r27
 18e:	af 91       	pop	r26
 190:	9f 91       	pop	r25
 192:	8f 91       	pop	r24
 194:	7f 91       	pop	r23
 196:	6f 91       	pop	r22
 198:	5f 91       	pop	r21
 19a:	4f 91       	pop	r20
 19c:	3f 91       	pop	r19
 19e:	2f 91       	pop	r18
 1a0:	0f 90       	pop	r0
 1a2:	0f be       	out	0x3f, r0	; 63
 1a4:	0f 90       	pop	r0
 1a6:	1f 90       	pop	r1
 1a8:	18 95       	reti

000001aa <__vector_14>:
//****************************************************************************************
// Timer1 overflow interrupt service routine
//****************************************************************************************
ISR (TIMER1_OVF_vect)
{
 1aa:	1f 92       	push	r1
 1ac:	0f 92       	push	r0
 1ae:	0f b6       	in	r0, 0x3f	; 63
 1b0:	0f 92       	push	r0
 1b2:	11 24       	eor	r1, r1
 1b4:	8f 93       	push	r24
	// Reinitialize Timer1 value
	TCNT1H=0x0B;
 1b6:	8b e0       	ldi	r24, 0x0B	; 11
 1b8:	8d bd       	out	0x2d, r24	; 45
	TCNT1L=0xDC;
 1ba:	8c ed       	ldi	r24, 0xDC	; 220
 1bc:	8c bd       	out	0x2c, r24	; 44
	//---------------------------------------------------------------------------------------

	//---------------------------------------------------------------------------------------
	return;
};
 1be:	8f 91       	pop	r24
 1c0:	0f 90       	pop	r0
 1c2:	0f be       	out	0x3f, r0	; 63
 1c4:	0f 90       	pop	r0
 1c6:	1f 90       	pop	r1
 1c8:	18 95       	reti

000001ca <__vector_10>:
//****************************************************************************************
// Timer2 overflow interrupt service routine
//****************************************************************************************
ISR (TIMER2_OVF_vect)
{
 1ca:	1f 92       	push	r1
 1cc:	0f 92       	push	r0
 1ce:	0f b6       	in	r0, 0x3f	; 63
 1d0:	0f 92       	push	r0
 1d2:	11 24       	eor	r1, r1
	//---------------------------------------------------------------------------------------

	//---------------------------------------------------------------------------------------
	return;
};
 1d4:	0f 90       	pop	r0
 1d6:	0f be       	out	0x3f, r0	; 63
 1d8:	0f 90       	pop	r0
 1da:	1f 90       	pop	r1
 1dc:	18 95       	reti

000001de <__vector_29>:
//****************************************************************************************
// Timer3 overflow interrupt service routine
//****************************************************************************************
ISR (TIMER3_OVF_vect)
{
 1de:	1f 92       	push	r1
 1e0:	0f 92       	push	r0
 1e2:	0f b6       	in	r0, 0x3f	; 63
 1e4:	0f 92       	push	r0
 1e6:	11 24       	eor	r1, r1
	//---------------------------------------------------------------------------------------

	//---------------------------------------------------------------------------------------
	return;
};
 1e8:	0f 90       	pop	r0
 1ea:	0f be       	out	0x3f, r0	; 63
 1ec:	0f 90       	pop	r0
 1ee:	1f 90       	pop	r1
 1f0:	18 95       	reti

000001f2 <init_mcu>:
	
// Input/Output Ports initialization
// Port A initialization
// Func7=Out Func6=Out Func5=Out Func4=Out Func3=Out Func2=Out Func1=In Func0=Out
// State7=0 State6=0 State5=0 State4=0 State3=0 State2=0 State1=T State0=0
PORTA=0x00;
 1f2:	1b ba       	out	0x1b, r1	; 27
DDRA=0xFD;
 1f4:	8d ef       	ldi	r24, 0xFD	; 253
 1f6:	8a bb       	out	0x1a, r24	; 26

// Port B initialization
// Func7=Out Func6=Out Func5=Out Func4=Out Func3=Out Func2=In Func1=In Func0=In
// State7=0 State6=0 State5=0 State4=0 State3=0 State2=T State1=T State0=T
PORTB=0x00;
 1f8:	18 ba       	out	0x18, r1	; 24
DDRB=0xF8;
 1fa:	88 ef       	ldi	r24, 0xF8	; 248
 1fc:	87 bb       	out	0x17, r24	; 23

// Port C initialization
// Func7=Out Func6=Out Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
// State7=0 State6=1 State5=P State4=P State3=P State2=P State1=P State0=P
PORTC=0x7F;
 1fe:	8f e7       	ldi	r24, 0x7F	; 127
 200:	85 bb       	out	0x15, r24	; 21
DDRC=0xC0;
 202:	80 ec       	ldi	r24, 0xC0	; 192
 204:	84 bb       	out	0x14, r24	; 20

// Port D initialization
// Func7=Out Func6=In Func5=Out Func4=In Func3=In Func2=In Func1=In Func0=In
// State7=0 State6=T State5=0 State4=T State3=T State2=T State1=T State0=T
PORTD=0x00;
 206:	12 ba       	out	0x12, r1	; 18
DDRD=0xA0;
 208:	80 ea       	ldi	r24, 0xA0	; 160
 20a:	81 bb       	out	0x11, r24	; 17

// Port E initialization
// Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
// State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
PORTE=0x00;
 20c:	13 b8       	out	0x03, r1	; 3
DDRE=0x00;
 20e:	12 b8       	out	0x02, r1	; 2

// Port F initialization
// Func7=In Func6=Out Func5=In Func4=Out Func3=In Func2=In Func1=In Func0=In
// State7=P State6=0 State5=P State4=0 State3=T State2=T State1=T State0=T
PORTF=0xA0;
 210:	80 93 62 00 	sts	0x0062, r24
DDRF=0x50;
 214:	80 e5       	ldi	r24, 0x50	; 80
 216:	80 93 61 00 	sts	0x0061, r24


// Port G initialization
// Func4=Out Func3=Out Func2=In Func1=Out Func0=Out
// State4=0 State3=0 State2=T State1=1 State0=1
PORTG=0x03;
 21a:	83 e0       	ldi	r24, 0x03	; 3
 21c:	80 93 65 00 	sts	0x0065, r24
DDRG=0x1B;
 220:	8b e1       	ldi	r24, 0x1B	; 27
 222:	80 93 64 00 	sts	0x0064, r24
// Timer/Counter 0 initialization
// Clock source: System Clock
// Clock value: 62,500 kHz
// Mode: Normal top=0xFF
// OC0 output: Disconnected
ASSR=0x00;
 226:	10 be       	out	0x30, r1	; 48
TCCR0=0x06;
 228:	86 e0       	ldi	r24, 0x06	; 6
 22a:	83 bf       	out	0x33, r24	; 51
TCNT0=0x00;
 22c:	12 be       	out	0x32, r1	; 50
OCR0=0x00;
 22e:	11 be       	out	0x31, r1	; 49
// Timer1 Overflow Interrupt: On
// Input Capture Interrupt: Off
// Compare A Match Interrupt: Off
// Compare B Match Interrupt: Off
// Compare C Match Interrupt: Off
TCCR1A=0x00;
 230:	1f bc       	out	0x2f, r1	; 47
TCCR1B=0x04;
 232:	84 e0       	ldi	r24, 0x04	; 4
 234:	8e bd       	out	0x2e, r24	; 46
TCNT1H=0x0B;
 236:	9b e0       	ldi	r25, 0x0B	; 11
 238:	9d bd       	out	0x2d, r25	; 45
TCNT1L=0xDC;
 23a:	9c ed       	ldi	r25, 0xDC	; 220
 23c:	9c bd       	out	0x2c, r25	; 44
ICR1H=0x00;
 23e:	17 bc       	out	0x27, r1	; 39
ICR1L=0x00;
 240:	16 bc       	out	0x26, r1	; 38
OCR1AH=0x00;
 242:	1b bc       	out	0x2b, r1	; 43
OCR1AL=0x00;
 244:	1a bc       	out	0x2a, r1	; 42
OCR1BH=0x00;
 246:	19 bc       	out	0x29, r1	; 41
OCR1BL=0x00;
 248:	18 bc       	out	0x28, r1	; 40
OCR1CH=0x00;
 24a:	10 92 79 00 	sts	0x0079, r1
OCR1CL=0x00;
 24e:	10 92 78 00 	sts	0x0078, r1
// Clock value: 16000,000 kHz
// Mode: Fast PWM top=0xFF
// OC2 output: Non-Inverted PWM
//TCCR2=0x69;

TCCR2=0x00;
 252:	15 bc       	out	0x25, r1	; 37
TCNT2=0x00;
 254:	14 bc       	out	0x24, r1	; 36
OCR2=0x00;
 256:	13 bc       	out	0x23, r1	; 35
// Compare A Match Interrupt: Off
// Compare B Match Interrupt: Off
// Compare C Match Interrupt: Off
//TCCR3A=0x00;
//TCCR3B=0x01;
TCCR3A=0x00;
 258:	10 92 8b 00 	sts	0x008B, r1
TCCR3B=0x00;
 25c:	10 92 8a 00 	sts	0x008A, r1
TCNT3H=0x00;
 260:	10 92 89 00 	sts	0x0089, r1
TCNT3L=0x00;
 264:	10 92 88 00 	sts	0x0088, r1
ICR3H=0x00;
 268:	10 92 81 00 	sts	0x0081, r1
ICR3L=0x00;
 26c:	10 92 80 00 	sts	0x0080, r1
OCR3AH=0x00;
 270:	10 92 87 00 	sts	0x0087, r1
OCR3AL=0x00;
 274:	10 92 86 00 	sts	0x0086, r1
OCR3BH=0x00;
 278:	10 92 85 00 	sts	0x0085, r1
OCR3BL=0x00;
 27c:	10 92 84 00 	sts	0x0084, r1
OCR3CH=0x00;
 280:	10 92 83 00 	sts	0x0083, r1
OCR3CL=0x00;
 284:	10 92 82 00 	sts	0x0082, r1
// INT3: Off
// INT4: Off
// INT5: Off
// INT6: Off
// INT7: Off
EICRA=0x00;
 288:	10 92 6a 00 	sts	0x006A, r1
EICRB=0x00;
 28c:	1a be       	out	0x3a, r1	; 58
EIMSK=0x00;
 28e:	19 be       	out	0x39, r1	; 57

// Timer(s)/Counter(s) Interrupt(s) initialization
TIMSK=0x05;//TIMSK=0xC5;
 290:	95 e0       	ldi	r25, 0x05	; 5
 292:	97 bf       	out	0x37, r25	; 55
ETIMSK=0x04;
 294:	80 93 7d 00 	sts	0x007D, r24

// USART0 initialization
// USART0 disabled
UCSR0B=0x00;
 298:	1a b8       	out	0x0a, r1	; 10

// USART1 initialization
// USART1 disabled
UCSR1B=0x00;
 29a:	10 92 9a 00 	sts	0x009A, r1

// Analog Comparator initialization
// Analog Comparator: Off
// Analog Comparator Input Capture by Timer/Counter 1: Off
ACSR=0x80;
 29e:	80 e8       	ldi	r24, 0x80	; 128
 2a0:	88 b9       	out	0x08, r24	; 8
SFIOR=0x00;
 2a2:	10 bc       	out	0x20, r1	; 32

// ADC initialization
// ADC disabled
ADCSRA=0x00;
 2a4:	16 b8       	out	0x06, r1	; 6

// SPI initialization
// SPI disabled
SPCR=0x00;
 2a6:	1d b8       	out	0x0d, r1	; 13

// TWI initialization
// TWI disabled
TWCR=0x00;
 2a8:	10 92 74 00 	sts	0x0074, r1
 2ac:	08 95       	ret

000002ae <main>:
{
	//---------------------------------------------------------------------------------------
	// Declare your local variables here
	unsigned char cnt = 0;
	//---------------------------------------------------------------------------------------
	init_mcu();
 2ae:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <init_mcu>
	//---------------------------------------------------------------------------------------
	rs485_0_init();
 2b2:	0e 94 20 03 	call	0x640	; 0x640 <rs485_0_init>
	uart_1_init();
 2b6:	0e 94 a8 00 	call	0x150	; 0x150 <uart_1_init>
	i2c_lcd_init();
 2ba:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <i2c_lcd_init>
	BUT_Init();
 2be:	0e 94 29 03 	call	0x652	; 0x652 <BUT_Init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2c2:	8f e3       	ldi	r24, 0x3F	; 63
 2c4:	9c e9       	ldi	r25, 0x9C	; 156
 2c6:	01 97       	sbiw	r24, 0x01	; 1
 2c8:	f1 f7       	brne	.-4      	; 0x2c6 <main+0x18>
 2ca:	00 c0       	rjmp	.+0      	; 0x2cc <main+0x1e>
 2cc:	00 00       	nop
	_delay_ms(10);
	//---------------------------------------------------------------------------------------
	asm("sei");
 2ce:	78 94       	sei

int main(void)
{
	//---------------------------------------------------------------------------------------
	// Declare your local variables here
	unsigned char cnt = 0;
 2d0:	f1 2c       	mov	r15, r1
		SET_OUT_4
		CLR_OUT_4
		
		SET_OUT_5
		CLR_OUT_5
		SET_OUT_6
 2d2:	c5 e6       	ldi	r28, 0x65	; 101
 2d4:	d0 e0       	ldi	r29, 0x00	; 0
		SET_OUT_7
		CLR_OUT_7
		SET_OUT_8
		CLR_OUT_8
		
		SET_OUT_9
 2d6:	02 e6       	ldi	r16, 0x62	; 98
 2d8:	10 e0       	ldi	r17, 0x00	; 0
	asm("sei");
	//---------------------------------------------------------------------------------------
    while(1)
    {
        //TODO:: Please write your application code
		SET_OUT_1
 2da:	c3 9a       	sbi	0x18, 3	; 24
		CLR_OUT_1
 2dc:	c3 98       	cbi	0x18, 3	; 24
		SET_OUT_2
 2de:	c4 9a       	sbi	0x18, 4	; 24
		CLR_OUT_2
 2e0:	c4 98       	cbi	0x18, 4	; 24
		SET_OUT_3
 2e2:	c5 9a       	sbi	0x18, 5	; 24
		CLR_OUT_3
 2e4:	c5 98       	cbi	0x18, 5	; 24
		SET_OUT_4
 2e6:	c6 9a       	sbi	0x18, 6	; 24
		CLR_OUT_4
 2e8:	c6 98       	cbi	0x18, 6	; 24
		
		SET_OUT_5
 2ea:	c7 9a       	sbi	0x18, 7	; 24
		CLR_OUT_5
 2ec:	c7 98       	cbi	0x18, 7	; 24
		SET_OUT_6
 2ee:	88 81       	ld	r24, Y
 2f0:	88 60       	ori	r24, 0x08	; 8
 2f2:	88 83       	st	Y, r24
		CLR_OUT_6
 2f4:	88 81       	ld	r24, Y
 2f6:	87 7f       	andi	r24, 0xF7	; 247
 2f8:	88 83       	st	Y, r24
		SET_OUT_7
 2fa:	88 81       	ld	r24, Y
 2fc:	80 61       	ori	r24, 0x10	; 16
 2fe:	88 83       	st	Y, r24
		CLR_OUT_7
 300:	88 81       	ld	r24, Y
 302:	8f 7e       	andi	r24, 0xEF	; 239
 304:	88 83       	st	Y, r24
		SET_OUT_8
 306:	af 9a       	sbi	0x15, 7	; 21
		CLR_OUT_8
 308:	af 98       	cbi	0x15, 7	; 21
		
		SET_OUT_9
 30a:	f8 01       	movw	r30, r16
 30c:	80 81       	ld	r24, Z
 30e:	80 61       	ori	r24, 0x10	; 16
 310:	80 83       	st	Z, r24
		CLR_OUT_9
 312:	80 81       	ld	r24, Z
 314:	8f 7e       	andi	r24, 0xEF	; 239
 316:	80 83       	st	Z, r24
		SET_OUT_10
 318:	95 9a       	sbi	0x12, 5	; 18
		CLR_OUT_10
 31a:	95 98       	cbi	0x12, 5	; 18
		SET_OUT_11
 31c:	d8 9a       	sbi	0x1b, 0	; 27
		CLR_OUT_11
 31e:	d8 98       	cbi	0x1b, 0	; 27
		SET_OUT_12
 320:	97 9a       	sbi	0x12, 7	; 18
		CLR_OUT_12
 322:	97 98       	cbi	0x12, 7	; 18
		
		
// 		Main_menu_i2c (cnt);
 		rs485_0_write (cnt);
 324:	8f 2d       	mov	r24, r15
 326:	0e 94 0e 03 	call	0x61c	; 0x61c <rs485_0_write>
 32a:	ff ef       	ldi	r31, 0xFF	; 255
 32c:	21 ee       	ldi	r18, 0xE1	; 225
 32e:	84 e0       	ldi	r24, 0x04	; 4
 330:	f1 50       	subi	r31, 0x01	; 1
 332:	20 40       	sbci	r18, 0x00	; 0
 334:	80 40       	sbci	r24, 0x00	; 0
 336:	e1 f7       	brne	.-8      	; 0x330 <main+0x82>
 338:	00 c0       	rjmp	.+0      	; 0x33a <main+0x8c>
 33a:	00 00       	nop
// 		uart_1_write (cnt);
 		_delay_ms(100);
 		cnt++;
 33c:	f3 94       	inc	r15
 33e:	cd cf       	rjmp	.-102    	; 0x2da <main+0x2c>

00000340 <i2c_init>:
*   Parameters :    нет
*   Purpose :       Инициализация i2c
****************************************************************************/
void i2c_init(void)
{
	(PORT_I2C&=~(1<<SDA));
 340:	90 98       	cbi	0x12, 0	; 18
	(PORT_I2C&=~(1<<SCL));
 342:	91 98       	cbi	0x12, 1	; 18
	(DDR_I2C&=~(1<<SDA));
 344:	88 98       	cbi	0x11, 0	; 17
	(DDR_I2C&=~(1<<SCL));
 346:	89 98       	cbi	0x11, 1	; 17
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 348:	85 e0       	ldi	r24, 0x05	; 5
 34a:	8a 95       	dec	r24
 34c:	f1 f7       	brne	.-4      	; 0x34a <i2c_init+0xa>
 34e:	00 00       	nop
 350:	08 95       	ret

00000352 <i2c_start>:
*   Parameters :    нет
*   Purpose :       Старт i2c
****************************************************************************/
void i2c_start(void)         
{ 
	(DDR_I2C|=(1<<SDA)); _delay_us(pause);
 352:	88 9a       	sbi	0x11, 0	; 17
 354:	85 e0       	ldi	r24, 0x05	; 5
 356:	8a 95       	dec	r24
 358:	f1 f7       	brne	.-4      	; 0x356 <i2c_start+0x4>
 35a:	00 00       	nop
	(DDR_I2C|=(1<<SCL)); _delay_us(pause); 
 35c:	89 9a       	sbi	0x11, 1	; 17
 35e:	85 e0       	ldi	r24, 0x05	; 5
 360:	8a 95       	dec	r24
 362:	f1 f7       	brne	.-4      	; 0x360 <i2c_start+0xe>
 364:	00 00       	nop
 366:	08 95       	ret

00000368 <i2c_write>:
*   Returns :       нет
*   Parameters :    Данныэ на отправку
*   Purpose :       Передача 1го байта по i2c
****************************************************************************/
void i2c_write(unsigned char byt)  
{ 
 368:	27 e0       	ldi	r18, 0x07	; 7
 36a:	30 e0       	ldi	r19, 0x00	; 0
    unsigned char k;                       
    for (k = 0; k < 8; k++)    
    { 
		(DDR_I2C|=(1<<SCL));
        if(0x01 & (byt >> (7 - k)))
 36c:	90 e0       	ldi	r25, 0x00	; 0
void i2c_write(unsigned char byt)  
{ 
    unsigned char k;                       
    for (k = 0; k < 8; k++)    
    { 
		(DDR_I2C|=(1<<SCL));
 36e:	89 9a       	sbi	0x11, 1	; 17
        if(0x01 & (byt >> (7 - k)))
 370:	ac 01       	movw	r20, r24
 372:	02 2e       	mov	r0, r18
 374:	02 c0       	rjmp	.+4      	; 0x37a <i2c_write+0x12>
 376:	55 95       	asr	r21
 378:	47 95       	ror	r20
 37a:	0a 94       	dec	r0
 37c:	e2 f7       	brpl	.-8      	; 0x376 <i2c_write+0xe>
 37e:	40 ff       	sbrs	r20, 0
 380:	02 c0       	rjmp	.+4      	; 0x386 <i2c_write+0x1e>
		{
			(DDR_I2C&=~(1<<SDA));
 382:	88 98       	cbi	0x11, 0	; 17
 384:	01 c0       	rjmp	.+2      	; 0x388 <i2c_write+0x20>
		}else
		{
			(DDR_I2C|=(1<<SDA));
 386:	88 9a       	sbi	0x11, 0	; 17
 388:	45 e0       	ldi	r20, 0x05	; 5
 38a:	4a 95       	dec	r20
 38c:	f1 f7       	brne	.-4      	; 0x38a <i2c_write+0x22>
 38e:	00 00       	nop
		};
	    _delay_us(pause);   
        (DDR_I2C&=~(1<<SCL));
 390:	89 98       	cbi	0x11, 1	; 17
 392:	45 e0       	ldi	r20, 0x05	; 5
 394:	4a 95       	dec	r20
 396:	f1 f7       	brne	.-4      	; 0x394 <i2c_write+0x2c>
 398:	00 00       	nop
 39a:	21 50       	subi	r18, 0x01	; 1
 39c:	31 09       	sbc	r19, r1
 39e:	38 f7       	brcc	.-50     	; 0x36e <i2c_write+0x6>
		_delay_us(pause);             
    };
	(DDR_I2C&=~(1<<SDA));
 3a0:	88 98       	cbi	0x11, 0	; 17
	(DDR_I2C|=(1<<SCL));
 3a2:	89 9a       	sbi	0x11, 1	; 17
 3a4:	85 e0       	ldi	r24, 0x05	; 5
 3a6:	8a 95       	dec	r24
 3a8:	f1 f7       	brne	.-4      	; 0x3a6 <i2c_write+0x3e>
 3aa:	00 00       	nop
	_delay_us(pause);
	(DDR_I2C&=~(1<<SCL));
 3ac:	89 98       	cbi	0x11, 1	; 17
 3ae:	45 e0       	ldi	r20, 0x05	; 5
 3b0:	4a 95       	dec	r20
 3b2:	f1 f7       	brne	.-4      	; 0x3b0 <i2c_write+0x48>
 3b4:	00 00       	nop
	_delay_us(pause);
	(DDR_I2C|=(1<<SCL));
 3b6:	89 9a       	sbi	0x11, 1	; 17
 3b8:	08 95       	ret

000003ba <i2c_stop>:
*   Parameters :    нет
*   Purpose :       Стоп i2c
****************************************************************************/
void i2c_stop(void)            
{ 
    (DDR_I2C|=(1<<SDA)); _delay_us(pause);   
 3ba:	88 9a       	sbi	0x11, 0	; 17
 3bc:	85 e0       	ldi	r24, 0x05	; 5
 3be:	8a 95       	dec	r24
 3c0:	f1 f7       	brne	.-4      	; 0x3be <i2c_stop+0x4>
 3c2:	00 00       	nop
    (DDR_I2C&=~(1<<SCL)); _delay_us(pause);           
 3c4:	89 98       	cbi	0x11, 1	; 17
 3c6:	85 e0       	ldi	r24, 0x05	; 5
 3c8:	8a 95       	dec	r24
 3ca:	f1 f7       	brne	.-4      	; 0x3c8 <i2c_stop+0xe>
 3cc:	00 00       	nop
    (DDR_I2C&=~(1<<SDA)); _delay_us(pause);                                 
 3ce:	88 98       	cbi	0x11, 0	; 17
 3d0:	85 e0       	ldi	r24, 0x05	; 5
 3d2:	8a 95       	dec	r24
 3d4:	f1 f7       	brne	.-4      	; 0x3d2 <i2c_stop+0x18>
 3d6:	00 00       	nop
 3d8:	08 95       	ret

000003da <i2c_acknowledge>:
    return (check);      
};

void i2c_acknowledge(void)
{
	(DDR_I2C&=~(1<<SDA));
 3da:	88 98       	cbi	0x11, 0	; 17
	//delayMicroseconds(1);
	(DDR_I2C|=(1<<SCL));
 3dc:	89 9a       	sbi	0x11, 1	; 17
 3de:	85 e0       	ldi	r24, 0x05	; 5
 3e0:	8a 95       	dec	r24
 3e2:	f1 f7       	brne	.-4      	; 0x3e0 <i2c_acknowledge+0x6>
 3e4:	00 00       	nop
	_delay_us(pause);
	(DDR_I2C&=~(1<<SCL));
 3e6:	89 98       	cbi	0x11, 1	; 17
 3e8:	08 95       	ret

000003ea <PCF8574_Write>:

#include "i2c_lcd.h"

//****************************************************************************************
void PCF8574_Write(unsigned char data)
{
 3ea:	cf 93       	push	r28
 3ec:	c8 2f       	mov	r28, r24
	i2c_start();              //         |-[S]-|  ;Start Condition
 3ee:	0e 94 a9 01 	call	0x352	; 0x352 <i2c_start>
	i2c_write(PCF8574_ADDR | I2C_WRITE);    //         |---Slave address (PCF8574)--[A2=0,A1=0,A0=0]---|   +    |-R/W-|
 3f2:	8e e4       	ldi	r24, 0x4E	; 78
 3f4:	0e 94 b4 01 	call	0x368	; 0x368 <i2c_write>
	i2c_acknowledge();        //         |-[A]-|  ;Active LOW
 3f8:	0e 94 ed 01 	call	0x3da	; 0x3da <i2c_acknowledge>
	i2c_write(data);          //         |-------------------data to port-----------------------|
 3fc:	8c 2f       	mov	r24, r28
 3fe:	0e 94 b4 01 	call	0x368	; 0x368 <i2c_write>
	i2c_acknowledge();        //         |-[A]-|  ;Active LOW
 402:	0e 94 ed 01 	call	0x3da	; 0x3da <i2c_acknowledge>
	i2c_stop();               //         |-[P]-|  ;Stop Condition
 406:	0e 94 dd 01 	call	0x3ba	; 0x3ba <i2c_stop>
};
 40a:	cf 91       	pop	r28
 40c:	08 95       	ret

0000040e <send_i2c_lcd_byte>:
//***************************************************************************************
//Procedure sending LCD byte
//Input: Byte, Kommand/Symbol data
//***************************************************************************************
void send_i2c_lcd_byte(unsigned char lcd_data, unsigned char rs_status ) //bool lcd_command,
{
 40e:	df 92       	push	r13
 410:	ef 92       	push	r14
 412:	ff 92       	push	r15
 414:	0f 93       	push	r16
 416:	1f 93       	push	r17
 418:	cf 93       	push	r28
 41a:	df 93       	push	r29
	//lcd_data=0x08;
	//---------------------------------------------------------------------------------------
	rs_status=rs_status*2;
 41c:	d6 2e       	mov	r13, r22
 41e:	dd 0c       	add	r13, r13
	PCF8574_Write(rs_status|E_L|((lcd_data<<1)&0xE0)|((lcd_data>>3)&0x10));
 420:	e8 2e       	mov	r14, r24
 422:	f1 2c       	mov	r15, r1
 424:	e7 01       	movw	r28, r14
 426:	cc 0f       	add	r28, r28
 428:	dd 1f       	adc	r29, r29
 42a:	18 2f       	mov	r17, r24
 42c:	16 95       	lsr	r17
 42e:	16 95       	lsr	r17
 430:	16 95       	lsr	r17
 432:	d1 2f       	mov	r29, r17
 434:	d0 71       	andi	r29, 0x10	; 16
 436:	dd 29       	or	r29, r13
 438:	8c 2f       	mov	r24, r28
 43a:	80 7e       	andi	r24, 0xE0	; 224
 43c:	d8 2b       	or	r29, r24
 43e:	8d 2f       	mov	r24, r29
 440:	0e 94 f5 01 	call	0x3ea	; 0x3ea <PCF8574_Write>
 444:	85 e3       	ldi	r24, 0x35	; 53
 446:	8a 95       	dec	r24
 448:	f1 f7       	brne	.-4      	; 0x446 <send_i2c_lcd_byte+0x38>
 44a:	00 00       	nop
	_delay_us(10);
	PCF8574_Write(rs_status|E_H|((lcd_data<<1)&0xE0)|((lcd_data>>3)&0x10));
 44c:	81 2f       	mov	r24, r17
 44e:	80 71       	andi	r24, 0x10	; 16
 450:	8d 29       	or	r24, r13
 452:	88 60       	ori	r24, 0x08	; 8
 454:	9c 2f       	mov	r25, r28
 456:	90 7e       	andi	r25, 0xE0	; 224
 458:	89 2b       	or	r24, r25
 45a:	0e 94 f5 01 	call	0x3ea	; 0x3ea <PCF8574_Write>
 45e:	95 e3       	ldi	r25, 0x35	; 53
 460:	9a 95       	dec	r25
 462:	f1 f7       	brne	.-4      	; 0x460 <send_i2c_lcd_byte+0x52>
 464:	00 00       	nop
	_delay_us(10);
	PCF8574_Write(rs_status|E_L|((lcd_data<<1)&0xE0)|((lcd_data>>3)&0x10));
 466:	8d 2f       	mov	r24, r29
 468:	0e 94 f5 01 	call	0x3ea	; 0x3ea <PCF8574_Write>
 46c:	85 e3       	ldi	r24, 0x35	; 53
 46e:	8a 95       	dec	r24
 470:	f1 f7       	brne	.-4      	; 0x46e <send_i2c_lcd_byte+0x60>
 472:	00 00       	nop
	_delay_us(10);
	PCF8574_Write(rs_status|E_L|((lcd_data<<5)&0xE0)|((lcd_data<<1)&0x10));
 474:	87 01       	movw	r16, r14
 476:	00 0f       	add	r16, r16
 478:	11 1f       	adc	r17, r17
 47a:	02 95       	swap	r16
 47c:	12 95       	swap	r17
 47e:	10 7f       	andi	r17, 0xF0	; 240
 480:	10 27       	eor	r17, r16
 482:	00 7f       	andi	r16, 0xF0	; 240
 484:	10 27       	eor	r17, r16
 486:	dd 2d       	mov	r29, r13
 488:	d0 2b       	or	r29, r16
 48a:	8c 2f       	mov	r24, r28
 48c:	80 71       	andi	r24, 0x10	; 16
 48e:	d8 2b       	or	r29, r24
 490:	8d 2f       	mov	r24, r29
 492:	0e 94 f5 01 	call	0x3ea	; 0x3ea <PCF8574_Write>
 496:	95 e3       	ldi	r25, 0x35	; 53
 498:	9a 95       	dec	r25
 49a:	f1 f7       	brne	.-4      	; 0x498 <send_i2c_lcd_byte+0x8a>
 49c:	00 00       	nop
	_delay_us(10);
	PCF8574_Write(rs_status|E_H|((lcd_data<<5)&0xE0)|((lcd_data<<1)&0x10));
 49e:	8d 2d       	mov	r24, r13
 4a0:	88 60       	ori	r24, 0x08	; 8
 4a2:	08 2b       	or	r16, r24
 4a4:	8c 2f       	mov	r24, r28
 4a6:	80 71       	andi	r24, 0x10	; 16
 4a8:	80 2b       	or	r24, r16
 4aa:	0e 94 f5 01 	call	0x3ea	; 0x3ea <PCF8574_Write>
 4ae:	85 e3       	ldi	r24, 0x35	; 53
 4b0:	8a 95       	dec	r24
 4b2:	f1 f7       	brne	.-4      	; 0x4b0 <send_i2c_lcd_byte+0xa2>
 4b4:	00 00       	nop
	_delay_us(10);
	PCF8574_Write(rs_status|E_L|((lcd_data<<5)&0xE0)|((lcd_data<<1)&0x10));
 4b6:	8d 2f       	mov	r24, r29
 4b8:	0e 94 f5 01 	call	0x3ea	; 0x3ea <PCF8574_Write>
 4bc:	87 ec       	ldi	r24, 0xC7	; 199
 4be:	90 e0       	ldi	r25, 0x00	; 0
 4c0:	01 97       	sbiw	r24, 0x01	; 1
 4c2:	f1 f7       	brne	.-4      	; 0x4c0 <send_i2c_lcd_byte+0xb2>
 4c4:	00 c0       	rjmp	.+0      	; 0x4c6 <send_i2c_lcd_byte+0xb8>
 4c6:	00 00       	nop

	
	
	
	
};
 4c8:	df 91       	pop	r29
 4ca:	cf 91       	pop	r28
 4cc:	1f 91       	pop	r17
 4ce:	0f 91       	pop	r16
 4d0:	ff 90       	pop	r15
 4d2:	ef 90       	pop	r14
 4d4:	df 90       	pop	r13
 4d6:	08 95       	ret

000004d8 <i2c_lcd_init>:
void i2c_lcd_init(void)
{
	//---------------------------------------------------------------------------------------
	//init i2c
	//---------------------------------------------------------------------------------------
	i2c_init();
 4d8:	0e 94 a0 01 	call	0x340	; 0x340 <i2c_init>
	//---------------------------------------------------------------------------------------
	PCF8574_Write(0x00);//E = 0 RS= 0 R/W = 0
 4dc:	80 e0       	ldi	r24, 0x00	; 0
 4de:	0e 94 f5 01 	call	0x3ea	; 0x3ea <PCF8574_Write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4e2:	8f e9       	ldi	r24, 0x9F	; 159
 4e4:	9f e0       	ldi	r25, 0x0F	; 15
 4e6:	01 97       	sbiw	r24, 0x01	; 1
 4e8:	f1 f7       	brne	.-4      	; 0x4e6 <i2c_lcd_init+0xe>
 4ea:	00 c0       	rjmp	.+0      	; 0x4ec <i2c_lcd_init+0x14>
 4ec:	00 00       	nop
	_delay_ms(1);
	//---------------------------------------------------------------------------------------
	//Function Set 3 ????? ?????? D4-D7 ????????????? bus
	PCF8574_Write(0x60);      //1    0x20 + 0x03
 4ee:	80 e6       	ldi	r24, 0x60	; 96
 4f0:	0e 94 f5 01 	call	0x3ea	; 0x3ea <PCF8574_Write>
 4f4:	8f e9       	ldi	r24, 0x9F	; 159
 4f6:	9f e0       	ldi	r25, 0x0F	; 15
 4f8:	01 97       	sbiw	r24, 0x01	; 1
 4fa:	f1 f7       	brne	.-4      	; 0x4f8 <i2c_lcd_init+0x20>
 4fc:	00 c0       	rjmp	.+0      	; 0x4fe <i2c_lcd_init+0x26>
 4fe:	00 00       	nop
	_delay_ms(1);
	PCF8574_Write(0x40);
 500:	80 e4       	ldi	r24, 0x40	; 64
 502:	0e 94 f5 01 	call	0x3ea	; 0x3ea <PCF8574_Write>
 506:	8f e9       	ldi	r24, 0x9F	; 159
 508:	9f e0       	ldi	r25, 0x0F	; 15
 50a:	01 97       	sbiw	r24, 0x01	; 1
 50c:	f1 f7       	brne	.-4      	; 0x50a <i2c_lcd_init+0x32>
 50e:	00 c0       	rjmp	.+0      	; 0x510 <i2c_lcd_init+0x38>
 510:	00 00       	nop
	_delay_ms(1);
	PCF8574_Write(E_H|0x40);     //2
 512:	88 e4       	ldi	r24, 0x48	; 72
 514:	0e 94 f5 01 	call	0x3ea	; 0x3ea <PCF8574_Write>
 518:	8f e9       	ldi	r24, 0x9F	; 159
 51a:	9f e0       	ldi	r25, 0x0F	; 15
 51c:	01 97       	sbiw	r24, 0x01	; 1
 51e:	f1 f7       	brne	.-4      	; 0x51c <i2c_lcd_init+0x44>
 520:	00 c0       	rjmp	.+0      	; 0x522 <i2c_lcd_init+0x4a>
 522:	00 00       	nop
	_delay_ms(1);
	PCF8574_Write(E_L|0x40);
 524:	80 e4       	ldi	r24, 0x40	; 64
 526:	0e 94 f5 01 	call	0x3ea	; 0x3ea <PCF8574_Write>
 52a:	8f e9       	ldi	r24, 0x9F	; 159
 52c:	9f e0       	ldi	r25, 0x0F	; 15
 52e:	01 97       	sbiw	r24, 0x01	; 1
 530:	f1 f7       	brne	.-4      	; 0x52e <i2c_lcd_init+0x56>
 532:	00 c0       	rjmp	.+0      	; 0x534 <i2c_lcd_init+0x5c>
 534:	00 00       	nop
	_delay_ms(1);
	//---------------------------------------------------------------------------------------
	send_i2c_lcd_byte(0x28,lcd_kom);			//2 lines, 5*8 pixels, 8bit data
 536:	60 e0       	ldi	r22, 0x00	; 0
 538:	88 e2       	ldi	r24, 0x28	; 40
 53a:	0e 94 07 02 	call	0x40e	; 0x40e <send_i2c_lcd_byte>
	send_i2c_lcd_byte(0x0C,lcd_kom);			//screen enable,
 53e:	60 e0       	ldi	r22, 0x00	; 0
 540:	8c e0       	ldi	r24, 0x0C	; 12
 542:	0e 94 07 02 	call	0x40e	; 0x40e <send_i2c_lcd_byte>
	send_i2c_lcd_byte(0x06,lcd_kom);			//auto shift left enable
 546:	60 e0       	ldi	r22, 0x00	; 0
 548:	86 e0       	ldi	r24, 0x06	; 6
 54a:	0e 94 07 02 	call	0x40e	; 0x40e <send_i2c_lcd_byte>
	send_i2c_lcd_byte(0x01,lcd_kom);			//0x01 clear screen
 54e:	60 e0       	ldi	r22, 0x00	; 0
 550:	81 e0       	ldi	r24, 0x01	; 1
 552:	0e 94 07 02 	call	0x40e	; 0x40e <send_i2c_lcd_byte>
 556:	9f ef       	ldi	r25, 0xFF	; 255
 558:	29 ef       	ldi	r18, 0xF9	; 249
 55a:	80 e0       	ldi	r24, 0x00	; 0
 55c:	91 50       	subi	r25, 0x01	; 1
 55e:	20 40       	sbci	r18, 0x00	; 0
 560:	80 40       	sbci	r24, 0x00	; 0
 562:	e1 f7       	brne	.-8      	; 0x55c <i2c_lcd_init+0x84>
 564:	00 c0       	rjmp	.+0      	; 0x566 <i2c_lcd_init+0x8e>
 566:	00 00       	nop
 568:	08 95       	ret

0000056a <__vector_18>:

#include "rs485_0.h"

//****************************************************************************************
ISR(USART0_RX_vect)
{
 56a:	1f 92       	push	r1
 56c:	0f 92       	push	r0
 56e:	0f b6       	in	r0, 0x3f	; 63
 570:	0f 92       	push	r0
 572:	11 24       	eor	r1, r1
 574:	2f 93       	push	r18
 576:	8f 93       	push	r24
 578:	9f 93       	push	r25
 57a:	ef 93       	push	r30
 57c:	ff 93       	push	r31
	uint8_t byte;
	uint8_t wr = (uart_0_rxwr+1) & UART_BUFEND_0_;
 57e:	e0 91 38 01 	lds	r30, 0x0138
 582:	81 e0       	ldi	r24, 0x01	; 1
 584:	8e 0f       	add	r24, r30
 586:	8f 70       	andi	r24, 0x0F	; 15
	byte = UDR0;
 588:	2c b1       	in	r18, 0x0c	; 12
	if(wr != uart_0_rxrd)
 58a:	90 91 39 01 	lds	r25, 0x0139
 58e:	89 17       	cp	r24, r25
 590:	31 f0       	breq	.+12     	; 0x59e <__vector_18+0x34>
	{
		uart_0_rx[uart_0_rxwr] = byte;
 592:	f0 e0       	ldi	r31, 0x00	; 0
 594:	e9 5d       	subi	r30, 0xD9	; 217
 596:	fe 4f       	sbci	r31, 0xFE	; 254
 598:	20 83       	st	Z, r18
		uart_0_rxwr = wr;
 59a:	80 93 38 01 	sts	0x0138, r24
	};
};
 59e:	ff 91       	pop	r31
 5a0:	ef 91       	pop	r30
 5a2:	9f 91       	pop	r25
 5a4:	8f 91       	pop	r24
 5a6:	2f 91       	pop	r18
 5a8:	0f 90       	pop	r0
 5aa:	0f be       	out	0x3f, r0	; 63
 5ac:	0f 90       	pop	r0
 5ae:	1f 90       	pop	r1
 5b0:	18 95       	reti

000005b2 <__vector_19>:
//****************************************************************************************
ISR(USART0_UDRE_vect)
{
 5b2:	1f 92       	push	r1
 5b4:	0f 92       	push	r0
 5b6:	0f b6       	in	r0, 0x3f	; 63
 5b8:	0f 92       	push	r0
 5ba:	11 24       	eor	r1, r1
 5bc:	8f 93       	push	r24
 5be:	9f 93       	push	r25
 5c0:	ef 93       	push	r30
 5c2:	ff 93       	push	r31
	uint8_t rd = uart_0_txrd;
 5c4:	80 91 37 01 	lds	r24, 0x0137
	if(rd != uart_0_txwr)
 5c8:	90 91 26 01 	lds	r25, 0x0126
 5cc:	89 17       	cp	r24, r25
 5ce:	59 f0       	breq	.+22     	; 0x5e6 <__vector_19+0x34>
	{
		UDR0 = uart_0_tx[rd];
 5d0:	e8 2f       	mov	r30, r24
 5d2:	f0 e0       	ldi	r31, 0x00	; 0
 5d4:	e6 5c       	subi	r30, 0xC6	; 198
 5d6:	fe 4f       	sbci	r31, 0xFE	; 254
 5d8:	90 81       	ld	r25, Z
 5da:	9c b9       	out	0x0c, r25	; 12
		uart_0_txrd = (rd+1) & UART_BUFEND_0_;
 5dc:	8f 5f       	subi	r24, 0xFF	; 255
 5de:	8f 70       	andi	r24, 0x0F	; 15
 5e0:	80 93 37 01 	sts	0x0137, r24
		return;
 5e4:	08 c0       	rjmp	.+16     	; 0x5f6 <__vector_19+0x44>
	}else
	{

	};
	UCSR0B &= ~(1<<UDRIE0);
 5e6:	55 98       	cbi	0x0a, 5	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 5e8:	87 ee       	ldi	r24, 0xE7	; 231
 5ea:	93 e0       	ldi	r25, 0x03	; 3
 5ec:	01 97       	sbiw	r24, 0x01	; 1
 5ee:	f1 f7       	brne	.-4      	; 0x5ec <__vector_19+0x3a>
 5f0:	00 c0       	rjmp	.+0      	; 0x5f2 <__vector_19+0x40>
 5f2:	00 00       	nop
	_delay_us(250);
	TXD_DISABLE
 5f4:	1a 98       	cbi	0x03, 2	; 3
};
 5f6:	ff 91       	pop	r31
 5f8:	ef 91       	pop	r30
 5fa:	9f 91       	pop	r25
 5fc:	8f 91       	pop	r24
 5fe:	0f 90       	pop	r0
 600:	0f be       	out	0x3f, r0	; 63
 602:	0f 90       	pop	r0
 604:	1f 90       	pop	r1
 606:	18 95       	reti

00000608 <__vector_20>:
//****************************************************************************************
ISR(USART0_TX_vect)
{
 608:	1f 92       	push	r1
 60a:	0f 92       	push	r0
 60c:	0f b6       	in	r0, 0x3f	; 63
 60e:	0f 92       	push	r0
 610:	11 24       	eor	r1, r1
	//TXD_DISABLE
};
 612:	0f 90       	pop	r0
 614:	0f be       	out	0x3f, r0	; 63
 616:	0f 90       	pop	r0
 618:	1f 90       	pop	r1
 61a:	18 95       	reti

0000061c <rs485_0_write>:
	return 0;
};
//****************************************************************************************
void rs485_0_write(uint8_t byte)
{
	uint8_t wr = (uart_0_txwr+1) & UART_BUFEND_0_;
 61c:	e0 91 26 01 	lds	r30, 0x0126
 620:	91 e0       	ldi	r25, 0x01	; 1
 622:	9e 0f       	add	r25, r30
 624:	9f 70       	andi	r25, 0x0F	; 15
	if(wr != uart_0_txrd)
 626:	20 91 37 01 	lds	r18, 0x0137
 62a:	92 17       	cp	r25, r18
 62c:	41 f0       	breq	.+16     	; 0x63e <rs485_0_write+0x22>
	{
		uart_0_tx[uart_0_txwr] = byte;
 62e:	f0 e0       	ldi	r31, 0x00	; 0
 630:	e6 5c       	subi	r30, 0xC6	; 198
 632:	fe 4f       	sbci	r31, 0xFE	; 254
 634:	80 83       	st	Z, r24
		uart_0_txwr = wr;
 636:	90 93 26 01 	sts	0x0126, r25
		TXD_ENABLE
 63a:	1a 9a       	sbi	0x03, 2	; 3
		UCSR0B |= (1<<UDRIE0);
 63c:	55 9a       	sbi	0x0a, 5	; 10
 63e:	08 95       	ret

00000640 <rs485_0_init>:
	};
};
//****************************************************************************************
void rs485_0_init()
{
	(PORT_TXDE&=~(1<<TXDE));
 640:	1a 98       	cbi	0x03, 2	; 3
	(DDR_TXDE|=(1<<TXDE));
 642:	12 9a       	sbi	0x02, 2	; 2
	//UBRR0L = (F_CPU+UART_RATE/8)/(UART_RATE/16)-1;
	//UBRR0H = ((F_CPU+UART_RATE/8)/(UART_RATE/16)-1)>>8;
	UBRR0L = F_CPU/UART_BAUD_RATE_0_/16-1;
 644:	89 e1       	ldi	r24, 0x19	; 25
 646:	89 b9       	out	0x09, r24	; 9
	UBRR0H = (F_CPU/UART_BAUD_RATE_0_/16-1)>>8;
 648:	10 92 90 00 	sts	0x0090, r1
	UCSR0B = (1<<RXCIE0)|(1<<RXEN0)|(1<<TXEN0);
 64c:	88 e9       	ldi	r24, 0x98	; 152
 64e:	8a b9       	out	0x0a, r24	; 10
 650:	08 95       	ret

00000652 <BUT_Init>:
*   Purpose :       РёРЅРёС†РёР°Р»РёР·Р°С†РёСЏ РїРѕСЂС‚РѕРІ РІРІРѕРґР°/РІС‹РІРѕРґР°
*                   РІС‹Р·С‹РІР°РµС‚СЃСЏ РѕР±С‹С‡РЅРѕ РІ РЅР°С‡Р°Р»Рµ main`a
****************************************************************************/
void BUT_Init(void)
{
	DDRX_BUTTON &= ~(MASK_BUTTONS);
 652:	84 b3       	in	r24, 0x14	; 20
 654:	80 7c       	andi	r24, 0xC0	; 192
 656:	84 bb       	out	0x14, r24	; 20
	PORT_BUTTON |= MASK_BUTTONS;
 658:	85 b3       	in	r24, 0x15	; 21
 65a:	8f 63       	ori	r24, 0x3F	; 63
 65c:	85 bb       	out	0x15, r24	; 21
 65e:	08 95       	ret

00000660 <BUT_Debrief>:
void BUT_Debrief(void)
{
	//---------------------------------------------------------------------------------------
	unsigned char key;
	//---------------------------------------------------------------------------------------
	if((((PIN_BUTTON)>>(OK))&1)==0)
 660:	98 9b       	sbis	0x13, 0	; 19
 662:	1a c0       	rjmp	.+52     	; 0x698 <BUT_Debrief+0x38>
	{
		key = KEY_OK;
	}else if ((((PIN_BUTTON)>>(UP))&1)==0)
 664:	99 9b       	sbis	0x13, 1	; 19
 666:	1a c0       	rjmp	.+52     	; 0x69c <BUT_Debrief+0x3c>
	{
		key = KEY_DOWN;
	}else if ((((PIN_BUTTON)>>(DOWN))&1)==0)
 668:	9a 9b       	sbis	0x13, 2	; 19
 66a:	1a c0       	rjmp	.+52     	; 0x6a0 <BUT_Debrief+0x40>
	{
		key = KEY_UP;
	}else if ((((PIN_BUTTON)>>(RIGHT))&1)==0)
 66c:	9b 9b       	sbis	0x13, 3	; 19
 66e:	1a c0       	rjmp	.+52     	; 0x6a4 <BUT_Debrief+0x44>
	{
		key = KEY_RIGHT;
	}
	else if ((((PIN_BUTTON)>>(LEFT))&1)==0)
 670:	9c 9b       	sbis	0x13, 4	; 19
 672:	1a c0       	rjmp	.+52     	; 0x6a8 <BUT_Debrief+0x48>
	{
		key = KEY_LEFT;
	}
	else if ((((PIN_BUTTON)>>(KEY_ESC))&1)==0)
 674:	9e 9b       	sbis	0x13, 6	; 19
 676:	1a c0       	rjmp	.+52     	; 0x6ac <BUT_Debrief+0x4c>
 678:	0c c0       	rjmp	.+24     	; 0x692 <BUT_Debrief+0x32>
	{
		//Рё РµСЃР»Рё РєРЅРѕРїРєР° СѓРґРµСЂР¶РёРІР°РµС‚СЃСЏ РґРѕР»РіРѕ
		//Р·Р°РїРёСЃР°С‚СЊ РµРµ РЅРѕРјРµСЂ РІ Р±СѓС„РµСЂ
		if (comp == THRESHOLD)
		{
			comp = THRESHOLD+10;
 67a:	8f e0       	ldi	r24, 0x0F	; 15
 67c:	80 93 24 01 	sts	0x0124, r24
			pressedKey = key;
 680:	90 93 25 01 	sts	0x0125, r25
			return;
 684:	08 95       	ret
		}
		else if (comp < (THRESHOLD+5))
 686:	8a 30       	cpi	r24, 0x0A	; 10
 688:	b8 f4       	brcc	.+46     	; 0x6b8 <BUT_Debrief+0x58>
		{
			comp++;
 68a:	8f 5f       	subi	r24, 0xFF	; 255
 68c:	80 93 24 01 	sts	0x0124, r24
 690:	08 95       	ret
		};
	}
	else
	{
		comp=0;
 692:	10 92 24 01 	sts	0x0124, r1
 696:	08 95       	ret
	//---------------------------------------------------------------------------------------
	unsigned char key;
	//---------------------------------------------------------------------------------------
	if((((PIN_BUTTON)>>(OK))&1)==0)
	{
		key = KEY_OK;
 698:	91 e0       	ldi	r25, 0x01	; 1
 69a:	09 c0       	rjmp	.+18     	; 0x6ae <BUT_Debrief+0x4e>
	}else if ((((PIN_BUTTON)>>(UP))&1)==0)
	{
		key = KEY_DOWN;
 69c:	93 e0       	ldi	r25, 0x03	; 3
 69e:	07 c0       	rjmp	.+14     	; 0x6ae <BUT_Debrief+0x4e>
	}else if ((((PIN_BUTTON)>>(DOWN))&1)==0)
	{
		key = KEY_UP;
 6a0:	92 e0       	ldi	r25, 0x02	; 2
 6a2:	05 c0       	rjmp	.+10     	; 0x6ae <BUT_Debrief+0x4e>
	}else if ((((PIN_BUTTON)>>(RIGHT))&1)==0)
	{
		key = KEY_RIGHT;
 6a4:	94 e0       	ldi	r25, 0x04	; 4
 6a6:	03 c0       	rjmp	.+6      	; 0x6ae <BUT_Debrief+0x4e>
	}
	else if ((((PIN_BUTTON)>>(LEFT))&1)==0)
	{
		key = KEY_LEFT;
 6a8:	95 e0       	ldi	r25, 0x05	; 5
 6aa:	01 c0       	rjmp	.+2      	; 0x6ae <BUT_Debrief+0x4e>
	}
	else if ((((PIN_BUTTON)>>(KEY_ESC))&1)==0)
	{
		key = KEY_ESC;
 6ac:	96 e0       	ldi	r25, 0x06	; 6
	//РµСЃР»Рё РІРѕ РІСЂРµРјРµРЅРЅРѕР№ РїРµСЂРµРјРµРЅРЅРѕР№ С‡С‚Рѕ-С‚Рѕ РµСЃС‚СЊ
	if (key!=0)
	{
		//Рё РµСЃР»Рё РєРЅРѕРїРєР° СѓРґРµСЂР¶РёРІР°РµС‚СЃСЏ РґРѕР»РіРѕ
		//Р·Р°РїРёСЃР°С‚СЊ РµРµ РЅРѕРјРµСЂ РІ Р±СѓС„РµСЂ
		if (comp == THRESHOLD)
 6ae:	80 91 24 01 	lds	r24, 0x0124
 6b2:	85 30       	cpi	r24, 0x05	; 5
 6b4:	41 f7       	brne	.-48     	; 0x686 <BUT_Debrief+0x26>
 6b6:	e1 cf       	rjmp	.-62     	; 0x67a <BUT_Debrief+0x1a>
 6b8:	08 95       	ret

000006ba <_exit>:
 6ba:	f8 94       	cli

000006bc <__stop_program>:
 6bc:	ff cf       	rjmp	.-2      	; 0x6bc <__stop_program>
