
UControl_Module.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  0000090c  000009a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000090c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000004a  00800100  00800100  000009a0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000009a0  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000288  00000000  00000000  000009d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000022a4  00000000  00000000  00000c58  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000be3  00000000  00000000  00002efc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000fb6  00000000  00000000  00003adf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000064c  00000000  00000000  00004a98  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000661  00000000  00000000  000050e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000013be  00000000  00000000  00005745  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000210  00000000  00000000  00006b03  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__ctors_end>
   4:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
   8:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
   c:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  10:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  14:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  18:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  1c:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  20:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  24:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  28:	0c 94 23 01 	jmp	0x246	; 0x246 <__vector_10>
  2c:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  30:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  34:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  38:	0c 94 13 01 	jmp	0x226	; 0x226 <__vector_14>
  3c:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  40:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__vector_16>
  44:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  48:	0c 94 c7 03 	jmp	0x78e	; 0x78e <__vector_18>
  4c:	0c 94 eb 03 	jmp	0x7d6	; 0x7d6 <__vector_19>
  50:	0c 94 16 04 	jmp	0x82c	; 0x82c <__vector_20>
  54:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  58:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  5c:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  60:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  64:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  68:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  6c:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  70:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  74:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__vector_29>
  78:	0c 94 83 00 	jmp	0x106	; 0x106 <__vector_30>
  7c:	0c 94 a8 00 	jmp	0x150	; 0x150 <__vector_31>
  80:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  84:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  88:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  8c:	4e 03       	fmul	r20, r22
  8e:	3e 03       	fmul	r19, r22
  90:	40 03       	mulsu	r20, r16
  92:	42 03       	mulsu	r20, r18
  94:	44 03       	mulsu	r20, r20
  96:	46 03       	mulsu	r20, r22
  98:	48 03       	fmul	r20, r16
  9a:	4a 03       	fmul	r20, r18
  9c:	4c 03       	fmul	r20, r20

0000009e <_BURN_OK_>:
  9e:	20 20 48 65 6c 6c 6f 20 20 77 6f 72 6c 64 20 20       Hello  world  
	...

000000b0 <__ctors_end>:
  b0:	11 24       	eor	r1, r1
  b2:	1f be       	out	0x3f, r1	; 63
  b4:	cf ef       	ldi	r28, 0xFF	; 255
  b6:	d0 e1       	ldi	r29, 0x10	; 16
  b8:	de bf       	out	0x3e, r29	; 62
  ba:	cd bf       	out	0x3d, r28	; 61

000000bc <__do_clear_bss>:
  bc:	21 e0       	ldi	r18, 0x01	; 1
  be:	a0 e0       	ldi	r26, 0x00	; 0
  c0:	b1 e0       	ldi	r27, 0x01	; 1
  c2:	01 c0       	rjmp	.+2      	; 0xc6 <.do_clear_bss_start>

000000c4 <.do_clear_bss_loop>:
  c4:	1d 92       	st	X+, r1

000000c6 <.do_clear_bss_start>:
  c6:	aa 34       	cpi	r26, 0x4A	; 74
  c8:	b2 07       	cpc	r27, r18
  ca:	e1 f7       	brne	.-8      	; 0xc4 <.do_clear_bss_loop>
  cc:	0e 94 95 01 	call	0x32a	; 0x32a <main>
  d0:	0c 94 84 04 	jmp	0x908	; 0x908 <_exit>

000000d4 <__bad_interrupt>:
  d4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d8 <init_adc>:
void init_adc(void)
{
	// ADC initialization
	// ADC Clock frequency: 500,000 kHz
	// ADC Voltage Reference: AREF pin
	ADMUX=ADC_VREF_TYPE & 0xff;
  d8:	80 e4       	ldi	r24, 0x40	; 64
  da:	87 b9       	out	0x07, r24	; 7
	ADCSRA=0x85;
  dc:	85 e8       	ldi	r24, 0x85	; 133
  de:	86 b9       	out	0x06, r24	; 6
  e0:	08 95       	ret

000000e2 <read_adc>:
*   Purpose :       Оцифровка по указаному каналу АЦП
****************************************************************************/
unsigned int read_adc(unsigned char adc_input)
{
	unsigned int ADC_RESULT;
	ADMUX=adc_input | (ADC_VREF_TYPE & 0xff);
  e2:	80 64       	ori	r24, 0x40	; 64
  e4:	87 b9       	out	0x07, r24	; 7
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e6:	8a e6       	ldi	r24, 0x6A	; 106
  e8:	8a 95       	dec	r24
  ea:	f1 f7       	brne	.-4      	; 0xe8 <read_adc+0x6>
  ec:	00 c0       	rjmp	.+0      	; 0xee <read_adc+0xc>
	// Delay needed for the stabilization of the ADC input voltage
	_delay_us(20);//_delay_us(10);
	// Start the AD conversion
	ADCSRA|=0x40;
  ee:	36 9a       	sbi	0x06, 6	; 6
	// Wait for the AD conversion to complete
	while ((ADCSRA & 0x10)==0);
  f0:	34 9b       	sbis	0x06, 4	; 6
  f2:	fe cf       	rjmp	.-4      	; 0xf0 <read_adc+0xe>
	ADCSRA|=0x10;
  f4:	34 9a       	sbi	0x06, 4	; 6
	ADC_RESULT=ADCL;
  f6:	24 b1       	in	r18, 0x04	; 4
	ADC_RESULT=ADC_RESULT+(ADCH<<8);
  f8:	85 b1       	in	r24, 0x05	; 5
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	98 2f       	mov	r25, r24
  fe:	88 27       	eor	r24, r24
	return ADC_RESULT;
};
 100:	82 0f       	add	r24, r18
 102:	91 1d       	adc	r25, r1
 104:	08 95       	ret

00000106 <__vector_30>:

#include "buart_1.h"

//****************************************************************************************
ISR(USART1_RX_vect)
{
 106:	1f 92       	push	r1
 108:	0f 92       	push	r0
 10a:	0f b6       	in	r0, 0x3f	; 63
 10c:	0f 92       	push	r0
 10e:	11 24       	eor	r1, r1
 110:	2f 93       	push	r18
 112:	8f 93       	push	r24
 114:	9f 93       	push	r25
 116:	ef 93       	push	r30
 118:	ff 93       	push	r31
	uint8_t byte;
	uint8_t wr = (uart_1_rxwr+1) & UART_BUFEND_1_;
 11a:	e0 91 22 01 	lds	r30, 0x0122
 11e:	81 e0       	ldi	r24, 0x01	; 1
 120:	8e 0f       	add	r24, r30
 122:	8f 70       	andi	r24, 0x0F	; 15
	byte = UDR1;
 124:	20 91 9c 00 	lds	r18, 0x009C
	if(wr != uart_1_rxrd)
 128:	90 91 23 01 	lds	r25, 0x0123
 12c:	89 17       	cp	r24, r25
 12e:	31 f0       	breq	.+12     	; 0x13c <__vector_30+0x36>
	{
		uart_1_rx[uart_1_rxwr] = byte;
 130:	f0 e0       	ldi	r31, 0x00	; 0
 132:	ef 5e       	subi	r30, 0xEF	; 239
 134:	fe 4f       	sbci	r31, 0xFE	; 254
 136:	20 83       	st	Z, r18
		uart_1_rxwr = wr;
 138:	80 93 22 01 	sts	0x0122, r24
	};
};
 13c:	ff 91       	pop	r31
 13e:	ef 91       	pop	r30
 140:	9f 91       	pop	r25
 142:	8f 91       	pop	r24
 144:	2f 91       	pop	r18
 146:	0f 90       	pop	r0
 148:	0f be       	out	0x3f, r0	; 63
 14a:	0f 90       	pop	r0
 14c:	1f 90       	pop	r1
 14e:	18 95       	reti

00000150 <__vector_31>:
//****************************************************************************************
ISR(USART1_UDRE_vect)
{
 150:	1f 92       	push	r1
 152:	0f 92       	push	r0
 154:	0f b6       	in	r0, 0x3f	; 63
 156:	0f 92       	push	r0
 158:	11 24       	eor	r1, r1
 15a:	8f 93       	push	r24
 15c:	9f 93       	push	r25
 15e:	ef 93       	push	r30
 160:	ff 93       	push	r31
	uint8_t rd = uart_1_txrd;
 162:	80 91 00 01 	lds	r24, 0x0100
	if(rd != uart_1_txwr)
 166:	90 91 21 01 	lds	r25, 0x0121
 16a:	89 17       	cp	r24, r25
 16c:	61 f0       	breq	.+24     	; 0x186 <__vector_31+0x36>
	{
		UDR1 = uart_1_tx[rd];
 16e:	e8 2f       	mov	r30, r24
 170:	f0 e0       	ldi	r31, 0x00	; 0
 172:	ef 5f       	subi	r30, 0xFF	; 255
 174:	fe 4f       	sbci	r31, 0xFE	; 254
 176:	90 81       	ld	r25, Z
 178:	90 93 9c 00 	sts	0x009C, r25
		uart_1_txrd = (rd+1) & UART_BUFEND_1_;
 17c:	8f 5f       	subi	r24, 0xFF	; 255
 17e:	8f 70       	andi	r24, 0x0F	; 15
 180:	80 93 00 01 	sts	0x0100, r24
		return;
 184:	05 c0       	rjmp	.+10     	; 0x190 <__vector_31+0x40>
	};
	UCSR1B &= ~(1<<UDRIE1);
 186:	ea e9       	ldi	r30, 0x9A	; 154
 188:	f0 e0       	ldi	r31, 0x00	; 0
 18a:	80 81       	ld	r24, Z
 18c:	8f 7d       	andi	r24, 0xDF	; 223
 18e:	80 83       	st	Z, r24
};
 190:	ff 91       	pop	r31
 192:	ef 91       	pop	r30
 194:	9f 91       	pop	r25
 196:	8f 91       	pop	r24
 198:	0f 90       	pop	r0
 19a:	0f be       	out	0x3f, r0	; 63
 19c:	0f 90       	pop	r0
 19e:	1f 90       	pop	r1
 1a0:	18 95       	reti

000001a2 <uart_1_write>:
	return 0;
};
//****************************************************************************************
void uart_1_write(uint8_t byte)
{
	uint8_t wr = (uart_1_txwr+1) & UART_BUFEND_1_;
 1a2:	e0 91 21 01 	lds	r30, 0x0121
 1a6:	91 e0       	ldi	r25, 0x01	; 1
 1a8:	9e 0f       	add	r25, r30
 1aa:	9f 70       	andi	r25, 0x0F	; 15
	if(wr != uart_1_txrd)
 1ac:	20 91 00 01 	lds	r18, 0x0100
 1b0:	92 17       	cp	r25, r18
 1b2:	59 f0       	breq	.+22     	; 0x1ca <uart_1_write+0x28>
	{
		uart_1_tx[uart_1_txwr] = byte;
 1b4:	f0 e0       	ldi	r31, 0x00	; 0
 1b6:	ef 5f       	subi	r30, 0xFF	; 255
 1b8:	fe 4f       	sbci	r31, 0xFE	; 254
 1ba:	80 83       	st	Z, r24
		uart_1_txwr = wr;
 1bc:	90 93 21 01 	sts	0x0121, r25
		UCSR1B |= (1<<UDRIE1);
 1c0:	ea e9       	ldi	r30, 0x9A	; 154
 1c2:	f0 e0       	ldi	r31, 0x00	; 0
 1c4:	80 81       	ld	r24, Z
 1c6:	80 62       	ori	r24, 0x20	; 32
 1c8:	80 83       	st	Z, r24
 1ca:	08 95       	ret

000001cc <uart_1_init>:
	};
};
//****************************************************************************************
void uart_1_init()
{
	UBRR1L = F_CPU/UART_BAUD_RATE_1_/16-1;
 1cc:	89 e1       	ldi	r24, 0x19	; 25
 1ce:	80 93 99 00 	sts	0x0099, r24
	UBRR1H = (F_CPU/UART_BAUD_RATE_1_/16-1)>>8;
 1d2:	10 92 98 00 	sts	0x0098, r1
	UCSR1B = (1<<RXCIE1)|(1<<RXEN1)|(1<<TXEN1);
 1d6:	88 e9       	ldi	r24, 0x98	; 152
 1d8:	80 93 9a 00 	sts	0x009A, r24
 1dc:	08 95       	ret

000001de <__vector_16>:

//****************************************************************************************
// Timer0 overflow interrupt service routine
//****************************************************************************************
ISR (TIMER0_OVF_vect)
{
 1de:	1f 92       	push	r1
 1e0:	0f 92       	push	r0
 1e2:	0f b6       	in	r0, 0x3f	; 63
 1e4:	0f 92       	push	r0
 1e6:	11 24       	eor	r1, r1
 1e8:	2f 93       	push	r18
 1ea:	3f 93       	push	r19
 1ec:	4f 93       	push	r20
 1ee:	5f 93       	push	r21
 1f0:	6f 93       	push	r22
 1f2:	7f 93       	push	r23
 1f4:	8f 93       	push	r24
 1f6:	9f 93       	push	r25
 1f8:	af 93       	push	r26
 1fa:	bf 93       	push	r27
 1fc:	ef 93       	push	r30
 1fe:	ff 93       	push	r31
	//---------------------------------------------------------------------------------------
	BUT_Debrief();
 200:	0e 94 42 04 	call	0x884	; 0x884 <BUT_Debrief>

	//---------------------------------------------------------------------------------------
	return;
};
 204:	ff 91       	pop	r31
 206:	ef 91       	pop	r30
 208:	bf 91       	pop	r27
 20a:	af 91       	pop	r26
 20c:	9f 91       	pop	r25
 20e:	8f 91       	pop	r24
 210:	7f 91       	pop	r23
 212:	6f 91       	pop	r22
 214:	5f 91       	pop	r21
 216:	4f 91       	pop	r20
 218:	3f 91       	pop	r19
 21a:	2f 91       	pop	r18
 21c:	0f 90       	pop	r0
 21e:	0f be       	out	0x3f, r0	; 63
 220:	0f 90       	pop	r0
 222:	1f 90       	pop	r1
 224:	18 95       	reti

00000226 <__vector_14>:
//****************************************************************************************
// Timer1 overflow interrupt service routine
//****************************************************************************************
ISR (TIMER1_OVF_vect)
{
 226:	1f 92       	push	r1
 228:	0f 92       	push	r0
 22a:	0f b6       	in	r0, 0x3f	; 63
 22c:	0f 92       	push	r0
 22e:	11 24       	eor	r1, r1
 230:	8f 93       	push	r24
	// Reinitialize Timer1 value
	TCNT1H=0x0B;
 232:	8b e0       	ldi	r24, 0x0B	; 11
 234:	8d bd       	out	0x2d, r24	; 45
	TCNT1L=0xDC;
 236:	8c ed       	ldi	r24, 0xDC	; 220
 238:	8c bd       	out	0x2c, r24	; 44
	//---------------------------------------------------------------------------------------

	//---------------------------------------------------------------------------------------
	return;
};
 23a:	8f 91       	pop	r24
 23c:	0f 90       	pop	r0
 23e:	0f be       	out	0x3f, r0	; 63
 240:	0f 90       	pop	r0
 242:	1f 90       	pop	r1
 244:	18 95       	reti

00000246 <__vector_10>:
//****************************************************************************************
// Timer2 overflow interrupt service routine
//****************************************************************************************
ISR (TIMER2_OVF_vect)
{
 246:	1f 92       	push	r1
 248:	0f 92       	push	r0
 24a:	0f b6       	in	r0, 0x3f	; 63
 24c:	0f 92       	push	r0
 24e:	11 24       	eor	r1, r1
	//---------------------------------------------------------------------------------------

	//---------------------------------------------------------------------------------------
	return;
};
 250:	0f 90       	pop	r0
 252:	0f be       	out	0x3f, r0	; 63
 254:	0f 90       	pop	r0
 256:	1f 90       	pop	r1
 258:	18 95       	reti

0000025a <__vector_29>:
//****************************************************************************************
// Timer3 overflow interrupt service routine
//****************************************************************************************
ISR (TIMER3_OVF_vect)
{
 25a:	1f 92       	push	r1
 25c:	0f 92       	push	r0
 25e:	0f b6       	in	r0, 0x3f	; 63
 260:	0f 92       	push	r0
 262:	11 24       	eor	r1, r1
	//---------------------------------------------------------------------------------------

	//---------------------------------------------------------------------------------------
	return;
};
 264:	0f 90       	pop	r0
 266:	0f be       	out	0x3f, r0	; 63
 268:	0f 90       	pop	r0
 26a:	1f 90       	pop	r1
 26c:	18 95       	reti

0000026e <init_mcu>:
	
// Input/Output Ports initialization
// Port A initialization
// Func7=Out Func6=Out Func5=Out Func4=Out Func3=Out Func2=Out Func1=In Func0=Out
// State7=0 State6=0 State5=0 State4=0 State3=0 State2=0 State1=T State0=0
PORTA=0x00;
 26e:	1b ba       	out	0x1b, r1	; 27
DDRA=0xFD;
 270:	8d ef       	ldi	r24, 0xFD	; 253
 272:	8a bb       	out	0x1a, r24	; 26

// Port B initialization
// Func7=Out Func6=Out Func5=Out Func4=Out Func3=Out Func2=In Func1=In Func0=In
// State7=0 State6=0 State5=0 State4=0 State3=0 State2=T State1=T State0=T
PORTB=0x00;
 274:	18 ba       	out	0x18, r1	; 24
DDRB=0xF8;
 276:	88 ef       	ldi	r24, 0xF8	; 248
 278:	87 bb       	out	0x17, r24	; 23

// Port C initialization
// Func7=Out Func6=Out Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
// State7=0 State6=1 State5=P State4=P State3=P State2=P State1=P State0=P
PORTC=0x7F;
 27a:	8f e7       	ldi	r24, 0x7F	; 127
 27c:	85 bb       	out	0x15, r24	; 21
DDRC=0xC0;
 27e:	80 ec       	ldi	r24, 0xC0	; 192
 280:	84 bb       	out	0x14, r24	; 20

// Port D initialization
// Func7=Out Func6=In Func5=Out Func4=In Func3=In Func2=In Func1=In Func0=In
// State7=0 State6=T State5=0 State4=T State3=T State2=T State1=T State0=T
PORTD=0x00;
 282:	12 ba       	out	0x12, r1	; 18
DDRD=0xA0;
 284:	80 ea       	ldi	r24, 0xA0	; 160
 286:	81 bb       	out	0x11, r24	; 17

// Port E initialization
// Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
// State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
PORTE=0x00;
 288:	13 b8       	out	0x03, r1	; 3
DDRE=0x00;
 28a:	12 b8       	out	0x02, r1	; 2

// Port F initialization
// Func7=In Func6=Out Func5=In Func4=Out Func3=In Func2=In Func1=In Func0=In
// State7=P State6=0 State5=P State4=0 State3=T State2=T State1=T State0=T
PORTF=0xA0;
 28c:	80 93 62 00 	sts	0x0062, r24
DDRF=0x50;
 290:	80 e5       	ldi	r24, 0x50	; 80
 292:	80 93 61 00 	sts	0x0061, r24


// Port G initialization
// Func4=Out Func3=Out Func2=In Func1=Out Func0=Out
// State4=0 State3=0 State2=T State1=1 State0=1
PORTG=0x03;
 296:	83 e0       	ldi	r24, 0x03	; 3
 298:	80 93 65 00 	sts	0x0065, r24
DDRG=0x1B;
 29c:	8b e1       	ldi	r24, 0x1B	; 27
 29e:	80 93 64 00 	sts	0x0064, r24
// Timer/Counter 0 initialization
// Clock source: System Clock
// Clock value: 62,500 kHz
// Mode: Normal top=0xFF
// OC0 output: Disconnected
ASSR=0x00;
 2a2:	10 be       	out	0x30, r1	; 48
TCCR0=0x06;
 2a4:	86 e0       	ldi	r24, 0x06	; 6
 2a6:	83 bf       	out	0x33, r24	; 51
TCNT0=0x00;
 2a8:	12 be       	out	0x32, r1	; 50
OCR0=0x00;
 2aa:	11 be       	out	0x31, r1	; 49
// Timer1 Overflow Interrupt: On
// Input Capture Interrupt: Off
// Compare A Match Interrupt: Off
// Compare B Match Interrupt: Off
// Compare C Match Interrupt: Off
TCCR1A=0x00;
 2ac:	1f bc       	out	0x2f, r1	; 47
TCCR1B=0x04;
 2ae:	84 e0       	ldi	r24, 0x04	; 4
 2b0:	8e bd       	out	0x2e, r24	; 46
TCNT1H=0x0B;
 2b2:	9b e0       	ldi	r25, 0x0B	; 11
 2b4:	9d bd       	out	0x2d, r25	; 45
TCNT1L=0xDC;
 2b6:	9c ed       	ldi	r25, 0xDC	; 220
 2b8:	9c bd       	out	0x2c, r25	; 44
ICR1H=0x00;
 2ba:	17 bc       	out	0x27, r1	; 39
ICR1L=0x00;
 2bc:	16 bc       	out	0x26, r1	; 38
OCR1AH=0x00;
 2be:	1b bc       	out	0x2b, r1	; 43
OCR1AL=0x00;
 2c0:	1a bc       	out	0x2a, r1	; 42
OCR1BH=0x00;
 2c2:	19 bc       	out	0x29, r1	; 41
OCR1BL=0x00;
 2c4:	18 bc       	out	0x28, r1	; 40
OCR1CH=0x00;
 2c6:	10 92 79 00 	sts	0x0079, r1
OCR1CL=0x00;
 2ca:	10 92 78 00 	sts	0x0078, r1
// Clock value: 16000,000 kHz
// Mode: Fast PWM top=0xFF
// OC2 output: Non-Inverted PWM
//TCCR2=0x69;

TCCR2=0x00;
 2ce:	15 bc       	out	0x25, r1	; 37
TCNT2=0x00;
 2d0:	14 bc       	out	0x24, r1	; 36
OCR2=0x00;
 2d2:	13 bc       	out	0x23, r1	; 35
// Compare A Match Interrupt: Off
// Compare B Match Interrupt: Off
// Compare C Match Interrupt: Off
//TCCR3A=0x00;
//TCCR3B=0x01;
TCCR3A=0x00;
 2d4:	10 92 8b 00 	sts	0x008B, r1
TCCR3B=0x00;
 2d8:	10 92 8a 00 	sts	0x008A, r1
TCNT3H=0x00;
 2dc:	10 92 89 00 	sts	0x0089, r1
TCNT3L=0x00;
 2e0:	10 92 88 00 	sts	0x0088, r1
ICR3H=0x00;
 2e4:	10 92 81 00 	sts	0x0081, r1
ICR3L=0x00;
 2e8:	10 92 80 00 	sts	0x0080, r1
OCR3AH=0x00;
 2ec:	10 92 87 00 	sts	0x0087, r1
OCR3AL=0x00;
 2f0:	10 92 86 00 	sts	0x0086, r1
OCR3BH=0x00;
 2f4:	10 92 85 00 	sts	0x0085, r1
OCR3BL=0x00;
 2f8:	10 92 84 00 	sts	0x0084, r1
OCR3CH=0x00;
 2fc:	10 92 83 00 	sts	0x0083, r1
OCR3CL=0x00;
 300:	10 92 82 00 	sts	0x0082, r1
// INT3: Off
// INT4: Off
// INT5: Off
// INT6: Off
// INT7: Off
EICRA=0x00;
 304:	10 92 6a 00 	sts	0x006A, r1
EICRB=0x00;
 308:	1a be       	out	0x3a, r1	; 58
EIMSK=0x00;
 30a:	19 be       	out	0x39, r1	; 57

// Timer(s)/Counter(s) Interrupt(s) initialization
TIMSK=0x05;//TIMSK=0xC5;
 30c:	95 e0       	ldi	r25, 0x05	; 5
 30e:	97 bf       	out	0x37, r25	; 55
ETIMSK=0x04;
 310:	80 93 7d 00 	sts	0x007D, r24

// USART0 initialization
// USART0 disabled
UCSR0B=0x00;
 314:	1a b8       	out	0x0a, r1	; 10

// USART1 initialization
// USART1 disabled
UCSR1B=0x00;
 316:	10 92 9a 00 	sts	0x009A, r1

// Analog Comparator initialization
// Analog Comparator: Off
// Analog Comparator Input Capture by Timer/Counter 1: Off
ACSR=0x80;
 31a:	80 e8       	ldi	r24, 0x80	; 128
 31c:	88 b9       	out	0x08, r24	; 8
SFIOR=0x00;
 31e:	10 bc       	out	0x20, r1	; 32

// ADC initialization
// ADC disabled
ADCSRA=0x00;
 320:	16 b8       	out	0x06, r1	; 6

// SPI initialization
// SPI disabled
SPCR=0x00;
 322:	1d b8       	out	0x0d, r1	; 13

// TWI initialization
// TWI disabled
TWCR=0x00;
 324:	10 92 74 00 	sts	0x0074, r1
 328:	08 95       	ret

0000032a <main>:
{
	//---------------------------------------------------------------------------------------
	// Declare your local variables here
	unsigned int cnt = 0;
	//---------------------------------------------------------------------------------------
	init_mcu();
 32a:	0e 94 37 01 	call	0x26e	; 0x26e <init_mcu>
	//---------------------------------------------------------------------------------------
	init_adc();
 32e:	0e 94 6c 00 	call	0xd8	; 0xd8 <init_adc>
	rs485_0_init();
 332:	0e 94 32 04 	call	0x864	; 0x864 <rs485_0_init>
	uart_1_init();
 336:	0e 94 e6 00 	call	0x1cc	; 0x1cc <uart_1_init>
	i2c_lcd_init();
 33a:	0e 94 b6 02 	call	0x56c	; 0x56c <i2c_lcd_init>
	BUT_Init();
 33e:	0e 94 3b 04 	call	0x876	; 0x876 <BUT_Init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 342:	8f e3       	ldi	r24, 0x3F	; 63
 344:	9c e9       	ldi	r25, 0x9C	; 156
 346:	01 97       	sbiw	r24, 0x01	; 1
 348:	f1 f7       	brne	.-4      	; 0x346 <main+0x1c>
 34a:	00 c0       	rjmp	.+0      	; 0x34c <main+0x22>
 34c:	00 00       	nop
	_delay_ms(10);
	//---------------------------------------------------------------------------------------
	asm("sei");
 34e:	78 94       	sei
		SET_OUT_4
		CLR_OUT_4
		
		SET_OUT_5
		CLR_OUT_5
		SET_OUT_6
 350:	c5 e6       	ldi	r28, 0x65	; 101
 352:	d0 e0       	ldi	r29, 0x00	; 0
		SET_OUT_7
		CLR_OUT_7
		SET_OUT_8
		CLR_OUT_8
		
		SET_OUT_9
 354:	02 e6       	ldi	r16, 0x62	; 98
 356:	10 e0       	ldi	r17, 0x00	; 0
	asm("sei");
	//---------------------------------------------------------------------------------------
    while(1)
    {
        //TODO:: Please write your application code
		SET_OUT_1
 358:	c3 9a       	sbi	0x18, 3	; 24
		CLR_OUT_1
 35a:	c3 98       	cbi	0x18, 3	; 24
		SET_OUT_2
 35c:	c4 9a       	sbi	0x18, 4	; 24
		CLR_OUT_2
 35e:	c4 98       	cbi	0x18, 4	; 24
		SET_OUT_3
 360:	c5 9a       	sbi	0x18, 5	; 24
		CLR_OUT_3
 362:	c5 98       	cbi	0x18, 5	; 24
		SET_OUT_4
 364:	c6 9a       	sbi	0x18, 6	; 24
		CLR_OUT_4
 366:	c6 98       	cbi	0x18, 6	; 24
		
		SET_OUT_5
 368:	c7 9a       	sbi	0x18, 7	; 24
		CLR_OUT_5
 36a:	c7 98       	cbi	0x18, 7	; 24
		SET_OUT_6
 36c:	88 81       	ld	r24, Y
 36e:	88 60       	ori	r24, 0x08	; 8
 370:	88 83       	st	Y, r24
		CLR_OUT_6
 372:	88 81       	ld	r24, Y
 374:	87 7f       	andi	r24, 0xF7	; 247
 376:	88 83       	st	Y, r24
		SET_OUT_7
 378:	88 81       	ld	r24, Y
 37a:	80 61       	ori	r24, 0x10	; 16
 37c:	88 83       	st	Y, r24
		CLR_OUT_7
 37e:	88 81       	ld	r24, Y
 380:	8f 7e       	andi	r24, 0xEF	; 239
 382:	88 83       	st	Y, r24
		SET_OUT_8
 384:	af 9a       	sbi	0x15, 7	; 21
		CLR_OUT_8
 386:	af 98       	cbi	0x15, 7	; 21
		
		SET_OUT_9
 388:	f8 01       	movw	r30, r16
 38a:	80 81       	ld	r24, Z
 38c:	80 61       	ori	r24, 0x10	; 16
 38e:	80 83       	st	Z, r24
		CLR_OUT_9
 390:	80 81       	ld	r24, Z
 392:	8f 7e       	andi	r24, 0xEF	; 239
 394:	80 83       	st	Z, r24
		SET_OUT_10
 396:	95 9a       	sbi	0x12, 5	; 18
		CLR_OUT_10
 398:	95 98       	cbi	0x12, 5	; 18
		SET_OUT_11
 39a:	d8 9a       	sbi	0x1b, 0	; 27
		CLR_OUT_11
 39c:	d8 98       	cbi	0x1b, 0	; 27
		SET_OUT_12
 39e:	97 9a       	sbi	0x12, 7	; 18
		CLR_OUT_12
 3a0:	97 98       	cbi	0x12, 7	; 18
		
		
		cnt=read_adc(A_IN_1);
 3a2:	80 e0       	ldi	r24, 0x00	; 0
 3a4:	0e 94 71 00 	call	0xe2	; 0xe2 <read_adc>
 		Main_menu_i2c (cnt);
 3a8:	0e 94 b2 03 	call	0x764	; 0x764 <Main_menu_i2c>
		cnt=read_adc(A_IN_2);
 3ac:	81 e0       	ldi	r24, 0x01	; 1
 3ae:	0e 94 71 00 	call	0xe2	; 0xe2 <read_adc>
 		rs485_0_write (cnt);
 3b2:	0e 94 20 04 	call	0x840	; 0x840 <rs485_0_write>
		cnt=read_adc(A_IN_3);
 3b6:	82 e0       	ldi	r24, 0x02	; 2
 3b8:	0e 94 71 00 	call	0xe2	; 0xe2 <read_adc>
 		uart_1_write (cnt);
 3bc:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <uart_1_write>
 3c0:	ff ef       	ldi	r31, 0xFF	; 255
 3c2:	21 ee       	ldi	r18, 0xE1	; 225
 3c4:	84 e0       	ldi	r24, 0x04	; 4
 3c6:	f1 50       	subi	r31, 0x01	; 1
 3c8:	20 40       	sbci	r18, 0x00	; 0
 3ca:	80 40       	sbci	r24, 0x00	; 0
 3cc:	e1 f7       	brne	.-8      	; 0x3c6 <main+0x9c>
 3ce:	00 c0       	rjmp	.+0      	; 0x3d0 <main+0xa6>
 3d0:	00 00       	nop
 3d2:	c2 cf       	rjmp	.-124    	; 0x358 <main+0x2e>

000003d4 <i2c_init>:
*   Parameters :    нет
*   Purpose :       Инициализация i2c
****************************************************************************/
void i2c_init(void)
{
	(PORT_I2C&=~(1<<SDA));
 3d4:	90 98       	cbi	0x12, 0	; 18
	(PORT_I2C&=~(1<<SCL));
 3d6:	91 98       	cbi	0x12, 1	; 18
	(DDR_I2C&=~(1<<SDA));
 3d8:	88 98       	cbi	0x11, 0	; 17
	(DDR_I2C&=~(1<<SCL));
 3da:	89 98       	cbi	0x11, 1	; 17
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3dc:	85 e0       	ldi	r24, 0x05	; 5
 3de:	8a 95       	dec	r24
 3e0:	f1 f7       	brne	.-4      	; 0x3de <i2c_init+0xa>
 3e2:	00 00       	nop
 3e4:	08 95       	ret

000003e6 <i2c_start>:
*   Parameters :    нет
*   Purpose :       Старт i2c
****************************************************************************/
void i2c_start(void)         
{ 
	(DDR_I2C|=(1<<SDA)); _delay_us(pause);
 3e6:	88 9a       	sbi	0x11, 0	; 17
 3e8:	85 e0       	ldi	r24, 0x05	; 5
 3ea:	8a 95       	dec	r24
 3ec:	f1 f7       	brne	.-4      	; 0x3ea <i2c_start+0x4>
 3ee:	00 00       	nop
	(DDR_I2C|=(1<<SCL)); _delay_us(pause); 
 3f0:	89 9a       	sbi	0x11, 1	; 17
 3f2:	85 e0       	ldi	r24, 0x05	; 5
 3f4:	8a 95       	dec	r24
 3f6:	f1 f7       	brne	.-4      	; 0x3f4 <i2c_start+0xe>
 3f8:	00 00       	nop
 3fa:	08 95       	ret

000003fc <i2c_write>:
*   Returns :       нет
*   Parameters :    Данныэ на отправку
*   Purpose :       Передача 1го байта по i2c
****************************************************************************/
void i2c_write(unsigned char byt)  
{ 
 3fc:	27 e0       	ldi	r18, 0x07	; 7
 3fe:	30 e0       	ldi	r19, 0x00	; 0
    unsigned char k;                       
    for (k = 0; k < 8; k++)    
    { 
		(DDR_I2C|=(1<<SCL));
        if(0x01 & (byt >> (7 - k)))
 400:	90 e0       	ldi	r25, 0x00	; 0
void i2c_write(unsigned char byt)  
{ 
    unsigned char k;                       
    for (k = 0; k < 8; k++)    
    { 
		(DDR_I2C|=(1<<SCL));
 402:	89 9a       	sbi	0x11, 1	; 17
        if(0x01 & (byt >> (7 - k)))
 404:	ac 01       	movw	r20, r24
 406:	02 2e       	mov	r0, r18
 408:	02 c0       	rjmp	.+4      	; 0x40e <i2c_write+0x12>
 40a:	55 95       	asr	r21
 40c:	47 95       	ror	r20
 40e:	0a 94       	dec	r0
 410:	e2 f7       	brpl	.-8      	; 0x40a <i2c_write+0xe>
 412:	40 ff       	sbrs	r20, 0
 414:	02 c0       	rjmp	.+4      	; 0x41a <i2c_write+0x1e>
		{
			(DDR_I2C&=~(1<<SDA));
 416:	88 98       	cbi	0x11, 0	; 17
 418:	01 c0       	rjmp	.+2      	; 0x41c <i2c_write+0x20>
		}else
		{
			(DDR_I2C|=(1<<SDA));
 41a:	88 9a       	sbi	0x11, 0	; 17
 41c:	45 e0       	ldi	r20, 0x05	; 5
 41e:	4a 95       	dec	r20
 420:	f1 f7       	brne	.-4      	; 0x41e <i2c_write+0x22>
 422:	00 00       	nop
		};
	    _delay_us(pause);   
        (DDR_I2C&=~(1<<SCL));
 424:	89 98       	cbi	0x11, 1	; 17
 426:	45 e0       	ldi	r20, 0x05	; 5
 428:	4a 95       	dec	r20
 42a:	f1 f7       	brne	.-4      	; 0x428 <i2c_write+0x2c>
 42c:	00 00       	nop
 42e:	21 50       	subi	r18, 0x01	; 1
 430:	31 09       	sbc	r19, r1
 432:	38 f7       	brcc	.-50     	; 0x402 <i2c_write+0x6>
		_delay_us(pause);             
    };
	(DDR_I2C&=~(1<<SDA));
 434:	88 98       	cbi	0x11, 0	; 17
	(DDR_I2C|=(1<<SCL));
 436:	89 9a       	sbi	0x11, 1	; 17
 438:	85 e0       	ldi	r24, 0x05	; 5
 43a:	8a 95       	dec	r24
 43c:	f1 f7       	brne	.-4      	; 0x43a <i2c_write+0x3e>
 43e:	00 00       	nop
	_delay_us(pause);
	(DDR_I2C&=~(1<<SCL));
 440:	89 98       	cbi	0x11, 1	; 17
 442:	45 e0       	ldi	r20, 0x05	; 5
 444:	4a 95       	dec	r20
 446:	f1 f7       	brne	.-4      	; 0x444 <i2c_write+0x48>
 448:	00 00       	nop
	_delay_us(pause);
	(DDR_I2C|=(1<<SCL));
 44a:	89 9a       	sbi	0x11, 1	; 17
 44c:	08 95       	ret

0000044e <i2c_stop>:
*   Parameters :    нет
*   Purpose :       Стоп i2c
****************************************************************************/
void i2c_stop(void)            
{ 
    (DDR_I2C|=(1<<SDA)); _delay_us(pause);   
 44e:	88 9a       	sbi	0x11, 0	; 17
 450:	85 e0       	ldi	r24, 0x05	; 5
 452:	8a 95       	dec	r24
 454:	f1 f7       	brne	.-4      	; 0x452 <i2c_stop+0x4>
 456:	00 00       	nop
    (DDR_I2C&=~(1<<SCL)); _delay_us(pause);           
 458:	89 98       	cbi	0x11, 1	; 17
 45a:	85 e0       	ldi	r24, 0x05	; 5
 45c:	8a 95       	dec	r24
 45e:	f1 f7       	brne	.-4      	; 0x45c <i2c_stop+0xe>
 460:	00 00       	nop
    (DDR_I2C&=~(1<<SDA)); _delay_us(pause);                                 
 462:	88 98       	cbi	0x11, 0	; 17
 464:	85 e0       	ldi	r24, 0x05	; 5
 466:	8a 95       	dec	r24
 468:	f1 f7       	brne	.-4      	; 0x466 <i2c_stop+0x18>
 46a:	00 00       	nop
 46c:	08 95       	ret

0000046e <i2c_acknowledge>:
    return (check);      
};

void i2c_acknowledge(void)
{
	(DDR_I2C&=~(1<<SDA));
 46e:	88 98       	cbi	0x11, 0	; 17
	//delayMicroseconds(1);
	(DDR_I2C|=(1<<SCL));
 470:	89 9a       	sbi	0x11, 1	; 17
 472:	85 e0       	ldi	r24, 0x05	; 5
 474:	8a 95       	dec	r24
 476:	f1 f7       	brne	.-4      	; 0x474 <i2c_acknowledge+0x6>
 478:	00 00       	nop
	_delay_us(pause);
	(DDR_I2C&=~(1<<SCL));
 47a:	89 98       	cbi	0x11, 1	; 17
 47c:	08 95       	ret

0000047e <PCF8574_Write>:

#include "i2c_lcd.h"

//****************************************************************************************
void PCF8574_Write(unsigned char data)
{
 47e:	cf 93       	push	r28
 480:	c8 2f       	mov	r28, r24
	i2c_start();              //         |-[S]-|  ;Start Condition
 482:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <i2c_start>
	i2c_write(PCF8574_ADDR | I2C_WRITE);    //         |---Slave address (PCF8574)--[A2=0,A1=0,A0=0]---|   +    |-R/W-|
 486:	8e e4       	ldi	r24, 0x4E	; 78
 488:	0e 94 fe 01 	call	0x3fc	; 0x3fc <i2c_write>
	i2c_acknowledge();        //         |-[A]-|  ;Active LOW
 48c:	0e 94 37 02 	call	0x46e	; 0x46e <i2c_acknowledge>
	i2c_write(data);          //         |-------------------data to port-----------------------|
 490:	8c 2f       	mov	r24, r28
 492:	0e 94 fe 01 	call	0x3fc	; 0x3fc <i2c_write>
	i2c_acknowledge();        //         |-[A]-|  ;Active LOW
 496:	0e 94 37 02 	call	0x46e	; 0x46e <i2c_acknowledge>
	i2c_stop();               //         |-[P]-|  ;Stop Condition
 49a:	0e 94 27 02 	call	0x44e	; 0x44e <i2c_stop>
};
 49e:	cf 91       	pop	r28
 4a0:	08 95       	ret

000004a2 <send_i2c_lcd_byte>:
//***************************************************************************************
//Procedure sending LCD byte
//Input: Byte, Kommand/Symbol data
//***************************************************************************************
void send_i2c_lcd_byte(unsigned char lcd_data, unsigned char rs_status ) //bool lcd_command,
{
 4a2:	df 92       	push	r13
 4a4:	ef 92       	push	r14
 4a6:	ff 92       	push	r15
 4a8:	0f 93       	push	r16
 4aa:	1f 93       	push	r17
 4ac:	cf 93       	push	r28
 4ae:	df 93       	push	r29
	//lcd_data=0x08;
	//---------------------------------------------------------------------------------------
	rs_status=rs_status*2;
 4b0:	d6 2e       	mov	r13, r22
 4b2:	dd 0c       	add	r13, r13
	PCF8574_Write(rs_status|E_L|((lcd_data<<1)&0xE0)|((lcd_data>>3)&0x10));
 4b4:	e8 2e       	mov	r14, r24
 4b6:	f1 2c       	mov	r15, r1
 4b8:	e7 01       	movw	r28, r14
 4ba:	cc 0f       	add	r28, r28
 4bc:	dd 1f       	adc	r29, r29
 4be:	18 2f       	mov	r17, r24
 4c0:	16 95       	lsr	r17
 4c2:	16 95       	lsr	r17
 4c4:	16 95       	lsr	r17
 4c6:	d1 2f       	mov	r29, r17
 4c8:	d0 71       	andi	r29, 0x10	; 16
 4ca:	dd 29       	or	r29, r13
 4cc:	8c 2f       	mov	r24, r28
 4ce:	80 7e       	andi	r24, 0xE0	; 224
 4d0:	d8 2b       	or	r29, r24
 4d2:	8d 2f       	mov	r24, r29
 4d4:	0e 94 3f 02 	call	0x47e	; 0x47e <PCF8574_Write>
 4d8:	85 e3       	ldi	r24, 0x35	; 53
 4da:	8a 95       	dec	r24
 4dc:	f1 f7       	brne	.-4      	; 0x4da <send_i2c_lcd_byte+0x38>
 4de:	00 00       	nop
	_delay_us(10);
	PCF8574_Write(rs_status|E_H|((lcd_data<<1)&0xE0)|((lcd_data>>3)&0x10));
 4e0:	81 2f       	mov	r24, r17
 4e2:	80 71       	andi	r24, 0x10	; 16
 4e4:	8d 29       	or	r24, r13
 4e6:	88 60       	ori	r24, 0x08	; 8
 4e8:	9c 2f       	mov	r25, r28
 4ea:	90 7e       	andi	r25, 0xE0	; 224
 4ec:	89 2b       	or	r24, r25
 4ee:	0e 94 3f 02 	call	0x47e	; 0x47e <PCF8574_Write>
 4f2:	95 e3       	ldi	r25, 0x35	; 53
 4f4:	9a 95       	dec	r25
 4f6:	f1 f7       	brne	.-4      	; 0x4f4 <send_i2c_lcd_byte+0x52>
 4f8:	00 00       	nop
	_delay_us(10);
	PCF8574_Write(rs_status|E_L|((lcd_data<<1)&0xE0)|((lcd_data>>3)&0x10));
 4fa:	8d 2f       	mov	r24, r29
 4fc:	0e 94 3f 02 	call	0x47e	; 0x47e <PCF8574_Write>
 500:	85 e3       	ldi	r24, 0x35	; 53
 502:	8a 95       	dec	r24
 504:	f1 f7       	brne	.-4      	; 0x502 <send_i2c_lcd_byte+0x60>
 506:	00 00       	nop
	_delay_us(10);
	PCF8574_Write(rs_status|E_L|((lcd_data<<5)&0xE0)|((lcd_data<<1)&0x10));
 508:	87 01       	movw	r16, r14
 50a:	00 0f       	add	r16, r16
 50c:	11 1f       	adc	r17, r17
 50e:	02 95       	swap	r16
 510:	12 95       	swap	r17
 512:	10 7f       	andi	r17, 0xF0	; 240
 514:	10 27       	eor	r17, r16
 516:	00 7f       	andi	r16, 0xF0	; 240
 518:	10 27       	eor	r17, r16
 51a:	dd 2d       	mov	r29, r13
 51c:	d0 2b       	or	r29, r16
 51e:	8c 2f       	mov	r24, r28
 520:	80 71       	andi	r24, 0x10	; 16
 522:	d8 2b       	or	r29, r24
 524:	8d 2f       	mov	r24, r29
 526:	0e 94 3f 02 	call	0x47e	; 0x47e <PCF8574_Write>
 52a:	95 e3       	ldi	r25, 0x35	; 53
 52c:	9a 95       	dec	r25
 52e:	f1 f7       	brne	.-4      	; 0x52c <send_i2c_lcd_byte+0x8a>
 530:	00 00       	nop
	_delay_us(10);
	PCF8574_Write(rs_status|E_H|((lcd_data<<5)&0xE0)|((lcd_data<<1)&0x10));
 532:	8d 2d       	mov	r24, r13
 534:	88 60       	ori	r24, 0x08	; 8
 536:	08 2b       	or	r16, r24
 538:	8c 2f       	mov	r24, r28
 53a:	80 71       	andi	r24, 0x10	; 16
 53c:	80 2b       	or	r24, r16
 53e:	0e 94 3f 02 	call	0x47e	; 0x47e <PCF8574_Write>
 542:	85 e3       	ldi	r24, 0x35	; 53
 544:	8a 95       	dec	r24
 546:	f1 f7       	brne	.-4      	; 0x544 <send_i2c_lcd_byte+0xa2>
 548:	00 00       	nop
	_delay_us(10);
	PCF8574_Write(rs_status|E_L|((lcd_data<<5)&0xE0)|((lcd_data<<1)&0x10));
 54a:	8d 2f       	mov	r24, r29
 54c:	0e 94 3f 02 	call	0x47e	; 0x47e <PCF8574_Write>
 550:	87 ec       	ldi	r24, 0xC7	; 199
 552:	90 e0       	ldi	r25, 0x00	; 0
 554:	01 97       	sbiw	r24, 0x01	; 1
 556:	f1 f7       	brne	.-4      	; 0x554 <send_i2c_lcd_byte+0xb2>
 558:	00 c0       	rjmp	.+0      	; 0x55a <send_i2c_lcd_byte+0xb8>
 55a:	00 00       	nop

	
	
	
	
};
 55c:	df 91       	pop	r29
 55e:	cf 91       	pop	r28
 560:	1f 91       	pop	r17
 562:	0f 91       	pop	r16
 564:	ff 90       	pop	r15
 566:	ef 90       	pop	r14
 568:	df 90       	pop	r13
 56a:	08 95       	ret

0000056c <i2c_lcd_init>:
void i2c_lcd_init(void)
{
	//---------------------------------------------------------------------------------------
	//init i2c
	//---------------------------------------------------------------------------------------
	i2c_init();
 56c:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <i2c_init>
	//---------------------------------------------------------------------------------------
	PCF8574_Write(0x00);//E = 0 RS= 0 R/W = 0
 570:	80 e0       	ldi	r24, 0x00	; 0
 572:	0e 94 3f 02 	call	0x47e	; 0x47e <PCF8574_Write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 576:	8f e9       	ldi	r24, 0x9F	; 159
 578:	9f e0       	ldi	r25, 0x0F	; 15
 57a:	01 97       	sbiw	r24, 0x01	; 1
 57c:	f1 f7       	brne	.-4      	; 0x57a <i2c_lcd_init+0xe>
 57e:	00 c0       	rjmp	.+0      	; 0x580 <i2c_lcd_init+0x14>
 580:	00 00       	nop
	_delay_ms(1);
	//---------------------------------------------------------------------------------------
	//Function Set 3 ????? ?????? D4-D7 ????????????? bus
	PCF8574_Write(0x60);      //1    0x20 + 0x03
 582:	80 e6       	ldi	r24, 0x60	; 96
 584:	0e 94 3f 02 	call	0x47e	; 0x47e <PCF8574_Write>
 588:	8f e9       	ldi	r24, 0x9F	; 159
 58a:	9f e0       	ldi	r25, 0x0F	; 15
 58c:	01 97       	sbiw	r24, 0x01	; 1
 58e:	f1 f7       	brne	.-4      	; 0x58c <i2c_lcd_init+0x20>
 590:	00 c0       	rjmp	.+0      	; 0x592 <i2c_lcd_init+0x26>
 592:	00 00       	nop
	_delay_ms(1);
	PCF8574_Write(0x40);
 594:	80 e4       	ldi	r24, 0x40	; 64
 596:	0e 94 3f 02 	call	0x47e	; 0x47e <PCF8574_Write>
 59a:	8f e9       	ldi	r24, 0x9F	; 159
 59c:	9f e0       	ldi	r25, 0x0F	; 15
 59e:	01 97       	sbiw	r24, 0x01	; 1
 5a0:	f1 f7       	brne	.-4      	; 0x59e <i2c_lcd_init+0x32>
 5a2:	00 c0       	rjmp	.+0      	; 0x5a4 <i2c_lcd_init+0x38>
 5a4:	00 00       	nop
	_delay_ms(1);
	PCF8574_Write(E_H|0x40);     //2
 5a6:	88 e4       	ldi	r24, 0x48	; 72
 5a8:	0e 94 3f 02 	call	0x47e	; 0x47e <PCF8574_Write>
 5ac:	8f e9       	ldi	r24, 0x9F	; 159
 5ae:	9f e0       	ldi	r25, 0x0F	; 15
 5b0:	01 97       	sbiw	r24, 0x01	; 1
 5b2:	f1 f7       	brne	.-4      	; 0x5b0 <i2c_lcd_init+0x44>
 5b4:	00 c0       	rjmp	.+0      	; 0x5b6 <i2c_lcd_init+0x4a>
 5b6:	00 00       	nop
	_delay_ms(1);
	PCF8574_Write(E_L|0x40);
 5b8:	80 e4       	ldi	r24, 0x40	; 64
 5ba:	0e 94 3f 02 	call	0x47e	; 0x47e <PCF8574_Write>
 5be:	8f e9       	ldi	r24, 0x9F	; 159
 5c0:	9f e0       	ldi	r25, 0x0F	; 15
 5c2:	01 97       	sbiw	r24, 0x01	; 1
 5c4:	f1 f7       	brne	.-4      	; 0x5c2 <i2c_lcd_init+0x56>
 5c6:	00 c0       	rjmp	.+0      	; 0x5c8 <i2c_lcd_init+0x5c>
 5c8:	00 00       	nop
	_delay_ms(1);
	//---------------------------------------------------------------------------------------
	send_i2c_lcd_byte(0x28,lcd_kom);			//2 lines, 5*8 pixels, 8bit data
 5ca:	60 e0       	ldi	r22, 0x00	; 0
 5cc:	88 e2       	ldi	r24, 0x28	; 40
 5ce:	0e 94 51 02 	call	0x4a2	; 0x4a2 <send_i2c_lcd_byte>
	send_i2c_lcd_byte(0x0C,lcd_kom);			//screen enable,
 5d2:	60 e0       	ldi	r22, 0x00	; 0
 5d4:	8c e0       	ldi	r24, 0x0C	; 12
 5d6:	0e 94 51 02 	call	0x4a2	; 0x4a2 <send_i2c_lcd_byte>
	send_i2c_lcd_byte(0x06,lcd_kom);			//auto shift left enable
 5da:	60 e0       	ldi	r22, 0x00	; 0
 5dc:	86 e0       	ldi	r24, 0x06	; 6
 5de:	0e 94 51 02 	call	0x4a2	; 0x4a2 <send_i2c_lcd_byte>
	send_i2c_lcd_byte(0x01,lcd_kom);			//0x01 clear screen
 5e2:	60 e0       	ldi	r22, 0x00	; 0
 5e4:	81 e0       	ldi	r24, 0x01	; 1
 5e6:	0e 94 51 02 	call	0x4a2	; 0x4a2 <send_i2c_lcd_byte>
 5ea:	9f ef       	ldi	r25, 0xFF	; 255
 5ec:	29 ef       	ldi	r18, 0xF9	; 249
 5ee:	80 e0       	ldi	r24, 0x00	; 0
 5f0:	91 50       	subi	r25, 0x01	; 1
 5f2:	20 40       	sbci	r18, 0x00	; 0
 5f4:	80 40       	sbci	r24, 0x00	; 0
 5f6:	e1 f7       	brne	.-8      	; 0x5f0 <i2c_lcd_init+0x84>
 5f8:	00 c0       	rjmp	.+0      	; 0x5fa <i2c_lcd_init+0x8e>
 5fa:	00 00       	nop
 5fc:	08 95       	ret

000005fe <send_i2c_lcd_symbol>:
//Input: Symbol
//***************************************************************************************
void send_i2c_lcd_symbol(unsigned char temp_symbol)
{
	//---------------------------------------------------------------------------------------
	send_i2c_lcd_byte(temp_symbol,lcd_sym);
 5fe:	61 e0       	ldi	r22, 0x01	; 1
 600:	0e 94 51 02 	call	0x4a2	; 0x4a2 <send_i2c_lcd_byte>
 604:	08 95       	ret

00000606 <set_i2c_lcd_position>:
//Input: Line(1,2), Position(1..16)
//***************************************************************************************
void set_i2c_lcd_position(unsigned char temp_line, unsigned char temp_pos)
{
	//---------------------------------------------------------------------------------------
	switch (temp_line)
 606:	82 30       	cpi	r24, 0x02	; 2
 608:	61 f0       	breq	.+24     	; 0x622 <set_i2c_lcd_position+0x1c>
 60a:	18 f4       	brcc	.+6      	; 0x612 <set_i2c_lcd_position+0xc>
 60c:	81 30       	cpi	r24, 0x01	; 1
 60e:	31 f0       	breq	.+12     	; 0x61c <set_i2c_lcd_position+0x16>
 610:	10 c0       	rjmp	.+32     	; 0x632 <set_i2c_lcd_position+0x2c>
 612:	83 30       	cpi	r24, 0x03	; 3
 614:	49 f0       	breq	.+18     	; 0x628 <set_i2c_lcd_position+0x22>
 616:	84 30       	cpi	r24, 0x04	; 4
 618:	51 f0       	breq	.+20     	; 0x62e <set_i2c_lcd_position+0x28>
 61a:	0b c0       	rjmp	.+22     	; 0x632 <set_i2c_lcd_position+0x2c>
	{
		//---------------------------------------------------------------------------------------
		case 0x01 :
			temp_line=0x80+temp_pos-1;
 61c:	8f e7       	ldi	r24, 0x7F	; 127
 61e:	86 0f       	add	r24, r22
		break;
 620:	08 c0       	rjmp	.+16     	; 0x632 <set_i2c_lcd_position+0x2c>
		case 0x02 :
			temp_line=0xC0+temp_pos-1;
 622:	8f eb       	ldi	r24, 0xBF	; 191
 624:	86 0f       	add	r24, r22
		break;
 626:	05 c0       	rjmp	.+10     	; 0x632 <set_i2c_lcd_position+0x2c>
		case 0x03 :
			temp_line=0x94+temp_pos-1;
 628:	83 e9       	ldi	r24, 0x93	; 147
 62a:	86 0f       	add	r24, r22
		break;
 62c:	02 c0       	rjmp	.+4      	; 0x632 <set_i2c_lcd_position+0x2c>
		case 0x04 :
			temp_line=0xd4+temp_pos-1;
 62e:	83 ed       	ldi	r24, 0xD3	; 211
 630:	86 0f       	add	r24, r22
		break;
		default :;
		//---------------------------------------------------------------------------------------
	};   //switch (temp_line)
	//---------------------------------------------------------------------------------------
	send_i2c_lcd_byte(temp_line,lcd_kom);
 632:	60 e0       	ldi	r22, 0x00	; 0
 634:	0e 94 51 02 	call	0x4a2	; 0x4a2 <send_i2c_lcd_byte>
 638:	08 95       	ret

0000063a <send_i2c_lcd_string_P>:
//***************************************************************************************
//Procedure send symbol string to LCD from FLASH
//Input: Symbol string
//***************************************************************************************
void send_i2c_lcd_string_P(const char *string)
{
 63a:	cf 93       	push	r28
 63c:	df 93       	push	r29
 63e:	ec 01       	movw	r28, r24
	//---------------------------------------------------------------------------------------
	while (pgm_read_byte(string)!='\0')
 640:	fe 01       	movw	r30, r28
 642:	24 91       	lpm	r18, Z
 644:	22 23       	and	r18, r18
 646:	59 f0       	breq	.+22     	; 0x65e <send_i2c_lcd_string_P+0x24>
	{
		//---------------------------------------------------------------------------------------
		send_i2c_lcd_byte(pgm_read_byte(string),lcd_sym);
 648:	fc 01       	movw	r30, r24
 64a:	84 91       	lpm	r24, Z
 64c:	61 e0       	ldi	r22, 0x01	; 1
 64e:	0e 94 51 02 	call	0x4a2	; 0x4a2 <send_i2c_lcd_byte>
		string++;
 652:	21 96       	adiw	r28, 0x01	; 1
//Input: Symbol string
//***************************************************************************************
void send_i2c_lcd_string_P(const char *string)
{
	//---------------------------------------------------------------------------------------
	while (pgm_read_byte(string)!='\0')
 654:	ce 01       	movw	r24, r28
 656:	fe 01       	movw	r30, r28
 658:	24 91       	lpm	r18, Z
 65a:	21 11       	cpse	r18, r1
 65c:	f5 cf       	rjmp	.-22     	; 0x648 <send_i2c_lcd_string_P+0xe>
		send_i2c_lcd_byte(pgm_read_byte(string),lcd_sym);
		string++;
		//---------------------------------------------------------------------------------------
	};
	//---------------------------------------------------------------------------------------
 };
 65e:	df 91       	pop	r29
 660:	cf 91       	pop	r28
 662:	08 95       	ret

00000664 <detect_i2c_symbol>:
//Output: Symbol
//***************************************************************************************
unsigned char detect_i2c_symbol(unsigned char temp_det_sym)
{
	//---------------------------------------------------------------------------------------
	switch(temp_det_sym)
 664:	90 e0       	ldi	r25, 0x00	; 0
 666:	fc 01       	movw	r30, r24
 668:	31 97       	sbiw	r30, 0x01	; 1
 66a:	e9 30       	cpi	r30, 0x09	; 9
 66c:	f1 05       	cpc	r31, r1
 66e:	20 f4       	brcc	.+8      	; 0x678 <detect_i2c_symbol+0x14>
 670:	ea 5b       	subi	r30, 0xBA	; 186
 672:	ff 4f       	sbci	r31, 0xFF	; 255
 674:	0c 94 6f 04 	jmp	0x8de	; 0x8de <__tablejump2__>
	{
		//---------------------------------------------------------------------------------------
		case 0:{return '0';}break;
 678:	80 e3       	ldi	r24, 0x30	; 48
 67a:	08 95       	ret
		case 1:{return '1';}break;
		case 2:{return '2';}break;	
 67c:	82 e3       	ldi	r24, 0x32	; 50
 67e:	08 95       	ret
		case 3:{return '3';}break;
 680:	83 e3       	ldi	r24, 0x33	; 51
 682:	08 95       	ret
		case 4:{return '4';}break;
 684:	84 e3       	ldi	r24, 0x34	; 52
 686:	08 95       	ret
		case 5:{return '5';}break;
 688:	85 e3       	ldi	r24, 0x35	; 53
 68a:	08 95       	ret
		case 6:{return '6';}break;	
 68c:	86 e3       	ldi	r24, 0x36	; 54
 68e:	08 95       	ret
		case 7:{return '7';}break;
 690:	87 e3       	ldi	r24, 0x37	; 55
 692:	08 95       	ret
		case 8:{return '8';}break;
 694:	88 e3       	ldi	r24, 0x38	; 56
 696:	08 95       	ret
		case 9:{return '9';}break;
 698:	89 e3       	ldi	r24, 0x39	; 57
 69a:	08 95       	ret
	//---------------------------------------------------------------------------------------
	switch(temp_det_sym)
	{
		//---------------------------------------------------------------------------------------
		case 0:{return '0';}break;
		case 1:{return '1';}break;
 69c:	81 e3       	ldi	r24, 0x31	; 49
		case 9:{return '9';}break;
		default:return '0';
		//---------------------------------------------------------------------------------------
	};
	//---------------------------------------------------------------------------------------
};
 69e:	08 95       	ret

000006a0 <detect_i2c_string>:
};
//***************************************************************************************
//Вывести на индикатор короткую строку из 4-х цифр
//***************************************************************************************
void detect_i2c_string(unsigned int temp_volt)
{
 6a0:	af 92       	push	r10
 6a2:	bf 92       	push	r11
 6a4:	cf 92       	push	r12
 6a6:	df 92       	push	r13
 6a8:	ef 92       	push	r14
 6aa:	ff 92       	push	r15
 6ac:	0f 93       	push	r16
 6ae:	1f 93       	push	r17
 6b0:	cf 93       	push	r28
 6b2:	df 93       	push	r29
 6b4:	00 d0       	rcall	.+0      	; 0x6b6 <detect_i2c_string+0x16>
 6b6:	00 d0       	rcall	.+0      	; 0x6b8 <detect_i2c_string+0x18>
 6b8:	cd b7       	in	r28, 0x3d	; 61
 6ba:	de b7       	in	r29, 0x3e	; 62
 6bc:	8c 01       	movw	r16, r24
	//---------------------------------------------------------------------------------------
	unsigned char det_string[4]={0,0,0,0};
 6be:	19 82       	std	Y+1, r1	; 0x01
 6c0:	1a 82       	std	Y+2, r1	; 0x02
 6c2:	1b 82       	std	Y+3, r1	; 0x03
 6c4:	1c 82       	std	Y+4, r1	; 0x04
 6c6:	ce 01       	movw	r24, r28
 6c8:	01 96       	adiw	r24, 0x01	; 1
 6ca:	7c 01       	movw	r14, r24
 6cc:	6c 01       	movw	r12, r24
 6ce:	5e 01       	movw	r10, r28
 6d0:	95 e0       	ldi	r25, 0x05	; 5
 6d2:	a9 0e       	add	r10, r25
 6d4:	b1 1c       	adc	r11, r1
	//---------------------------------------------------------------------------------------
	for (unsigned char j=0;j<=3;j++)
	{
		//---------------------------------------------------------------------------------------
		det_string[j]=detect_i2c_symbol(temp_volt%10);
 6d6:	98 01       	movw	r18, r16
 6d8:	ad ec       	ldi	r26, 0xCD	; 205
 6da:	bc ec       	ldi	r27, 0xCC	; 204
 6dc:	0e 94 75 04 	call	0x8ea	; 0x8ea <__umulhisi3>
 6e0:	96 95       	lsr	r25
 6e2:	87 95       	ror	r24
 6e4:	96 95       	lsr	r25
 6e6:	87 95       	ror	r24
 6e8:	96 95       	lsr	r25
 6ea:	87 95       	ror	r24
 6ec:	9c 01       	movw	r18, r24
 6ee:	22 0f       	add	r18, r18
 6f0:	33 1f       	adc	r19, r19
 6f2:	88 0f       	add	r24, r24
 6f4:	99 1f       	adc	r25, r25
 6f6:	88 0f       	add	r24, r24
 6f8:	99 1f       	adc	r25, r25
 6fa:	88 0f       	add	r24, r24
 6fc:	99 1f       	adc	r25, r25
 6fe:	82 0f       	add	r24, r18
 700:	93 1f       	adc	r25, r19
 702:	e0 2f       	mov	r30, r16
 704:	e8 1b       	sub	r30, r24
 706:	8e 2f       	mov	r24, r30
 708:	0e 94 32 03 	call	0x664	; 0x664 <detect_i2c_symbol>
 70c:	f7 01       	movw	r30, r14
 70e:	81 93       	st	Z+, r24
 710:	7f 01       	movw	r14, r30
		temp_volt=temp_volt/10;
 712:	98 01       	movw	r18, r16
 714:	ad ec       	ldi	r26, 0xCD	; 205
 716:	bc ec       	ldi	r27, 0xCC	; 204
 718:	0e 94 75 04 	call	0x8ea	; 0x8ea <__umulhisi3>
 71c:	8c 01       	movw	r16, r24
 71e:	16 95       	lsr	r17
 720:	07 95       	ror	r16
 722:	16 95       	lsr	r17
 724:	07 95       	ror	r16
 726:	16 95       	lsr	r17
 728:	07 95       	ror	r16
void detect_i2c_string(unsigned int temp_volt)
{
	//---------------------------------------------------------------------------------------
	unsigned char det_string[4]={0,0,0,0};
	//---------------------------------------------------------------------------------------
	for (unsigned char j=0;j<=3;j++)
 72a:	ea 15       	cp	r30, r10
 72c:	fb 05       	cpc	r31, r11
 72e:	99 f6       	brne	.-90     	; 0x6d6 <detect_i2c_string+0x36>
 730:	8e 01       	movw	r16, r28
 732:	0b 5f       	subi	r16, 0xFB	; 251
 734:	1f 4f       	sbci	r17, 0xFF	; 255
	};
	//---------------------------------------------------------------------------------------
	for (unsigned char j=0;j<=3;j++)
	{
		//---------------------------------------------------------------------------------------
		send_i2c_lcd_symbol(det_string[3-j]);
 736:	f8 01       	movw	r30, r16
 738:	82 91       	ld	r24, -Z
 73a:	8f 01       	movw	r16, r30
 73c:	0e 94 ff 02 	call	0x5fe	; 0x5fe <send_i2c_lcd_symbol>
		det_string[j]=detect_i2c_symbol(temp_volt%10);
		temp_volt=temp_volt/10;
		//---------------------------------------------------------------------------------------
	};
	//---------------------------------------------------------------------------------------
	for (unsigned char j=0;j<=3;j++)
 740:	0c 15       	cp	r16, r12
 742:	1d 05       	cpc	r17, r13
 744:	c1 f7       	brne	.-16     	; 0x736 <detect_i2c_string+0x96>
		//---------------------------------------------------------------------------------------
		send_i2c_lcd_symbol(det_string[3-j]);
		//---------------------------------------------------------------------------------------
	};
	//---------------------------------------------------------------------------------------	
};
 746:	0f 90       	pop	r0
 748:	0f 90       	pop	r0
 74a:	0f 90       	pop	r0
 74c:	0f 90       	pop	r0
 74e:	df 91       	pop	r29
 750:	cf 91       	pop	r28
 752:	1f 91       	pop	r17
 754:	0f 91       	pop	r16
 756:	ff 90       	pop	r15
 758:	ef 90       	pop	r14
 75a:	df 90       	pop	r13
 75c:	cf 90       	pop	r12
 75e:	bf 90       	pop	r11
 760:	af 90       	pop	r10
 762:	08 95       	ret

00000764 <Main_menu_i2c>:

char const _BURN_OK_[]			PROGMEM = "  Hello  world  ";

//****************************************************************************************
void Main_menu_i2c (unsigned int data)
{
 764:	cf 93       	push	r28
 766:	df 93       	push	r29
 768:	ec 01       	movw	r28, r24
	set_i2c_lcd_position(1,1);
 76a:	61 e0       	ldi	r22, 0x01	; 1
 76c:	81 e0       	ldi	r24, 0x01	; 1
 76e:	0e 94 03 03 	call	0x606	; 0x606 <set_i2c_lcd_position>
	send_i2c_lcd_string_P(_BURN_OK_);
 772:	8e e9       	ldi	r24, 0x9E	; 158
 774:	90 e0       	ldi	r25, 0x00	; 0
 776:	0e 94 1d 03 	call	0x63a	; 0x63a <send_i2c_lcd_string_P>
	set_i2c_lcd_position(2,1);
 77a:	61 e0       	ldi	r22, 0x01	; 1
 77c:	82 e0       	ldi	r24, 0x02	; 2
 77e:	0e 94 03 03 	call	0x606	; 0x606 <set_i2c_lcd_position>
	detect_i2c_string(data);				// Виводим на дисплей
 782:	ce 01       	movw	r24, r28
 784:	0e 94 50 03 	call	0x6a0	; 0x6a0 <detect_i2c_string>
};			//Main_menu
 788:	df 91       	pop	r29
 78a:	cf 91       	pop	r28
 78c:	08 95       	ret

0000078e <__vector_18>:

#include "rs485_0.h"

//****************************************************************************************
ISR(USART0_RX_vect)
{
 78e:	1f 92       	push	r1
 790:	0f 92       	push	r0
 792:	0f b6       	in	r0, 0x3f	; 63
 794:	0f 92       	push	r0
 796:	11 24       	eor	r1, r1
 798:	2f 93       	push	r18
 79a:	8f 93       	push	r24
 79c:	9f 93       	push	r25
 79e:	ef 93       	push	r30
 7a0:	ff 93       	push	r31
	uint8_t byte;
	uint8_t wr = (uart_0_rxwr+1) & UART_BUFEND_0_;
 7a2:	e0 91 38 01 	lds	r30, 0x0138
 7a6:	81 e0       	ldi	r24, 0x01	; 1
 7a8:	8e 0f       	add	r24, r30
 7aa:	8f 70       	andi	r24, 0x0F	; 15
	byte = UDR0;
 7ac:	2c b1       	in	r18, 0x0c	; 12
	if(wr != uart_0_rxrd)
 7ae:	90 91 39 01 	lds	r25, 0x0139
 7b2:	89 17       	cp	r24, r25
 7b4:	31 f0       	breq	.+12     	; 0x7c2 <__vector_18+0x34>
	{
		uart_0_rx[uart_0_rxwr] = byte;
 7b6:	f0 e0       	ldi	r31, 0x00	; 0
 7b8:	e9 5d       	subi	r30, 0xD9	; 217
 7ba:	fe 4f       	sbci	r31, 0xFE	; 254
 7bc:	20 83       	st	Z, r18
		uart_0_rxwr = wr;
 7be:	80 93 38 01 	sts	0x0138, r24
	};
};
 7c2:	ff 91       	pop	r31
 7c4:	ef 91       	pop	r30
 7c6:	9f 91       	pop	r25
 7c8:	8f 91       	pop	r24
 7ca:	2f 91       	pop	r18
 7cc:	0f 90       	pop	r0
 7ce:	0f be       	out	0x3f, r0	; 63
 7d0:	0f 90       	pop	r0
 7d2:	1f 90       	pop	r1
 7d4:	18 95       	reti

000007d6 <__vector_19>:
//****************************************************************************************
ISR(USART0_UDRE_vect)
{
 7d6:	1f 92       	push	r1
 7d8:	0f 92       	push	r0
 7da:	0f b6       	in	r0, 0x3f	; 63
 7dc:	0f 92       	push	r0
 7de:	11 24       	eor	r1, r1
 7e0:	8f 93       	push	r24
 7e2:	9f 93       	push	r25
 7e4:	ef 93       	push	r30
 7e6:	ff 93       	push	r31
	uint8_t rd = uart_0_txrd;
 7e8:	80 91 37 01 	lds	r24, 0x0137
	if(rd != uart_0_txwr)
 7ec:	90 91 26 01 	lds	r25, 0x0126
 7f0:	89 17       	cp	r24, r25
 7f2:	59 f0       	breq	.+22     	; 0x80a <__vector_19+0x34>
	{
		UDR0 = uart_0_tx[rd];
 7f4:	e8 2f       	mov	r30, r24
 7f6:	f0 e0       	ldi	r31, 0x00	; 0
 7f8:	e6 5c       	subi	r30, 0xC6	; 198
 7fa:	fe 4f       	sbci	r31, 0xFE	; 254
 7fc:	90 81       	ld	r25, Z
 7fe:	9c b9       	out	0x0c, r25	; 12
		uart_0_txrd = (rd+1) & UART_BUFEND_0_;
 800:	8f 5f       	subi	r24, 0xFF	; 255
 802:	8f 70       	andi	r24, 0x0F	; 15
 804:	80 93 37 01 	sts	0x0137, r24
		return;
 808:	08 c0       	rjmp	.+16     	; 0x81a <__vector_19+0x44>
	}else
	{

	};
	UCSR0B &= ~(1<<UDRIE0);
 80a:	55 98       	cbi	0x0a, 5	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 80c:	87 ee       	ldi	r24, 0xE7	; 231
 80e:	93 e0       	ldi	r25, 0x03	; 3
 810:	01 97       	sbiw	r24, 0x01	; 1
 812:	f1 f7       	brne	.-4      	; 0x810 <__vector_19+0x3a>
 814:	00 c0       	rjmp	.+0      	; 0x816 <__vector_19+0x40>
 816:	00 00       	nop
	_delay_us(250);
	TXD_DISABLE
 818:	1a 98       	cbi	0x03, 2	; 3
};
 81a:	ff 91       	pop	r31
 81c:	ef 91       	pop	r30
 81e:	9f 91       	pop	r25
 820:	8f 91       	pop	r24
 822:	0f 90       	pop	r0
 824:	0f be       	out	0x3f, r0	; 63
 826:	0f 90       	pop	r0
 828:	1f 90       	pop	r1
 82a:	18 95       	reti

0000082c <__vector_20>:
//****************************************************************************************
ISR(USART0_TX_vect)
{
 82c:	1f 92       	push	r1
 82e:	0f 92       	push	r0
 830:	0f b6       	in	r0, 0x3f	; 63
 832:	0f 92       	push	r0
 834:	11 24       	eor	r1, r1
	//TXD_DISABLE
};
 836:	0f 90       	pop	r0
 838:	0f be       	out	0x3f, r0	; 63
 83a:	0f 90       	pop	r0
 83c:	1f 90       	pop	r1
 83e:	18 95       	reti

00000840 <rs485_0_write>:
	return 0;
};
//****************************************************************************************
void rs485_0_write(uint8_t byte)
{
	uint8_t wr = (uart_0_txwr+1) & UART_BUFEND_0_;
 840:	e0 91 26 01 	lds	r30, 0x0126
 844:	91 e0       	ldi	r25, 0x01	; 1
 846:	9e 0f       	add	r25, r30
 848:	9f 70       	andi	r25, 0x0F	; 15
	if(wr != uart_0_txrd)
 84a:	20 91 37 01 	lds	r18, 0x0137
 84e:	92 17       	cp	r25, r18
 850:	41 f0       	breq	.+16     	; 0x862 <rs485_0_write+0x22>
	{
		uart_0_tx[uart_0_txwr] = byte;
 852:	f0 e0       	ldi	r31, 0x00	; 0
 854:	e6 5c       	subi	r30, 0xC6	; 198
 856:	fe 4f       	sbci	r31, 0xFE	; 254
 858:	80 83       	st	Z, r24
		uart_0_txwr = wr;
 85a:	90 93 26 01 	sts	0x0126, r25
		TXD_ENABLE
 85e:	1a 9a       	sbi	0x03, 2	; 3
		UCSR0B |= (1<<UDRIE0);
 860:	55 9a       	sbi	0x0a, 5	; 10
 862:	08 95       	ret

00000864 <rs485_0_init>:
	};
};
//****************************************************************************************
void rs485_0_init()
{
	(PORT_TXDE&=~(1<<TXDE));
 864:	1a 98       	cbi	0x03, 2	; 3
	(DDR_TXDE|=(1<<TXDE));
 866:	12 9a       	sbi	0x02, 2	; 2
	//UBRR0L = (F_CPU+UART_RATE/8)/(UART_RATE/16)-1;
	//UBRR0H = ((F_CPU+UART_RATE/8)/(UART_RATE/16)-1)>>8;
	UBRR0L = F_CPU/UART_BAUD_RATE_0_/16-1;
 868:	89 e1       	ldi	r24, 0x19	; 25
 86a:	89 b9       	out	0x09, r24	; 9
	UBRR0H = (F_CPU/UART_BAUD_RATE_0_/16-1)>>8;
 86c:	10 92 90 00 	sts	0x0090, r1
	UCSR0B = (1<<RXCIE0)|(1<<RXEN0)|(1<<TXEN0);
 870:	88 e9       	ldi	r24, 0x98	; 152
 872:	8a b9       	out	0x0a, r24	; 10
 874:	08 95       	ret

00000876 <BUT_Init>:
*   Purpose :       РёРЅРёС†РёР°Р»РёР·Р°С†РёСЏ РїРѕСЂС‚РѕРІ РІРІРѕРґР°/РІС‹РІРѕРґР°
*                   РІС‹Р·С‹РІР°РµС‚СЃСЏ РѕР±С‹С‡РЅРѕ РІ РЅР°С‡Р°Р»Рµ main`a
****************************************************************************/
void BUT_Init(void)
{
	DDRX_BUTTON &= ~(MASK_BUTTONS);
 876:	84 b3       	in	r24, 0x14	; 20
 878:	80 7c       	andi	r24, 0xC0	; 192
 87a:	84 bb       	out	0x14, r24	; 20
	PORT_BUTTON |= MASK_BUTTONS;
 87c:	85 b3       	in	r24, 0x15	; 21
 87e:	8f 63       	ori	r24, 0x3F	; 63
 880:	85 bb       	out	0x15, r24	; 21
 882:	08 95       	ret

00000884 <BUT_Debrief>:
void BUT_Debrief(void)
{
	//---------------------------------------------------------------------------------------
	unsigned char key;
	//---------------------------------------------------------------------------------------
	if((((PIN_BUTTON)>>(OK))&1)==0)
 884:	98 9b       	sbis	0x13, 0	; 19
 886:	1a c0       	rjmp	.+52     	; 0x8bc <BUT_Debrief+0x38>
	{
		key = KEY_OK;
	}else if ((((PIN_BUTTON)>>(UP))&1)==0)
 888:	99 9b       	sbis	0x13, 1	; 19
 88a:	1a c0       	rjmp	.+52     	; 0x8c0 <BUT_Debrief+0x3c>
	{
		key = KEY_DOWN;
	}else if ((((PIN_BUTTON)>>(DOWN))&1)==0)
 88c:	9a 9b       	sbis	0x13, 2	; 19
 88e:	1a c0       	rjmp	.+52     	; 0x8c4 <BUT_Debrief+0x40>
	{
		key = KEY_UP;
	}else if ((((PIN_BUTTON)>>(RIGHT))&1)==0)
 890:	9b 9b       	sbis	0x13, 3	; 19
 892:	1a c0       	rjmp	.+52     	; 0x8c8 <BUT_Debrief+0x44>
	{
		key = KEY_RIGHT;
	}
	else if ((((PIN_BUTTON)>>(LEFT))&1)==0)
 894:	9c 9b       	sbis	0x13, 4	; 19
 896:	1a c0       	rjmp	.+52     	; 0x8cc <BUT_Debrief+0x48>
	{
		key = KEY_LEFT;
	}
	else if ((((PIN_BUTTON)>>(KEY_ESC))&1)==0)
 898:	9e 9b       	sbis	0x13, 6	; 19
 89a:	1a c0       	rjmp	.+52     	; 0x8d0 <BUT_Debrief+0x4c>
 89c:	0c c0       	rjmp	.+24     	; 0x8b6 <BUT_Debrief+0x32>
	{
		//Рё РµСЃР»Рё РєРЅРѕРїРєР° СѓРґРµСЂР¶РёРІР°РµС‚СЃСЏ РґРѕР»РіРѕ
		//Р·Р°РїРёСЃР°С‚СЊ РµРµ РЅРѕРјРµСЂ РІ Р±СѓС„РµСЂ
		if (comp == THRESHOLD)
		{
			comp = THRESHOLD+10;
 89e:	8f e0       	ldi	r24, 0x0F	; 15
 8a0:	80 93 24 01 	sts	0x0124, r24
			pressedKey = key;
 8a4:	90 93 25 01 	sts	0x0125, r25
			return;
 8a8:	08 95       	ret
		}
		else if (comp < (THRESHOLD+5))
 8aa:	8a 30       	cpi	r24, 0x0A	; 10
 8ac:	b8 f4       	brcc	.+46     	; 0x8dc <BUT_Debrief+0x58>
		{
			comp++;
 8ae:	8f 5f       	subi	r24, 0xFF	; 255
 8b0:	80 93 24 01 	sts	0x0124, r24
 8b4:	08 95       	ret
		};
	}
	else
	{
		comp=0;
 8b6:	10 92 24 01 	sts	0x0124, r1
 8ba:	08 95       	ret
	//---------------------------------------------------------------------------------------
	unsigned char key;
	//---------------------------------------------------------------------------------------
	if((((PIN_BUTTON)>>(OK))&1)==0)
	{
		key = KEY_OK;
 8bc:	91 e0       	ldi	r25, 0x01	; 1
 8be:	09 c0       	rjmp	.+18     	; 0x8d2 <BUT_Debrief+0x4e>
	}else if ((((PIN_BUTTON)>>(UP))&1)==0)
	{
		key = KEY_DOWN;
 8c0:	93 e0       	ldi	r25, 0x03	; 3
 8c2:	07 c0       	rjmp	.+14     	; 0x8d2 <BUT_Debrief+0x4e>
	}else if ((((PIN_BUTTON)>>(DOWN))&1)==0)
	{
		key = KEY_UP;
 8c4:	92 e0       	ldi	r25, 0x02	; 2
 8c6:	05 c0       	rjmp	.+10     	; 0x8d2 <BUT_Debrief+0x4e>
	}else if ((((PIN_BUTTON)>>(RIGHT))&1)==0)
	{
		key = KEY_RIGHT;
 8c8:	94 e0       	ldi	r25, 0x04	; 4
 8ca:	03 c0       	rjmp	.+6      	; 0x8d2 <BUT_Debrief+0x4e>
	}
	else if ((((PIN_BUTTON)>>(LEFT))&1)==0)
	{
		key = KEY_LEFT;
 8cc:	95 e0       	ldi	r25, 0x05	; 5
 8ce:	01 c0       	rjmp	.+2      	; 0x8d2 <BUT_Debrief+0x4e>
	}
	else if ((((PIN_BUTTON)>>(KEY_ESC))&1)==0)
	{
		key = KEY_ESC;
 8d0:	96 e0       	ldi	r25, 0x06	; 6
	//РµСЃР»Рё РІРѕ РІСЂРµРјРµРЅРЅРѕР№ РїРµСЂРµРјРµРЅРЅРѕР№ С‡С‚Рѕ-С‚Рѕ РµСЃС‚СЊ
	if (key!=0)
	{
		//Рё РµСЃР»Рё РєРЅРѕРїРєР° СѓРґРµСЂР¶РёРІР°РµС‚СЃСЏ РґРѕР»РіРѕ
		//Р·Р°РїРёСЃР°С‚СЊ РµРµ РЅРѕРјРµСЂ РІ Р±СѓС„РµСЂ
		if (comp == THRESHOLD)
 8d2:	80 91 24 01 	lds	r24, 0x0124
 8d6:	85 30       	cpi	r24, 0x05	; 5
 8d8:	41 f7       	brne	.-48     	; 0x8aa <BUT_Debrief+0x26>
 8da:	e1 cf       	rjmp	.-62     	; 0x89e <BUT_Debrief+0x1a>
 8dc:	08 95       	ret

000008de <__tablejump2__>:
 8de:	ee 0f       	add	r30, r30
 8e0:	ff 1f       	adc	r31, r31

000008e2 <__tablejump__>:
 8e2:	05 90       	lpm	r0, Z+
 8e4:	f4 91       	lpm	r31, Z
 8e6:	e0 2d       	mov	r30, r0
 8e8:	09 94       	ijmp

000008ea <__umulhisi3>:
 8ea:	a2 9f       	mul	r26, r18
 8ec:	b0 01       	movw	r22, r0
 8ee:	b3 9f       	mul	r27, r19
 8f0:	c0 01       	movw	r24, r0
 8f2:	a3 9f       	mul	r26, r19
 8f4:	70 0d       	add	r23, r0
 8f6:	81 1d       	adc	r24, r1
 8f8:	11 24       	eor	r1, r1
 8fa:	91 1d       	adc	r25, r1
 8fc:	b2 9f       	mul	r27, r18
 8fe:	70 0d       	add	r23, r0
 900:	81 1d       	adc	r24, r1
 902:	11 24       	eor	r1, r1
 904:	91 1d       	adc	r25, r1
 906:	08 95       	ret

00000908 <_exit>:
 908:	f8 94       	cli

0000090a <__stop_program>:
 90a:	ff cf       	rjmp	.-2      	; 0x90a <__stop_program>
