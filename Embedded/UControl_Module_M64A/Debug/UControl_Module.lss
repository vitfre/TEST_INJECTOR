
UControl_Module.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  000008ca  0000095e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000008ca  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000004a  00800100  00800100  0000095e  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000960  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000097  00000000  00000000  0000102c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  000010c3  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000280  00000000  00000000  000010f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000023c6  00000000  00000000  00001372  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000be5  00000000  00000000  00003738  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000119b  00000000  00000000  0000431d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000630  00000000  00000000  000054b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000005db  00000000  00000000  00005ae8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001212  00000000  00000000  000060c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000208  00000000  00000000  000072d5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__ctors_end>
   4:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
   8:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
   c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  10:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  14:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  18:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  1c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  20:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  24:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  28:	0c 94 17 01 	jmp	0x22e	; 0x22e <__vector_10>
  2c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  30:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  34:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  38:	0c 94 07 01 	jmp	0x20e	; 0x20e <__vector_14>
  3c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  40:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__vector_16>
  44:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  48:	0c 94 af 03 	jmp	0x75e	; 0x75e <__vector_18>
  4c:	0c 94 d3 03 	jmp	0x7a6	; 0x7a6 <__vector_19>
  50:	0c 94 fe 03 	jmp	0x7fc	; 0x7fc <__vector_20>
  54:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  58:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  5c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  60:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  64:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  68:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  6c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  70:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  74:	0c 94 21 01 	jmp	0x242	; 0x242 <__vector_29>
  78:	0c 94 77 00 	jmp	0xee	; 0xee <__vector_30>
  7c:	0c 94 9c 00 	jmp	0x138	; 0x138 <__vector_31>
  80:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  84:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  88:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>

0000008c <_BURN_OK_>:
  8c:	20 20 48 65 6c 6c 6f 20 20 77 6f 72 6c 64 20 20       Hello  world  
	...

0000009e <__ctors_end>:
  9e:	11 24       	eor	r1, r1
  a0:	1f be       	out	0x3f, r1	; 63
  a2:	cf ef       	ldi	r28, 0xFF	; 255
  a4:	d0 e1       	ldi	r29, 0x10	; 16
  a6:	de bf       	out	0x3e, r29	; 62
  a8:	cd bf       	out	0x3d, r28	; 61

000000aa <__do_clear_bss>:
  aa:	21 e0       	ldi	r18, 0x01	; 1
  ac:	a0 e0       	ldi	r26, 0x00	; 0
  ae:	b1 e0       	ldi	r27, 0x01	; 1
  b0:	01 c0       	rjmp	.+2      	; 0xb4 <.do_clear_bss_start>

000000b2 <.do_clear_bss_loop>:
  b2:	1d 92       	st	X+, r1

000000b4 <.do_clear_bss_start>:
  b4:	aa 34       	cpi	r26, 0x4A	; 74
  b6:	b2 07       	cpc	r27, r18
  b8:	e1 f7       	brne	.-8      	; 0xb2 <.do_clear_bss_loop>
  ba:	0e 94 89 01 	call	0x312	; 0x312 <main>
  be:	0c 94 63 04 	jmp	0x8c6	; 0x8c6 <_exit>

000000c2 <__bad_interrupt>:
  c2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000c6 <read_adc>:
*   Purpose :       Оцифровка по указаному каналу АЦП
****************************************************************************/
unsigned int read_adc(unsigned char adc_input)
{
	unsigned int ADC_RESULT;
	ADMUX=adc_input | (ADC_VREF_TYPE & 0xff);
  c6:	87 b9       	out	0x07, r24	; 7
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c8:	4a e6       	ldi	r20, 0x6A	; 106
  ca:	4a 95       	dec	r20
  cc:	f1 f7       	brne	.-4      	; 0xca <read_adc+0x4>
  ce:	00 c0       	rjmp	.+0      	; 0xd0 <read_adc+0xa>
	// Delay needed for the stabilization of the ADC input voltage
	_delay_us(20);//_delay_us(10);
	// Start the AD conversion
	ADCSRA|=0x40;
  d0:	36 9a       	sbi	0x06, 6	; 6
	// Wait for the AD conversion to complete
	while ((ADCSRA & 0x10)==0);
  d2:	34 9b       	sbis	0x06, 4	; 6
  d4:	fe cf       	rjmp	.-4      	; 0xd2 <read_adc+0xc>
	ADCSRA|=0x10;
  d6:	34 9a       	sbi	0x06, 4	; 6
	ADC_RESULT=ADCL;
  d8:	24 b1       	in	r18, 0x04	; 4
	ADC_RESULT=ADC_RESULT+(ADCH<<8);
  da:	35 b1       	in	r19, 0x05	; 5
  dc:	93 2f       	mov	r25, r19
  de:	80 e0       	ldi	r24, 0x00	; 0
  e0:	ac 01       	movw	r20, r24
  e2:	42 0f       	add	r20, r18
  e4:	51 1d       	adc	r21, r1
  e6:	9a 01       	movw	r18, r20
	return ADC_RESULT;
};
  e8:	84 2f       	mov	r24, r20
  ea:	93 2f       	mov	r25, r19
  ec:	08 95       	ret

000000ee <__vector_30>:

#include "buart_1.h"

//****************************************************************************************
ISR(USART1_RX_vect)
{
  ee:	1f 92       	push	r1
  f0:	0f 92       	push	r0
  f2:	0f b6       	in	r0, 0x3f	; 63
  f4:	0f 92       	push	r0
  f6:	11 24       	eor	r1, r1
  f8:	2f 93       	push	r18
  fa:	8f 93       	push	r24
  fc:	9f 93       	push	r25
  fe:	ef 93       	push	r30
 100:	ff 93       	push	r31
	uint8_t byte;
	uint8_t wr = (uart_1_rxwr+1) & UART_BUFEND_1_;
 102:	e0 91 22 01 	lds	r30, 0x0122
 106:	8e 2f       	mov	r24, r30
 108:	8f 5f       	subi	r24, 0xFF	; 255
 10a:	8f 70       	andi	r24, 0x0F	; 15
	byte = UDR1;
 10c:	20 91 9c 00 	lds	r18, 0x009C
	if(wr != uart_1_rxrd)
 110:	90 91 23 01 	lds	r25, 0x0123
 114:	89 17       	cp	r24, r25
 116:	31 f0       	breq	.+12     	; 0x124 <__vector_30+0x36>
	{
		uart_1_rx[uart_1_rxwr] = byte;
 118:	f0 e0       	ldi	r31, 0x00	; 0
 11a:	ef 5e       	subi	r30, 0xEF	; 239
 11c:	fe 4f       	sbci	r31, 0xFE	; 254
 11e:	20 83       	st	Z, r18
		uart_1_rxwr = wr;
 120:	80 93 22 01 	sts	0x0122, r24
	};
};
 124:	ff 91       	pop	r31
 126:	ef 91       	pop	r30
 128:	9f 91       	pop	r25
 12a:	8f 91       	pop	r24
 12c:	2f 91       	pop	r18
 12e:	0f 90       	pop	r0
 130:	0f be       	out	0x3f, r0	; 63
 132:	0f 90       	pop	r0
 134:	1f 90       	pop	r1
 136:	18 95       	reti

00000138 <__vector_31>:
//****************************************************************************************
ISR(USART1_UDRE_vect)
{
 138:	1f 92       	push	r1
 13a:	0f 92       	push	r0
 13c:	0f b6       	in	r0, 0x3f	; 63
 13e:	0f 92       	push	r0
 140:	11 24       	eor	r1, r1
 142:	8f 93       	push	r24
 144:	9f 93       	push	r25
 146:	ef 93       	push	r30
 148:	ff 93       	push	r31
	uint8_t rd = uart_1_txrd;
 14a:	80 91 00 01 	lds	r24, 0x0100
	if(rd != uart_1_txwr)
 14e:	90 91 21 01 	lds	r25, 0x0121
 152:	89 17       	cp	r24, r25
 154:	61 f0       	breq	.+24     	; 0x16e <__vector_31+0x36>
	{
		UDR1 = uart_1_tx[rd];
 156:	e8 2f       	mov	r30, r24
 158:	f0 e0       	ldi	r31, 0x00	; 0
 15a:	ef 5f       	subi	r30, 0xFF	; 255
 15c:	fe 4f       	sbci	r31, 0xFE	; 254
 15e:	90 81       	ld	r25, Z
 160:	90 93 9c 00 	sts	0x009C, r25
		uart_1_txrd = (rd+1) & UART_BUFEND_1_;
 164:	8f 5f       	subi	r24, 0xFF	; 255
 166:	8f 70       	andi	r24, 0x0F	; 15
 168:	80 93 00 01 	sts	0x0100, r24
		return;
 16c:	05 c0       	rjmp	.+10     	; 0x178 <__vector_31+0x40>
	};
	UCSR1B &= ~(1<<UDRIE1);
 16e:	ea e9       	ldi	r30, 0x9A	; 154
 170:	f0 e0       	ldi	r31, 0x00	; 0
 172:	80 81       	ld	r24, Z
 174:	8f 7d       	andi	r24, 0xDF	; 223
 176:	80 83       	st	Z, r24
};
 178:	ff 91       	pop	r31
 17a:	ef 91       	pop	r30
 17c:	9f 91       	pop	r25
 17e:	8f 91       	pop	r24
 180:	0f 90       	pop	r0
 182:	0f be       	out	0x3f, r0	; 63
 184:	0f 90       	pop	r0
 186:	1f 90       	pop	r1
 188:	18 95       	reti

0000018a <uart_1_write>:
	return 0;
};
//****************************************************************************************
void uart_1_write(uint8_t byte)
{
	uint8_t wr = (uart_1_txwr+1) & UART_BUFEND_1_;
 18a:	e0 91 21 01 	lds	r30, 0x0121
 18e:	9e 2f       	mov	r25, r30
 190:	9f 5f       	subi	r25, 0xFF	; 255
 192:	9f 70       	andi	r25, 0x0F	; 15
	if(wr != uart_1_txrd)
 194:	20 91 00 01 	lds	r18, 0x0100
 198:	92 17       	cp	r25, r18
 19a:	59 f0       	breq	.+22     	; 0x1b2 <uart_1_write+0x28>
	{
		uart_1_tx[uart_1_txwr] = byte;
 19c:	f0 e0       	ldi	r31, 0x00	; 0
 19e:	ef 5f       	subi	r30, 0xFF	; 255
 1a0:	fe 4f       	sbci	r31, 0xFE	; 254
 1a2:	80 83       	st	Z, r24
		uart_1_txwr = wr;
 1a4:	90 93 21 01 	sts	0x0121, r25
		UCSR1B |= (1<<UDRIE1);
 1a8:	ea e9       	ldi	r30, 0x9A	; 154
 1aa:	f0 e0       	ldi	r31, 0x00	; 0
 1ac:	80 81       	ld	r24, Z
 1ae:	80 62       	ori	r24, 0x20	; 32
 1b0:	80 83       	st	Z, r24
 1b2:	08 95       	ret

000001b4 <uart_1_init>:
	};
};
//****************************************************************************************
void uart_1_init()
{
	UBRR1L = F_CPU/UART_BAUD_RATE_1_/16-1;
 1b4:	89 e1       	ldi	r24, 0x19	; 25
 1b6:	80 93 99 00 	sts	0x0099, r24
	UBRR1H = (F_CPU/UART_BAUD_RATE_1_/16-1)>>8;
 1ba:	10 92 98 00 	sts	0x0098, r1
	UCSR1B = (1<<RXCIE1)|(1<<RXEN1)|(1<<TXEN1);
 1be:	88 e9       	ldi	r24, 0x98	; 152
 1c0:	80 93 9a 00 	sts	0x009A, r24
 1c4:	08 95       	ret

000001c6 <__vector_16>:

//****************************************************************************************
// Timer0 overflow interrupt service routine
//****************************************************************************************
ISR (TIMER0_OVF_vect)
{
 1c6:	1f 92       	push	r1
 1c8:	0f 92       	push	r0
 1ca:	0f b6       	in	r0, 0x3f	; 63
 1cc:	0f 92       	push	r0
 1ce:	11 24       	eor	r1, r1
 1d0:	2f 93       	push	r18
 1d2:	3f 93       	push	r19
 1d4:	4f 93       	push	r20
 1d6:	5f 93       	push	r21
 1d8:	6f 93       	push	r22
 1da:	7f 93       	push	r23
 1dc:	8f 93       	push	r24
 1de:	9f 93       	push	r25
 1e0:	af 93       	push	r26
 1e2:	bf 93       	push	r27
 1e4:	ef 93       	push	r30
 1e6:	ff 93       	push	r31
	//---------------------------------------------------------------------------------------
	BUT_Debrief();
 1e8:	0e 94 2a 04 	call	0x854	; 0x854 <BUT_Debrief>

	//---------------------------------------------------------------------------------------
	return;
};
 1ec:	ff 91       	pop	r31
 1ee:	ef 91       	pop	r30
 1f0:	bf 91       	pop	r27
 1f2:	af 91       	pop	r26
 1f4:	9f 91       	pop	r25
 1f6:	8f 91       	pop	r24
 1f8:	7f 91       	pop	r23
 1fa:	6f 91       	pop	r22
 1fc:	5f 91       	pop	r21
 1fe:	4f 91       	pop	r20
 200:	3f 91       	pop	r19
 202:	2f 91       	pop	r18
 204:	0f 90       	pop	r0
 206:	0f be       	out	0x3f, r0	; 63
 208:	0f 90       	pop	r0
 20a:	1f 90       	pop	r1
 20c:	18 95       	reti

0000020e <__vector_14>:
//****************************************************************************************
// Timer1 overflow interrupt service routine
//****************************************************************************************
ISR (TIMER1_OVF_vect)
{
 20e:	1f 92       	push	r1
 210:	0f 92       	push	r0
 212:	0f b6       	in	r0, 0x3f	; 63
 214:	0f 92       	push	r0
 216:	11 24       	eor	r1, r1
 218:	8f 93       	push	r24
	// Reinitialize Timer1 value
	TCNT1H=0x0B;
 21a:	8b e0       	ldi	r24, 0x0B	; 11
 21c:	8d bd       	out	0x2d, r24	; 45
	TCNT1L=0xDC;
 21e:	8c ed       	ldi	r24, 0xDC	; 220
 220:	8c bd       	out	0x2c, r24	; 44
	//---------------------------------------------------------------------------------------

	//---------------------------------------------------------------------------------------
	return;
};
 222:	8f 91       	pop	r24
 224:	0f 90       	pop	r0
 226:	0f be       	out	0x3f, r0	; 63
 228:	0f 90       	pop	r0
 22a:	1f 90       	pop	r1
 22c:	18 95       	reti

0000022e <__vector_10>:
//****************************************************************************************
// Timer2 overflow interrupt service routine
//****************************************************************************************
ISR (TIMER2_OVF_vect)
{
 22e:	1f 92       	push	r1
 230:	0f 92       	push	r0
 232:	0f b6       	in	r0, 0x3f	; 63
 234:	0f 92       	push	r0
 236:	11 24       	eor	r1, r1
	//---------------------------------------------------------------------------------------

	//---------------------------------------------------------------------------------------
	return;
};
 238:	0f 90       	pop	r0
 23a:	0f be       	out	0x3f, r0	; 63
 23c:	0f 90       	pop	r0
 23e:	1f 90       	pop	r1
 240:	18 95       	reti

00000242 <__vector_29>:
//****************************************************************************************
// Timer3 overflow interrupt service routine
//****************************************************************************************
ISR (TIMER3_OVF_vect)
{
 242:	1f 92       	push	r1
 244:	0f 92       	push	r0
 246:	0f b6       	in	r0, 0x3f	; 63
 248:	0f 92       	push	r0
 24a:	11 24       	eor	r1, r1
	//---------------------------------------------------------------------------------------

	//---------------------------------------------------------------------------------------
	return;
};
 24c:	0f 90       	pop	r0
 24e:	0f be       	out	0x3f, r0	; 63
 250:	0f 90       	pop	r0
 252:	1f 90       	pop	r1
 254:	18 95       	reti

00000256 <init_mcu>:
	
// Input/Output Ports initialization
// Port A initialization
// Func7=Out Func6=Out Func5=Out Func4=Out Func3=Out Func2=Out Func1=In Func0=Out
// State7=0 State6=0 State5=0 State4=0 State3=0 State2=0 State1=T State0=0
PORTA=0x00;
 256:	1b ba       	out	0x1b, r1	; 27
DDRA=0xFD;
 258:	8d ef       	ldi	r24, 0xFD	; 253
 25a:	8a bb       	out	0x1a, r24	; 26

// Port B initialization
// Func7=Out Func6=Out Func5=Out Func4=Out Func3=Out Func2=In Func1=In Func0=In
// State7=0 State6=0 State5=0 State4=0 State3=0 State2=T State1=T State0=T
PORTB=0x00;
 25c:	18 ba       	out	0x18, r1	; 24
DDRB=0xF8;
 25e:	88 ef       	ldi	r24, 0xF8	; 248
 260:	87 bb       	out	0x17, r24	; 23

// Port C initialization
// Func7=Out Func6=Out Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
// State7=0 State6=1 State5=P State4=P State3=P State2=P State1=P State0=P
PORTC=0x7F;
 262:	8f e7       	ldi	r24, 0x7F	; 127
 264:	85 bb       	out	0x15, r24	; 21
DDRC=0xC0;
 266:	80 ec       	ldi	r24, 0xC0	; 192
 268:	84 bb       	out	0x14, r24	; 20

// Port D initialization
// Func7=Out Func6=In Func5=Out Func4=In Func3=In Func2=In Func1=In Func0=In
// State7=0 State6=T State5=0 State4=T State3=T State2=T State1=T State0=T
PORTD=0x00;
 26a:	12 ba       	out	0x12, r1	; 18
DDRD=0xA0;
 26c:	80 ea       	ldi	r24, 0xA0	; 160
 26e:	81 bb       	out	0x11, r24	; 17

// Port E initialization
// Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
// State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
PORTE=0x00;
 270:	13 b8       	out	0x03, r1	; 3
DDRE=0x00;
 272:	12 b8       	out	0x02, r1	; 2

// Port F initialization
// Func7=In Func6=Out Func5=In Func4=Out Func3=In Func2=In Func1=In Func0=In
// State7=P State6=0 State5=P State4=0 State3=T State2=T State1=T State0=T
PORTF=0xA0;
 274:	80 93 62 00 	sts	0x0062, r24
DDRF=0x50;
 278:	80 e5       	ldi	r24, 0x50	; 80
 27a:	80 93 61 00 	sts	0x0061, r24


// Port G initialization
// Func4=Out Func3=Out Func2=In Func1=Out Func0=Out
// State4=0 State3=0 State2=T State1=1 State0=1
PORTG=0x03;
 27e:	83 e0       	ldi	r24, 0x03	; 3
 280:	80 93 65 00 	sts	0x0065, r24
DDRG=0x1B;
 284:	8b e1       	ldi	r24, 0x1B	; 27
 286:	80 93 64 00 	sts	0x0064, r24
// Timer/Counter 0 initialization
// Clock source: System Clock
// Clock value: 62,500 kHz
// Mode: Normal top=0xFF
// OC0 output: Disconnected
ASSR=0x00;
 28a:	10 be       	out	0x30, r1	; 48
TCCR0=0x06;
 28c:	86 e0       	ldi	r24, 0x06	; 6
 28e:	83 bf       	out	0x33, r24	; 51
TCNT0=0x00;
 290:	12 be       	out	0x32, r1	; 50
OCR0=0x00;
 292:	11 be       	out	0x31, r1	; 49
// Timer1 Overflow Interrupt: On
// Input Capture Interrupt: Off
// Compare A Match Interrupt: Off
// Compare B Match Interrupt: Off
// Compare C Match Interrupt: Off
TCCR1A=0x00;
 294:	1f bc       	out	0x2f, r1	; 47
TCCR1B=0x04;
 296:	84 e0       	ldi	r24, 0x04	; 4
 298:	8e bd       	out	0x2e, r24	; 46
TCNT1H=0x0B;
 29a:	9b e0       	ldi	r25, 0x0B	; 11
 29c:	9d bd       	out	0x2d, r25	; 45
TCNT1L=0xDC;
 29e:	9c ed       	ldi	r25, 0xDC	; 220
 2a0:	9c bd       	out	0x2c, r25	; 44
ICR1H=0x00;
 2a2:	17 bc       	out	0x27, r1	; 39
ICR1L=0x00;
 2a4:	16 bc       	out	0x26, r1	; 38
OCR1AH=0x00;
 2a6:	1b bc       	out	0x2b, r1	; 43
OCR1AL=0x00;
 2a8:	1a bc       	out	0x2a, r1	; 42
OCR1BH=0x00;
 2aa:	19 bc       	out	0x29, r1	; 41
OCR1BL=0x00;
 2ac:	18 bc       	out	0x28, r1	; 40
OCR1CH=0x00;
 2ae:	10 92 79 00 	sts	0x0079, r1
OCR1CL=0x00;
 2b2:	10 92 78 00 	sts	0x0078, r1
// Clock value: 16000,000 kHz
// Mode: Fast PWM top=0xFF
// OC2 output: Non-Inverted PWM
//TCCR2=0x69;

TCCR2=0x00;
 2b6:	15 bc       	out	0x25, r1	; 37
TCNT2=0x00;
 2b8:	14 bc       	out	0x24, r1	; 36
OCR2=0x00;
 2ba:	13 bc       	out	0x23, r1	; 35
// Compare A Match Interrupt: Off
// Compare B Match Interrupt: Off
// Compare C Match Interrupt: Off
//TCCR3A=0x00;
//TCCR3B=0x01;
TCCR3A=0x00;
 2bc:	10 92 8b 00 	sts	0x008B, r1
TCCR3B=0x00;
 2c0:	10 92 8a 00 	sts	0x008A, r1
TCNT3H=0x00;
 2c4:	10 92 89 00 	sts	0x0089, r1
TCNT3L=0x00;
 2c8:	10 92 88 00 	sts	0x0088, r1
ICR3H=0x00;
 2cc:	10 92 81 00 	sts	0x0081, r1
ICR3L=0x00;
 2d0:	10 92 80 00 	sts	0x0080, r1
OCR3AH=0x00;
 2d4:	10 92 87 00 	sts	0x0087, r1
OCR3AL=0x00;
 2d8:	10 92 86 00 	sts	0x0086, r1
OCR3BH=0x00;
 2dc:	10 92 85 00 	sts	0x0085, r1
OCR3BL=0x00;
 2e0:	10 92 84 00 	sts	0x0084, r1
OCR3CH=0x00;
 2e4:	10 92 83 00 	sts	0x0083, r1
OCR3CL=0x00;
 2e8:	10 92 82 00 	sts	0x0082, r1
// INT3: Off
// INT4: Off
// INT5: Off
// INT6: Off
// INT7: Off
EICRA=0x00;
 2ec:	10 92 6a 00 	sts	0x006A, r1
EICRB=0x00;
 2f0:	1a be       	out	0x3a, r1	; 58
EIMSK=0x00;
 2f2:	19 be       	out	0x39, r1	; 57

// Timer(s)/Counter(s) Interrupt(s) initialization
TIMSK=0x05;//TIMSK=0xC5;
 2f4:	95 e0       	ldi	r25, 0x05	; 5
 2f6:	97 bf       	out	0x37, r25	; 55
ETIMSK=0x04;
 2f8:	80 93 7d 00 	sts	0x007D, r24

// USART0 initialization
// USART0 disabled
UCSR0B=0x00;
 2fc:	1a b8       	out	0x0a, r1	; 10

// USART1 initialization
// USART1 disabled
UCSR1B=0x00;
 2fe:	10 92 9a 00 	sts	0x009A, r1

// Analog Comparator initialization
// Analog Comparator: Off
// Analog Comparator Input Capture by Timer/Counter 1: Off
ACSR=0x80;
 302:	80 e8       	ldi	r24, 0x80	; 128
 304:	88 b9       	out	0x08, r24	; 8
SFIOR=0x00;
 306:	10 bc       	out	0x20, r1	; 32

// ADC initialization
// ADC disabled
ADCSRA=0x00;
 308:	16 b8       	out	0x06, r1	; 6

// SPI initialization
// SPI disabled
SPCR=0x00;
 30a:	1d b8       	out	0x0d, r1	; 13

// TWI initialization
// TWI disabled
TWCR=0x00;
 30c:	10 92 74 00 	sts	0x0074, r1
 310:	08 95       	ret

00000312 <main>:
{
	//---------------------------------------------------------------------------------------
	// Declare your local variables here
	unsigned int cnt = 0;
	//---------------------------------------------------------------------------------------
	init_mcu();
 312:	0e 94 2b 01 	call	0x256	; 0x256 <init_mcu>
	//---------------------------------------------------------------------------------------
	rs485_0_init();
 316:	0e 94 1a 04 	call	0x834	; 0x834 <rs485_0_init>
	uart_1_init();
 31a:	0e 94 da 00 	call	0x1b4	; 0x1b4 <uart_1_init>
	i2c_lcd_init();
 31e:	0e 94 9e 02 	call	0x53c	; 0x53c <i2c_lcd_init>
	BUT_Init();
 322:	0e 94 23 04 	call	0x846	; 0x846 <BUT_Init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 326:	8f e3       	ldi	r24, 0x3F	; 63
 328:	9c e9       	ldi	r25, 0x9C	; 156
 32a:	01 97       	sbiw	r24, 0x01	; 1
 32c:	f1 f7       	brne	.-4      	; 0x32a <main+0x18>
 32e:	00 c0       	rjmp	.+0      	; 0x330 <main+0x1e>
 330:	00 00       	nop
	_delay_ms(10);
	//---------------------------------------------------------------------------------------
	asm("sei");
 332:	78 94       	sei
		SET_OUT_4
		CLR_OUT_4
		
		SET_OUT_5
		CLR_OUT_5
		SET_OUT_6
 334:	c5 e6       	ldi	r28, 0x65	; 101
 336:	d0 e0       	ldi	r29, 0x00	; 0
		SET_OUT_7
		CLR_OUT_7
		SET_OUT_8
		CLR_OUT_8
		
		SET_OUT_9
 338:	02 e6       	ldi	r16, 0x62	; 98
 33a:	10 e0       	ldi	r17, 0x00	; 0
	asm("sei");
	//---------------------------------------------------------------------------------------
    while(1)
    {
        //TODO:: Please write your application code
		SET_OUT_1
 33c:	c3 9a       	sbi	0x18, 3	; 24
		CLR_OUT_1
 33e:	c3 98       	cbi	0x18, 3	; 24
		SET_OUT_2
 340:	c4 9a       	sbi	0x18, 4	; 24
		CLR_OUT_2
 342:	c4 98       	cbi	0x18, 4	; 24
		SET_OUT_3
 344:	c5 9a       	sbi	0x18, 5	; 24
		CLR_OUT_3
 346:	c5 98       	cbi	0x18, 5	; 24
		SET_OUT_4
 348:	c6 9a       	sbi	0x18, 6	; 24
		CLR_OUT_4
 34a:	c6 98       	cbi	0x18, 6	; 24
		
		SET_OUT_5
 34c:	c7 9a       	sbi	0x18, 7	; 24
		CLR_OUT_5
 34e:	c7 98       	cbi	0x18, 7	; 24
		SET_OUT_6
 350:	88 81       	ld	r24, Y
 352:	88 60       	ori	r24, 0x08	; 8
 354:	88 83       	st	Y, r24
		CLR_OUT_6
 356:	88 81       	ld	r24, Y
 358:	87 7f       	andi	r24, 0xF7	; 247
 35a:	88 83       	st	Y, r24
		SET_OUT_7
 35c:	88 81       	ld	r24, Y
 35e:	80 61       	ori	r24, 0x10	; 16
 360:	88 83       	st	Y, r24
		CLR_OUT_7
 362:	88 81       	ld	r24, Y
 364:	8f 7e       	andi	r24, 0xEF	; 239
 366:	88 83       	st	Y, r24
		SET_OUT_8
 368:	af 9a       	sbi	0x15, 7	; 21
		CLR_OUT_8
 36a:	af 98       	cbi	0x15, 7	; 21
		
		SET_OUT_9
 36c:	f8 01       	movw	r30, r16
 36e:	80 81       	ld	r24, Z
 370:	80 61       	ori	r24, 0x10	; 16
 372:	80 83       	st	Z, r24
		CLR_OUT_9
 374:	80 81       	ld	r24, Z
 376:	8f 7e       	andi	r24, 0xEF	; 239
 378:	80 83       	st	Z, r24
		SET_OUT_10
 37a:	95 9a       	sbi	0x12, 5	; 18
		CLR_OUT_10
 37c:	95 98       	cbi	0x12, 5	; 18
		SET_OUT_11
 37e:	d8 9a       	sbi	0x1b, 0	; 27
		CLR_OUT_11
 380:	d8 98       	cbi	0x1b, 0	; 27
		SET_OUT_12
 382:	97 9a       	sbi	0x12, 7	; 18
		CLR_OUT_12
 384:	97 98       	cbi	0x12, 7	; 18
		
		cnt=read_adc(A_IN_1);
 386:	80 e0       	ldi	r24, 0x00	; 0
 388:	0e 94 63 00 	call	0xc6	; 0xc6 <read_adc>
 		Main_menu_i2c (cnt);
 38c:	0e 94 9b 03 	call	0x736	; 0x736 <Main_menu_i2c>
		cnt=read_adc(A_IN_2);
 390:	81 e0       	ldi	r24, 0x01	; 1
 392:	0e 94 63 00 	call	0xc6	; 0xc6 <read_adc>
 		rs485_0_write (cnt);
 396:	0e 94 08 04 	call	0x810	; 0x810 <rs485_0_write>
		cnt=read_adc(A_IN_3);
 39a:	82 e0       	ldi	r24, 0x02	; 2
 39c:	0e 94 63 00 	call	0xc6	; 0xc6 <read_adc>
 		uart_1_write (cnt);
 3a0:	0e 94 c5 00 	call	0x18a	; 0x18a <uart_1_write>
 3a4:	ff ef       	ldi	r31, 0xFF	; 255
 3a6:	21 ee       	ldi	r18, 0xE1	; 225
 3a8:	84 e0       	ldi	r24, 0x04	; 4
 3aa:	f1 50       	subi	r31, 0x01	; 1
 3ac:	20 40       	sbci	r18, 0x00	; 0
 3ae:	80 40       	sbci	r24, 0x00	; 0
 3b0:	e1 f7       	brne	.-8      	; 0x3aa <main+0x98>
 3b2:	00 c0       	rjmp	.+0      	; 0x3b4 <main+0xa2>
 3b4:	00 00       	nop
 3b6:	c2 cf       	rjmp	.-124    	; 0x33c <main+0x2a>

000003b8 <i2c_init>:
*   Parameters :    нет
*   Purpose :       Инициализация i2c
****************************************************************************/
void i2c_init(void)
{
	(PORT_I2C&=~(1<<SDA));
 3b8:	90 98       	cbi	0x12, 0	; 18
	(PORT_I2C&=~(1<<SCL));
 3ba:	91 98       	cbi	0x12, 1	; 18
	(DDR_I2C&=~(1<<SDA));
 3bc:	88 98       	cbi	0x11, 0	; 17
	(DDR_I2C&=~(1<<SCL));
 3be:	89 98       	cbi	0x11, 1	; 17
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3c0:	85 e0       	ldi	r24, 0x05	; 5
 3c2:	8a 95       	dec	r24
 3c4:	f1 f7       	brne	.-4      	; 0x3c2 <i2c_init+0xa>
 3c6:	00 00       	nop
 3c8:	08 95       	ret

000003ca <i2c_start>:
*   Parameters :    нет
*   Purpose :       Старт i2c
****************************************************************************/
void i2c_start(void)         
{ 
	(DDR_I2C|=(1<<SDA)); _delay_us(pause);
 3ca:	88 9a       	sbi	0x11, 0	; 17
 3cc:	85 e0       	ldi	r24, 0x05	; 5
 3ce:	8a 95       	dec	r24
 3d0:	f1 f7       	brne	.-4      	; 0x3ce <i2c_start+0x4>
 3d2:	00 00       	nop
	(DDR_I2C|=(1<<SCL)); _delay_us(pause); 
 3d4:	89 9a       	sbi	0x11, 1	; 17
 3d6:	85 e0       	ldi	r24, 0x05	; 5
 3d8:	8a 95       	dec	r24
 3da:	f1 f7       	brne	.-4      	; 0x3d8 <i2c_start+0xe>
 3dc:	00 00       	nop
 3de:	08 95       	ret

000003e0 <i2c_write>:
*   Returns :       нет
*   Parameters :    Данныэ на отправку
*   Purpose :       Передача 1го байта по i2c
****************************************************************************/
void i2c_write(unsigned char byt)  
{ 
 3e0:	27 e0       	ldi	r18, 0x07	; 7
 3e2:	30 e0       	ldi	r19, 0x00	; 0
    unsigned char k;                       
    for (k = 0; k < 8; k++)    
    { 
		(DDR_I2C|=(1<<SCL));
        if(0x01 & (byt >> (7 - k)))
 3e4:	90 e0       	ldi	r25, 0x00	; 0
void i2c_write(unsigned char byt)  
{ 
    unsigned char k;                       
    for (k = 0; k < 8; k++)    
    { 
		(DDR_I2C|=(1<<SCL));
 3e6:	89 9a       	sbi	0x11, 1	; 17
        if(0x01 & (byt >> (7 - k)))
 3e8:	ac 01       	movw	r20, r24
 3ea:	02 2e       	mov	r0, r18
 3ec:	02 c0       	rjmp	.+4      	; 0x3f2 <i2c_write+0x12>
 3ee:	55 95       	asr	r21
 3f0:	47 95       	ror	r20
 3f2:	0a 94       	dec	r0
 3f4:	e2 f7       	brpl	.-8      	; 0x3ee <i2c_write+0xe>
 3f6:	40 ff       	sbrs	r20, 0
 3f8:	02 c0       	rjmp	.+4      	; 0x3fe <i2c_write+0x1e>
		{
			(DDR_I2C&=~(1<<SDA));
 3fa:	88 98       	cbi	0x11, 0	; 17
 3fc:	01 c0       	rjmp	.+2      	; 0x400 <i2c_write+0x20>
		}else
		{
			(DDR_I2C|=(1<<SDA));
 3fe:	88 9a       	sbi	0x11, 0	; 17
 400:	45 e0       	ldi	r20, 0x05	; 5
 402:	4a 95       	dec	r20
 404:	f1 f7       	brne	.-4      	; 0x402 <i2c_write+0x22>
 406:	00 00       	nop
		};
	    _delay_us(pause);   
        (DDR_I2C&=~(1<<SCL));
 408:	89 98       	cbi	0x11, 1	; 17
 40a:	45 e0       	ldi	r20, 0x05	; 5
 40c:	4a 95       	dec	r20
 40e:	f1 f7       	brne	.-4      	; 0x40c <i2c_write+0x2c>
 410:	00 00       	nop
 412:	21 50       	subi	r18, 0x01	; 1
 414:	31 09       	sbc	r19, r1
 416:	38 f7       	brcc	.-50     	; 0x3e6 <i2c_write+0x6>
		_delay_us(pause);             
    };
	(DDR_I2C&=~(1<<SDA));
 418:	88 98       	cbi	0x11, 0	; 17
	(DDR_I2C|=(1<<SCL));
 41a:	89 9a       	sbi	0x11, 1	; 17
 41c:	85 e0       	ldi	r24, 0x05	; 5
 41e:	8a 95       	dec	r24
 420:	f1 f7       	brne	.-4      	; 0x41e <i2c_write+0x3e>
 422:	00 00       	nop
	_delay_us(pause);
	(DDR_I2C&=~(1<<SCL));
 424:	89 98       	cbi	0x11, 1	; 17
 426:	45 e0       	ldi	r20, 0x05	; 5
 428:	4a 95       	dec	r20
 42a:	f1 f7       	brne	.-4      	; 0x428 <i2c_write+0x48>
 42c:	00 00       	nop
	_delay_us(pause);
	(DDR_I2C|=(1<<SCL));
 42e:	89 9a       	sbi	0x11, 1	; 17
 430:	08 95       	ret

00000432 <i2c_stop>:
*   Parameters :    нет
*   Purpose :       Стоп i2c
****************************************************************************/
void i2c_stop(void)            
{ 
    (DDR_I2C|=(1<<SDA)); _delay_us(pause);   
 432:	88 9a       	sbi	0x11, 0	; 17
 434:	85 e0       	ldi	r24, 0x05	; 5
 436:	8a 95       	dec	r24
 438:	f1 f7       	brne	.-4      	; 0x436 <i2c_stop+0x4>
 43a:	00 00       	nop
    (DDR_I2C&=~(1<<SCL)); _delay_us(pause);           
 43c:	89 98       	cbi	0x11, 1	; 17
 43e:	85 e0       	ldi	r24, 0x05	; 5
 440:	8a 95       	dec	r24
 442:	f1 f7       	brne	.-4      	; 0x440 <i2c_stop+0xe>
 444:	00 00       	nop
    (DDR_I2C&=~(1<<SDA)); _delay_us(pause);                                 
 446:	88 98       	cbi	0x11, 0	; 17
 448:	85 e0       	ldi	r24, 0x05	; 5
 44a:	8a 95       	dec	r24
 44c:	f1 f7       	brne	.-4      	; 0x44a <i2c_stop+0x18>
 44e:	00 00       	nop
 450:	08 95       	ret

00000452 <i2c_acknowledge>:
    return (check);      
};

void i2c_acknowledge(void)
{
	(DDR_I2C&=~(1<<SDA));
 452:	88 98       	cbi	0x11, 0	; 17
	//delayMicroseconds(1);
	(DDR_I2C|=(1<<SCL));
 454:	89 9a       	sbi	0x11, 1	; 17
 456:	85 e0       	ldi	r24, 0x05	; 5
 458:	8a 95       	dec	r24
 45a:	f1 f7       	brne	.-4      	; 0x458 <i2c_acknowledge+0x6>
 45c:	00 00       	nop
	_delay_us(pause);
	(DDR_I2C&=~(1<<SCL));
 45e:	89 98       	cbi	0x11, 1	; 17
 460:	08 95       	ret

00000462 <PCF8574_Write>:

#include "i2c_lcd.h"

//****************************************************************************************
void PCF8574_Write(unsigned char data)
{
 462:	cf 93       	push	r28
 464:	c8 2f       	mov	r28, r24
	i2c_start();              //         |-[S]-|  ;Start Condition
 466:	0e 94 e5 01 	call	0x3ca	; 0x3ca <i2c_start>
	i2c_write(PCF8574_ADDR | I2C_WRITE);    //         |---Slave address (PCF8574)--[A2=0,A1=0,A0=0]---|   +    |-R/W-|
 46a:	8e e4       	ldi	r24, 0x4E	; 78
 46c:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <i2c_write>
	i2c_acknowledge();        //         |-[A]-|  ;Active LOW
 470:	0e 94 29 02 	call	0x452	; 0x452 <i2c_acknowledge>
	i2c_write(data);          //         |-------------------data to port-----------------------|
 474:	8c 2f       	mov	r24, r28
 476:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <i2c_write>
	i2c_acknowledge();        //         |-[A]-|  ;Active LOW
 47a:	0e 94 29 02 	call	0x452	; 0x452 <i2c_acknowledge>
	i2c_stop();               //         |-[P]-|  ;Stop Condition
 47e:	0e 94 19 02 	call	0x432	; 0x432 <i2c_stop>
};
 482:	cf 91       	pop	r28
 484:	08 95       	ret

00000486 <send_i2c_lcd_byte>:
//***************************************************************************************
//Procedure sending LCD byte
//Input: Byte, Kommand/Symbol data
//***************************************************************************************
void send_i2c_lcd_byte(unsigned char lcd_data, unsigned char rs_status ) //bool lcd_command,
{
 486:	df 92       	push	r13
 488:	ef 92       	push	r14
 48a:	ff 92       	push	r15
 48c:	0f 93       	push	r16
 48e:	1f 93       	push	r17
 490:	cf 93       	push	r28
 492:	df 93       	push	r29
	//lcd_data=0x08;
	//---------------------------------------------------------------------------------------
	rs_status=rs_status*2;
 494:	f6 2e       	mov	r15, r22
 496:	ff 0c       	add	r15, r15
	PCF8574_Write(rs_status|E_L|((lcd_data<<1)&0xE0)|((lcd_data>>3)&0x10));
 498:	08 2f       	mov	r16, r24
 49a:	10 e0       	ldi	r17, 0x00	; 0
 49c:	e8 01       	movw	r28, r16
 49e:	cc 0f       	add	r28, r28
 4a0:	dd 1f       	adc	r29, r29
 4a2:	dc 2e       	mov	r13, r28
 4a4:	90 ee       	ldi	r25, 0xE0	; 224
 4a6:	d9 22       	and	r13, r25
 4a8:	86 95       	lsr	r24
 4aa:	86 95       	lsr	r24
 4ac:	86 95       	lsr	r24
 4ae:	68 94       	set
 4b0:	ee 24       	eor	r14, r14
 4b2:	e4 f8       	bld	r14, 4
 4b4:	e8 22       	and	r14, r24
 4b6:	1e 2d       	mov	r17, r14
 4b8:	1f 29       	or	r17, r15
 4ba:	1d 29       	or	r17, r13
 4bc:	81 2f       	mov	r24, r17
 4be:	0e 94 31 02 	call	0x462	; 0x462 <PCF8574_Write>
 4c2:	85 e3       	ldi	r24, 0x35	; 53
 4c4:	8a 95       	dec	r24
 4c6:	f1 f7       	brne	.-4      	; 0x4c4 <send_i2c_lcd_byte+0x3e>
 4c8:	00 00       	nop
	_delay_us(10);
	PCF8574_Write(rs_status|E_H|((lcd_data<<1)&0xE0)|((lcd_data>>3)&0x10));
 4ca:	df 2d       	mov	r29, r15
 4cc:	d8 60       	ori	r29, 0x08	; 8
 4ce:	8d 2d       	mov	r24, r13
 4d0:	8d 2b       	or	r24, r29
 4d2:	8e 29       	or	r24, r14
 4d4:	0e 94 31 02 	call	0x462	; 0x462 <PCF8574_Write>
 4d8:	95 e3       	ldi	r25, 0x35	; 53
 4da:	9a 95       	dec	r25
 4dc:	f1 f7       	brne	.-4      	; 0x4da <send_i2c_lcd_byte+0x54>
 4de:	00 00       	nop
	_delay_us(10);
	PCF8574_Write(rs_status|E_L|((lcd_data<<1)&0xE0)|((lcd_data>>3)&0x10));
 4e0:	81 2f       	mov	r24, r17
 4e2:	0e 94 31 02 	call	0x462	; 0x462 <PCF8574_Write>
 4e6:	85 e3       	ldi	r24, 0x35	; 53
 4e8:	8a 95       	dec	r24
 4ea:	f1 f7       	brne	.-4      	; 0x4e8 <send_i2c_lcd_byte+0x62>
 4ec:	00 00       	nop
	_delay_us(10);
	PCF8574_Write(rs_status|E_L|((lcd_data<<5)&0xE0)|((lcd_data<<1)&0x10));
 4ee:	02 95       	swap	r16
 4f0:	00 0f       	add	r16, r16
 4f2:	00 7e       	andi	r16, 0xE0	; 224
 4f4:	c0 71       	andi	r28, 0x10	; 16
 4f6:	f0 2a       	or	r15, r16
 4f8:	fc 2a       	or	r15, r28
 4fa:	8f 2d       	mov	r24, r15
 4fc:	0e 94 31 02 	call	0x462	; 0x462 <PCF8574_Write>
 500:	95 e3       	ldi	r25, 0x35	; 53
 502:	9a 95       	dec	r25
 504:	f1 f7       	brne	.-4      	; 0x502 <send_i2c_lcd_byte+0x7c>
 506:	00 00       	nop
	_delay_us(10);
	PCF8574_Write(rs_status|E_H|((lcd_data<<5)&0xE0)|((lcd_data<<1)&0x10));
 508:	8d 2f       	mov	r24, r29
 50a:	8c 2b       	or	r24, r28
 50c:	80 2b       	or	r24, r16
 50e:	0e 94 31 02 	call	0x462	; 0x462 <PCF8574_Write>
 512:	85 e3       	ldi	r24, 0x35	; 53
 514:	8a 95       	dec	r24
 516:	f1 f7       	brne	.-4      	; 0x514 <send_i2c_lcd_byte+0x8e>
 518:	00 00       	nop
	_delay_us(10);
	PCF8574_Write(rs_status|E_L|((lcd_data<<5)&0xE0)|((lcd_data<<1)&0x10));
 51a:	8f 2d       	mov	r24, r15
 51c:	0e 94 31 02 	call	0x462	; 0x462 <PCF8574_Write>
 520:	87 ec       	ldi	r24, 0xC7	; 199
 522:	90 e0       	ldi	r25, 0x00	; 0
 524:	01 97       	sbiw	r24, 0x01	; 1
 526:	f1 f7       	brne	.-4      	; 0x524 <send_i2c_lcd_byte+0x9e>
 528:	00 c0       	rjmp	.+0      	; 0x52a <send_i2c_lcd_byte+0xa4>
 52a:	00 00       	nop

	
	
	
	
};
 52c:	df 91       	pop	r29
 52e:	cf 91       	pop	r28
 530:	1f 91       	pop	r17
 532:	0f 91       	pop	r16
 534:	ff 90       	pop	r15
 536:	ef 90       	pop	r14
 538:	df 90       	pop	r13
 53a:	08 95       	ret

0000053c <i2c_lcd_init>:
void i2c_lcd_init(void)
{
	//---------------------------------------------------------------------------------------
	//init i2c
	//---------------------------------------------------------------------------------------
	i2c_init();
 53c:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <i2c_init>
	//---------------------------------------------------------------------------------------
	PCF8574_Write(0x00);//E = 0 RS= 0 R/W = 0
 540:	80 e0       	ldi	r24, 0x00	; 0
 542:	0e 94 31 02 	call	0x462	; 0x462 <PCF8574_Write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 546:	8f e9       	ldi	r24, 0x9F	; 159
 548:	9f e0       	ldi	r25, 0x0F	; 15
 54a:	01 97       	sbiw	r24, 0x01	; 1
 54c:	f1 f7       	brne	.-4      	; 0x54a <i2c_lcd_init+0xe>
 54e:	00 c0       	rjmp	.+0      	; 0x550 <i2c_lcd_init+0x14>
 550:	00 00       	nop
	_delay_ms(1);
	//---------------------------------------------------------------------------------------
	//Function Set 3 ????? ?????? D4-D7 ????????????? bus
	PCF8574_Write(0x60);      //1    0x20 + 0x03
 552:	80 e6       	ldi	r24, 0x60	; 96
 554:	0e 94 31 02 	call	0x462	; 0x462 <PCF8574_Write>
 558:	8f e9       	ldi	r24, 0x9F	; 159
 55a:	9f e0       	ldi	r25, 0x0F	; 15
 55c:	01 97       	sbiw	r24, 0x01	; 1
 55e:	f1 f7       	brne	.-4      	; 0x55c <i2c_lcd_init+0x20>
 560:	00 c0       	rjmp	.+0      	; 0x562 <i2c_lcd_init+0x26>
 562:	00 00       	nop
	_delay_ms(1);
	PCF8574_Write(0x40);
 564:	80 e4       	ldi	r24, 0x40	; 64
 566:	0e 94 31 02 	call	0x462	; 0x462 <PCF8574_Write>
 56a:	8f e9       	ldi	r24, 0x9F	; 159
 56c:	9f e0       	ldi	r25, 0x0F	; 15
 56e:	01 97       	sbiw	r24, 0x01	; 1
 570:	f1 f7       	brne	.-4      	; 0x56e <i2c_lcd_init+0x32>
 572:	00 c0       	rjmp	.+0      	; 0x574 <i2c_lcd_init+0x38>
 574:	00 00       	nop
	_delay_ms(1);
	PCF8574_Write(E_H|0x40);     //2
 576:	88 e4       	ldi	r24, 0x48	; 72
 578:	0e 94 31 02 	call	0x462	; 0x462 <PCF8574_Write>
 57c:	8f e9       	ldi	r24, 0x9F	; 159
 57e:	9f e0       	ldi	r25, 0x0F	; 15
 580:	01 97       	sbiw	r24, 0x01	; 1
 582:	f1 f7       	brne	.-4      	; 0x580 <i2c_lcd_init+0x44>
 584:	00 c0       	rjmp	.+0      	; 0x586 <i2c_lcd_init+0x4a>
 586:	00 00       	nop
	_delay_ms(1);
	PCF8574_Write(E_L|0x40);
 588:	80 e4       	ldi	r24, 0x40	; 64
 58a:	0e 94 31 02 	call	0x462	; 0x462 <PCF8574_Write>
 58e:	8f e9       	ldi	r24, 0x9F	; 159
 590:	9f e0       	ldi	r25, 0x0F	; 15
 592:	01 97       	sbiw	r24, 0x01	; 1
 594:	f1 f7       	brne	.-4      	; 0x592 <i2c_lcd_init+0x56>
 596:	00 c0       	rjmp	.+0      	; 0x598 <i2c_lcd_init+0x5c>
 598:	00 00       	nop
	_delay_ms(1);
	//---------------------------------------------------------------------------------------
	send_i2c_lcd_byte(0x28,lcd_kom);			//2 lines, 5*8 pixels, 8bit data
 59a:	60 e0       	ldi	r22, 0x00	; 0
 59c:	88 e2       	ldi	r24, 0x28	; 40
 59e:	0e 94 43 02 	call	0x486	; 0x486 <send_i2c_lcd_byte>
	send_i2c_lcd_byte(0x0C,lcd_kom);			//screen enable,
 5a2:	60 e0       	ldi	r22, 0x00	; 0
 5a4:	8c e0       	ldi	r24, 0x0C	; 12
 5a6:	0e 94 43 02 	call	0x486	; 0x486 <send_i2c_lcd_byte>
	send_i2c_lcd_byte(0x06,lcd_kom);			//auto shift left enable
 5aa:	60 e0       	ldi	r22, 0x00	; 0
 5ac:	86 e0       	ldi	r24, 0x06	; 6
 5ae:	0e 94 43 02 	call	0x486	; 0x486 <send_i2c_lcd_byte>
	send_i2c_lcd_byte(0x01,lcd_kom);			//0x01 clear screen
 5b2:	60 e0       	ldi	r22, 0x00	; 0
 5b4:	81 e0       	ldi	r24, 0x01	; 1
 5b6:	0e 94 43 02 	call	0x486	; 0x486 <send_i2c_lcd_byte>
 5ba:	9f ef       	ldi	r25, 0xFF	; 255
 5bc:	29 ef       	ldi	r18, 0xF9	; 249
 5be:	80 e0       	ldi	r24, 0x00	; 0
 5c0:	91 50       	subi	r25, 0x01	; 1
 5c2:	20 40       	sbci	r18, 0x00	; 0
 5c4:	80 40       	sbci	r24, 0x00	; 0
 5c6:	e1 f7       	brne	.-8      	; 0x5c0 <i2c_lcd_init+0x84>
 5c8:	00 c0       	rjmp	.+0      	; 0x5ca <i2c_lcd_init+0x8e>
 5ca:	00 00       	nop
 5cc:	08 95       	ret

000005ce <send_i2c_lcd_symbol>:
//Input: Symbol
//***************************************************************************************
void send_i2c_lcd_symbol(unsigned char temp_symbol)
{
	//---------------------------------------------------------------------------------------
	send_i2c_lcd_byte(temp_symbol,lcd_sym);
 5ce:	61 e0       	ldi	r22, 0x01	; 1
 5d0:	0e 94 43 02 	call	0x486	; 0x486 <send_i2c_lcd_byte>
 5d4:	08 95       	ret

000005d6 <set_i2c_lcd_position>:
//Input: Line(1,2), Position(1..16)
//***************************************************************************************
void set_i2c_lcd_position(unsigned char temp_line, unsigned char temp_pos)
{
	//---------------------------------------------------------------------------------------
	switch (temp_line)
 5d6:	82 30       	cpi	r24, 0x02	; 2
 5d8:	61 f0       	breq	.+24     	; 0x5f2 <set_i2c_lcd_position+0x1c>
 5da:	18 f4       	brcc	.+6      	; 0x5e2 <set_i2c_lcd_position+0xc>
 5dc:	81 30       	cpi	r24, 0x01	; 1
 5de:	89 f4       	brne	.+34     	; 0x602 <set_i2c_lcd_position+0x2c>
 5e0:	05 c0       	rjmp	.+10     	; 0x5ec <set_i2c_lcd_position+0x16>
 5e2:	83 30       	cpi	r24, 0x03	; 3
 5e4:	49 f0       	breq	.+18     	; 0x5f8 <set_i2c_lcd_position+0x22>
 5e6:	84 30       	cpi	r24, 0x04	; 4
 5e8:	61 f4       	brne	.+24     	; 0x602 <set_i2c_lcd_position+0x2c>
 5ea:	09 c0       	rjmp	.+18     	; 0x5fe <set_i2c_lcd_position+0x28>
	{
		//---------------------------------------------------------------------------------------
		case 0x01 :
			temp_line=0x80+temp_pos-1;
 5ec:	86 2f       	mov	r24, r22
 5ee:	81 58       	subi	r24, 0x81	; 129
		break;
 5f0:	08 c0       	rjmp	.+16     	; 0x602 <set_i2c_lcd_position+0x2c>
		case 0x02 :
			temp_line=0xC0+temp_pos-1;
 5f2:	86 2f       	mov	r24, r22
 5f4:	81 54       	subi	r24, 0x41	; 65
		break;
 5f6:	05 c0       	rjmp	.+10     	; 0x602 <set_i2c_lcd_position+0x2c>
		case 0x03 :
			temp_line=0x94+temp_pos-1;
 5f8:	86 2f       	mov	r24, r22
 5fa:	8d 56       	subi	r24, 0x6D	; 109
		break;
 5fc:	02 c0       	rjmp	.+4      	; 0x602 <set_i2c_lcd_position+0x2c>
		case 0x04 :
			temp_line=0xd4+temp_pos-1;
 5fe:	86 2f       	mov	r24, r22
 600:	8d 52       	subi	r24, 0x2D	; 45
		break;
		default :;
		//---------------------------------------------------------------------------------------
	};   //switch (temp_line)
	//---------------------------------------------------------------------------------------
	send_i2c_lcd_byte(temp_line,lcd_kom);
 602:	60 e0       	ldi	r22, 0x00	; 0
 604:	0e 94 43 02 	call	0x486	; 0x486 <send_i2c_lcd_byte>
 608:	08 95       	ret

0000060a <send_i2c_lcd_string_P>:
//***************************************************************************************
//Procedure send symbol string to LCD from FLASH
//Input: Symbol string
//***************************************************************************************
void send_i2c_lcd_string_P(const char *string)
{
 60a:	cf 93       	push	r28
 60c:	df 93       	push	r29
 60e:	ec 01       	movw	r28, r24
	//---------------------------------------------------------------------------------------
	while (pgm_read_byte(string)!='\0')
 610:	fe 01       	movw	r30, r28
 612:	24 91       	lpm	r18, Z
 614:	22 23       	and	r18, r18
 616:	59 f0       	breq	.+22     	; 0x62e <send_i2c_lcd_string_P+0x24>
	{
		//---------------------------------------------------------------------------------------
		send_i2c_lcd_byte(pgm_read_byte(string),lcd_sym);
 618:	fc 01       	movw	r30, r24
 61a:	84 91       	lpm	r24, Z
 61c:	61 e0       	ldi	r22, 0x01	; 1
 61e:	0e 94 43 02 	call	0x486	; 0x486 <send_i2c_lcd_byte>
		string++;
 622:	21 96       	adiw	r28, 0x01	; 1
//Input: Symbol string
//***************************************************************************************
void send_i2c_lcd_string_P(const char *string)
{
	//---------------------------------------------------------------------------------------
	while (pgm_read_byte(string)!='\0')
 624:	ce 01       	movw	r24, r28
 626:	fe 01       	movw	r30, r28
 628:	24 91       	lpm	r18, Z
 62a:	21 11       	cpse	r18, r1
 62c:	f5 cf       	rjmp	.-22     	; 0x618 <send_i2c_lcd_string_P+0xe>
		send_i2c_lcd_byte(pgm_read_byte(string),lcd_sym);
		string++;
		//---------------------------------------------------------------------------------------
	};
	//---------------------------------------------------------------------------------------
 };
 62e:	df 91       	pop	r29
 630:	cf 91       	pop	r28
 632:	08 95       	ret

00000634 <detect_i2c_symbol>:
//Output: Symbol
//***************************************************************************************
unsigned char detect_i2c_symbol(unsigned char temp_det_sym)
{
	//---------------------------------------------------------------------------------------
	switch(temp_det_sym)
 634:	85 30       	cpi	r24, 0x05	; 5
 636:	d9 f0       	breq	.+54     	; 0x66e <detect_i2c_symbol+0x3a>
 638:	58 f4       	brcc	.+22     	; 0x650 <detect_i2c_symbol+0x1c>
 63a:	82 30       	cpi	r24, 0x02	; 2
 63c:	91 f0       	breq	.+36     	; 0x662 <detect_i2c_symbol+0x2e>
 63e:	18 f4       	brcc	.+6      	; 0x646 <detect_i2c_symbol+0x12>
 640:	81 30       	cpi	r24, 0x01	; 1
 642:	69 f4       	brne	.+26     	; 0x65e <detect_i2c_symbol+0x2a>
 644:	1e c0       	rjmp	.+60     	; 0x682 <detect_i2c_symbol+0x4e>
 646:	83 30       	cpi	r24, 0x03	; 3
 648:	71 f0       	breq	.+28     	; 0x666 <detect_i2c_symbol+0x32>
 64a:	84 30       	cpi	r24, 0x04	; 4
 64c:	41 f4       	brne	.+16     	; 0x65e <detect_i2c_symbol+0x2a>
 64e:	0d c0       	rjmp	.+26     	; 0x66a <detect_i2c_symbol+0x36>
 650:	87 30       	cpi	r24, 0x07	; 7
 652:	89 f0       	breq	.+34     	; 0x676 <detect_i2c_symbol+0x42>
 654:	70 f0       	brcs	.+28     	; 0x672 <detect_i2c_symbol+0x3e>
 656:	88 30       	cpi	r24, 0x08	; 8
 658:	81 f0       	breq	.+32     	; 0x67a <detect_i2c_symbol+0x46>
 65a:	89 30       	cpi	r24, 0x09	; 9
 65c:	81 f0       	breq	.+32     	; 0x67e <detect_i2c_symbol+0x4a>
	{
		//---------------------------------------------------------------------------------------
		case 0:{return '0';}break;
 65e:	80 e3       	ldi	r24, 0x30	; 48
 660:	08 95       	ret
		case 1:{return '1';}break;
		case 2:{return '2';}break;	
 662:	82 e3       	ldi	r24, 0x32	; 50
 664:	08 95       	ret
		case 3:{return '3';}break;
 666:	83 e3       	ldi	r24, 0x33	; 51
 668:	08 95       	ret
		case 4:{return '4';}break;
 66a:	84 e3       	ldi	r24, 0x34	; 52
 66c:	08 95       	ret
		case 5:{return '5';}break;
 66e:	85 e3       	ldi	r24, 0x35	; 53
 670:	08 95       	ret
		case 6:{return '6';}break;	
 672:	86 e3       	ldi	r24, 0x36	; 54
 674:	08 95       	ret
		case 7:{return '7';}break;
 676:	87 e3       	ldi	r24, 0x37	; 55
 678:	08 95       	ret
		case 8:{return '8';}break;
 67a:	88 e3       	ldi	r24, 0x38	; 56
 67c:	08 95       	ret
		case 9:{return '9';}break;
 67e:	89 e3       	ldi	r24, 0x39	; 57
 680:	08 95       	ret
	//---------------------------------------------------------------------------------------
	switch(temp_det_sym)
	{
		//---------------------------------------------------------------------------------------
		case 0:{return '0';}break;
		case 1:{return '1';}break;
 682:	81 e3       	ldi	r24, 0x31	; 49
		case 9:{return '9';}break;
		default:return '0';
		//---------------------------------------------------------------------------------------
	};
	//---------------------------------------------------------------------------------------
};
 684:	08 95       	ret

00000686 <detect_i2c_string>:
};
//***************************************************************************************
//Вывести на индикатор короткую строку из 4-х цифр
//***************************************************************************************
void detect_i2c_string(unsigned int temp_volt)
{
 686:	cf 92       	push	r12
 688:	df 92       	push	r13
 68a:	ef 92       	push	r14
 68c:	ff 92       	push	r15
 68e:	0f 93       	push	r16
 690:	1f 93       	push	r17
 692:	cf 93       	push	r28
 694:	df 93       	push	r29
 696:	00 d0       	rcall	.+0      	; 0x698 <detect_i2c_string+0x12>
 698:	00 d0       	rcall	.+0      	; 0x69a <detect_i2c_string+0x14>
 69a:	cd b7       	in	r28, 0x3d	; 61
 69c:	de b7       	in	r29, 0x3e	; 62
 69e:	e8 2f       	mov	r30, r24
 6a0:	39 2f       	mov	r19, r25
	//---------------------------------------------------------------------------------------
	unsigned char det_string[4]={0,0,0,0};
 6a2:	19 82       	std	Y+1, r1	; 0x01
 6a4:	1a 82       	std	Y+2, r1	; 0x02
 6a6:	1b 82       	std	Y+3, r1	; 0x03
 6a8:	1c 82       	std	Y+4, r1	; 0x04
 6aa:	ee 24       	eor	r14, r14
 6ac:	e3 94       	inc	r14
 6ae:	f1 2c       	mov	r15, r1
 6b0:	ec 0e       	add	r14, r28
 6b2:	fd 1e       	adc	r15, r29
	//---------------------------------------------------------------------------------------
};
//***************************************************************************************
//Вывести на индикатор короткую строку из 4-х цифр
//***************************************************************************************
void detect_i2c_string(unsigned int temp_volt)
 6b4:	6e 01       	movw	r12, r28
 6b6:	85 e0       	ldi	r24, 0x05	; 5
 6b8:	c8 0e       	add	r12, r24
 6ba:	d1 1c       	adc	r13, r1
	unsigned char det_string[4]={0,0,0,0};
	//---------------------------------------------------------------------------------------
	for (unsigned char j=0;j<=3;j++)
	{
		//---------------------------------------------------------------------------------------
		det_string[j]=detect_i2c_symbol(temp_volt%10);
 6bc:	2e 2f       	mov	r18, r30
 6be:	ad ec       	ldi	r26, 0xCD	; 205
 6c0:	bc ec       	ldi	r27, 0xCC	; 204
 6c2:	0e 94 57 04 	call	0x8ae	; 0x8ae <__umulhisi3>
 6c6:	8c 01       	movw	r16, r24
 6c8:	16 95       	lsr	r17
 6ca:	07 95       	ror	r16
 6cc:	16 95       	lsr	r17
 6ce:	07 95       	ror	r16
 6d0:	16 95       	lsr	r17
 6d2:	07 95       	ror	r16
 6d4:	b8 01       	movw	r22, r16
 6d6:	66 0f       	add	r22, r22
 6d8:	77 1f       	adc	r23, r23
 6da:	a8 01       	movw	r20, r16
 6dc:	44 0f       	add	r20, r20
 6de:	55 1f       	adc	r21, r21
 6e0:	44 0f       	add	r20, r20
 6e2:	55 1f       	adc	r21, r21
 6e4:	44 0f       	add	r20, r20
 6e6:	55 1f       	adc	r21, r21
 6e8:	46 0f       	add	r20, r22
 6ea:	57 1f       	adc	r21, r23
 6ec:	8e 2f       	mov	r24, r30
 6ee:	84 1b       	sub	r24, r20
 6f0:	0e 94 1a 03 	call	0x634	; 0x634 <detect_i2c_symbol>
 6f4:	f7 01       	movw	r30, r14
 6f6:	81 93       	st	Z+, r24
 6f8:	7f 01       	movw	r14, r30
		temp_volt=temp_volt/10;
 6fa:	e0 2f       	mov	r30, r16
 6fc:	31 2f       	mov	r19, r17
void detect_i2c_string(unsigned int temp_volt)
{
	//---------------------------------------------------------------------------------------
	unsigned char det_string[4]={0,0,0,0};
	//---------------------------------------------------------------------------------------
	for (unsigned char j=0;j<=3;j++)
 6fe:	ec 14       	cp	r14, r12
 700:	fd 04       	cpc	r15, r13
 702:	e1 f6       	brne	.-72     	; 0x6bc <detect_i2c_string+0x36>
	};
	//---------------------------------------------------------------------------------------
	for (unsigned char j=0;j<=3;j++)
	{
		//---------------------------------------------------------------------------------------
		send_i2c_lcd_symbol(det_string[3-j]);
 704:	8c 81       	ldd	r24, Y+4	; 0x04
 706:	0e 94 e7 02 	call	0x5ce	; 0x5ce <send_i2c_lcd_symbol>
 70a:	8b 81       	ldd	r24, Y+3	; 0x03
 70c:	0e 94 e7 02 	call	0x5ce	; 0x5ce <send_i2c_lcd_symbol>
 710:	8a 81       	ldd	r24, Y+2	; 0x02
 712:	0e 94 e7 02 	call	0x5ce	; 0x5ce <send_i2c_lcd_symbol>
 716:	89 81       	ldd	r24, Y+1	; 0x01
 718:	0e 94 e7 02 	call	0x5ce	; 0x5ce <send_i2c_lcd_symbol>
		//---------------------------------------------------------------------------------------
	};
	//---------------------------------------------------------------------------------------	
};
 71c:	0f 90       	pop	r0
 71e:	0f 90       	pop	r0
 720:	0f 90       	pop	r0
 722:	0f 90       	pop	r0
 724:	df 91       	pop	r29
 726:	cf 91       	pop	r28
 728:	1f 91       	pop	r17
 72a:	0f 91       	pop	r16
 72c:	ff 90       	pop	r15
 72e:	ef 90       	pop	r14
 730:	df 90       	pop	r13
 732:	cf 90       	pop	r12
 734:	08 95       	ret

00000736 <Main_menu_i2c>:

char const _BURN_OK_[]			PROGMEM = "  Hello  world  ";

//****************************************************************************************
void Main_menu_i2c (unsigned char data)
{
 736:	cf 93       	push	r28
 738:	c8 2f       	mov	r28, r24
	set_i2c_lcd_position(1,1);
 73a:	61 e0       	ldi	r22, 0x01	; 1
 73c:	81 e0       	ldi	r24, 0x01	; 1
 73e:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <set_i2c_lcd_position>
	send_i2c_lcd_string_P(_BURN_OK_);
 742:	8c e8       	ldi	r24, 0x8C	; 140
 744:	90 e0       	ldi	r25, 0x00	; 0
 746:	0e 94 05 03 	call	0x60a	; 0x60a <send_i2c_lcd_string_P>
	set_i2c_lcd_position(2,1);
 74a:	61 e0       	ldi	r22, 0x01	; 1
 74c:	82 e0       	ldi	r24, 0x02	; 2
 74e:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <set_i2c_lcd_position>
	detect_i2c_string(data);				// Виводим на дисплей
 752:	8c 2f       	mov	r24, r28
 754:	90 e0       	ldi	r25, 0x00	; 0
 756:	0e 94 43 03 	call	0x686	; 0x686 <detect_i2c_string>
};			//Main_menu
 75a:	cf 91       	pop	r28
 75c:	08 95       	ret

0000075e <__vector_18>:

#include "rs485_0.h"

//****************************************************************************************
ISR(USART0_RX_vect)
{
 75e:	1f 92       	push	r1
 760:	0f 92       	push	r0
 762:	0f b6       	in	r0, 0x3f	; 63
 764:	0f 92       	push	r0
 766:	11 24       	eor	r1, r1
 768:	2f 93       	push	r18
 76a:	8f 93       	push	r24
 76c:	9f 93       	push	r25
 76e:	ef 93       	push	r30
 770:	ff 93       	push	r31
	uint8_t byte;
	uint8_t wr = (uart_0_rxwr+1) & UART_BUFEND_0_;
 772:	e0 91 38 01 	lds	r30, 0x0138
 776:	8e 2f       	mov	r24, r30
 778:	8f 5f       	subi	r24, 0xFF	; 255
 77a:	8f 70       	andi	r24, 0x0F	; 15
	byte = UDR0;
 77c:	2c b1       	in	r18, 0x0c	; 12
	if(wr != uart_0_rxrd)
 77e:	90 91 39 01 	lds	r25, 0x0139
 782:	89 17       	cp	r24, r25
 784:	31 f0       	breq	.+12     	; 0x792 <__vector_18+0x34>
	{
		uart_0_rx[uart_0_rxwr] = byte;
 786:	f0 e0       	ldi	r31, 0x00	; 0
 788:	e9 5d       	subi	r30, 0xD9	; 217
 78a:	fe 4f       	sbci	r31, 0xFE	; 254
 78c:	20 83       	st	Z, r18
		uart_0_rxwr = wr;
 78e:	80 93 38 01 	sts	0x0138, r24
	};
};
 792:	ff 91       	pop	r31
 794:	ef 91       	pop	r30
 796:	9f 91       	pop	r25
 798:	8f 91       	pop	r24
 79a:	2f 91       	pop	r18
 79c:	0f 90       	pop	r0
 79e:	0f be       	out	0x3f, r0	; 63
 7a0:	0f 90       	pop	r0
 7a2:	1f 90       	pop	r1
 7a4:	18 95       	reti

000007a6 <__vector_19>:
//****************************************************************************************
ISR(USART0_UDRE_vect)
{
 7a6:	1f 92       	push	r1
 7a8:	0f 92       	push	r0
 7aa:	0f b6       	in	r0, 0x3f	; 63
 7ac:	0f 92       	push	r0
 7ae:	11 24       	eor	r1, r1
 7b0:	8f 93       	push	r24
 7b2:	9f 93       	push	r25
 7b4:	ef 93       	push	r30
 7b6:	ff 93       	push	r31
	uint8_t rd = uart_0_txrd;
 7b8:	80 91 37 01 	lds	r24, 0x0137
	if(rd != uart_0_txwr)
 7bc:	90 91 26 01 	lds	r25, 0x0126
 7c0:	89 17       	cp	r24, r25
 7c2:	59 f0       	breq	.+22     	; 0x7da <__vector_19+0x34>
	{
		UDR0 = uart_0_tx[rd];
 7c4:	e8 2f       	mov	r30, r24
 7c6:	f0 e0       	ldi	r31, 0x00	; 0
 7c8:	e6 5c       	subi	r30, 0xC6	; 198
 7ca:	fe 4f       	sbci	r31, 0xFE	; 254
 7cc:	90 81       	ld	r25, Z
 7ce:	9c b9       	out	0x0c, r25	; 12
		uart_0_txrd = (rd+1) & UART_BUFEND_0_;
 7d0:	8f 5f       	subi	r24, 0xFF	; 255
 7d2:	8f 70       	andi	r24, 0x0F	; 15
 7d4:	80 93 37 01 	sts	0x0137, r24
		return;
 7d8:	08 c0       	rjmp	.+16     	; 0x7ea <__vector_19+0x44>
	}else
	{

	};
	UCSR0B &= ~(1<<UDRIE0);
 7da:	55 98       	cbi	0x0a, 5	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 7dc:	87 ee       	ldi	r24, 0xE7	; 231
 7de:	93 e0       	ldi	r25, 0x03	; 3
 7e0:	01 97       	sbiw	r24, 0x01	; 1
 7e2:	f1 f7       	brne	.-4      	; 0x7e0 <__vector_19+0x3a>
 7e4:	00 c0       	rjmp	.+0      	; 0x7e6 <__vector_19+0x40>
 7e6:	00 00       	nop
	_delay_us(250);
	TXD_DISABLE
 7e8:	1a 98       	cbi	0x03, 2	; 3
};
 7ea:	ff 91       	pop	r31
 7ec:	ef 91       	pop	r30
 7ee:	9f 91       	pop	r25
 7f0:	8f 91       	pop	r24
 7f2:	0f 90       	pop	r0
 7f4:	0f be       	out	0x3f, r0	; 63
 7f6:	0f 90       	pop	r0
 7f8:	1f 90       	pop	r1
 7fa:	18 95       	reti

000007fc <__vector_20>:
//****************************************************************************************
ISR(USART0_TX_vect)
{
 7fc:	1f 92       	push	r1
 7fe:	0f 92       	push	r0
 800:	0f b6       	in	r0, 0x3f	; 63
 802:	0f 92       	push	r0
 804:	11 24       	eor	r1, r1
	//TXD_DISABLE
};
 806:	0f 90       	pop	r0
 808:	0f be       	out	0x3f, r0	; 63
 80a:	0f 90       	pop	r0
 80c:	1f 90       	pop	r1
 80e:	18 95       	reti

00000810 <rs485_0_write>:
	return 0;
};
//****************************************************************************************
void rs485_0_write(uint8_t byte)
{
	uint8_t wr = (uart_0_txwr+1) & UART_BUFEND_0_;
 810:	e0 91 26 01 	lds	r30, 0x0126
 814:	9e 2f       	mov	r25, r30
 816:	9f 5f       	subi	r25, 0xFF	; 255
 818:	9f 70       	andi	r25, 0x0F	; 15
	if(wr != uart_0_txrd)
 81a:	20 91 37 01 	lds	r18, 0x0137
 81e:	92 17       	cp	r25, r18
 820:	41 f0       	breq	.+16     	; 0x832 <rs485_0_write+0x22>
	{
		uart_0_tx[uart_0_txwr] = byte;
 822:	f0 e0       	ldi	r31, 0x00	; 0
 824:	e6 5c       	subi	r30, 0xC6	; 198
 826:	fe 4f       	sbci	r31, 0xFE	; 254
 828:	80 83       	st	Z, r24
		uart_0_txwr = wr;
 82a:	90 93 26 01 	sts	0x0126, r25
		TXD_ENABLE
 82e:	1a 9a       	sbi	0x03, 2	; 3
		UCSR0B |= (1<<UDRIE0);
 830:	55 9a       	sbi	0x0a, 5	; 10
 832:	08 95       	ret

00000834 <rs485_0_init>:
	};
};
//****************************************************************************************
void rs485_0_init()
{
	(PORT_TXDE&=~(1<<TXDE));
 834:	1a 98       	cbi	0x03, 2	; 3
	(DDR_TXDE|=(1<<TXDE));
 836:	12 9a       	sbi	0x02, 2	; 2
	//UBRR0L = (F_CPU+UART_RATE/8)/(UART_RATE/16)-1;
	//UBRR0H = ((F_CPU+UART_RATE/8)/(UART_RATE/16)-1)>>8;
	UBRR0L = F_CPU/UART_BAUD_RATE_0_/16-1;
 838:	89 e1       	ldi	r24, 0x19	; 25
 83a:	89 b9       	out	0x09, r24	; 9
	UBRR0H = (F_CPU/UART_BAUD_RATE_0_/16-1)>>8;
 83c:	10 92 90 00 	sts	0x0090, r1
	UCSR0B = (1<<RXCIE0)|(1<<RXEN0)|(1<<TXEN0);
 840:	88 e9       	ldi	r24, 0x98	; 152
 842:	8a b9       	out	0x0a, r24	; 10
 844:	08 95       	ret

00000846 <BUT_Init>:
*   Purpose :       РёРЅРёС†РёР°Р»РёР·Р°С†РёСЏ РїРѕСЂС‚РѕРІ РІРІРѕРґР°/РІС‹РІРѕРґР°
*                   РІС‹Р·С‹РІР°РµС‚СЃСЏ РѕР±С‹С‡РЅРѕ РІ РЅР°С‡Р°Р»Рµ main`a
****************************************************************************/
void BUT_Init(void)
{
	DDRX_BUTTON &= ~(MASK_BUTTONS);
 846:	84 b3       	in	r24, 0x14	; 20
 848:	80 7c       	andi	r24, 0xC0	; 192
 84a:	84 bb       	out	0x14, r24	; 20
	PORT_BUTTON |= MASK_BUTTONS;
 84c:	85 b3       	in	r24, 0x15	; 21
 84e:	8f 63       	ori	r24, 0x3F	; 63
 850:	85 bb       	out	0x15, r24	; 21
 852:	08 95       	ret

00000854 <BUT_Debrief>:
void BUT_Debrief(void)
{
	//---------------------------------------------------------------------------------------
	unsigned char key;
	//---------------------------------------------------------------------------------------
	if((((PIN_BUTTON)>>(OK))&1)==0)
 854:	98 9b       	sbis	0x13, 0	; 19
 856:	1a c0       	rjmp	.+52     	; 0x88c <BUT_Debrief+0x38>
	{
		key = KEY_OK;
	}else if ((((PIN_BUTTON)>>(UP))&1)==0)
 858:	99 9b       	sbis	0x13, 1	; 19
 85a:	1a c0       	rjmp	.+52     	; 0x890 <BUT_Debrief+0x3c>
	{
		key = KEY_DOWN;
	}else if ((((PIN_BUTTON)>>(DOWN))&1)==0)
 85c:	9a 9b       	sbis	0x13, 2	; 19
 85e:	1a c0       	rjmp	.+52     	; 0x894 <BUT_Debrief+0x40>
	{
		key = KEY_UP;
	}else if ((((PIN_BUTTON)>>(RIGHT))&1)==0)
 860:	9b 9b       	sbis	0x13, 3	; 19
 862:	1a c0       	rjmp	.+52     	; 0x898 <BUT_Debrief+0x44>
	{
		key = KEY_RIGHT;
	}
	else if ((((PIN_BUTTON)>>(LEFT))&1)==0)
 864:	9c 9b       	sbis	0x13, 4	; 19
 866:	1a c0       	rjmp	.+52     	; 0x89c <BUT_Debrief+0x48>
	{
		key = KEY_LEFT;
	}
	else if ((((PIN_BUTTON)>>(KEY_ESC))&1)==0)
 868:	9e 9b       	sbis	0x13, 6	; 19
 86a:	1a c0       	rjmp	.+52     	; 0x8a0 <BUT_Debrief+0x4c>
 86c:	0c c0       	rjmp	.+24     	; 0x886 <BUT_Debrief+0x32>
	{
		//Рё РµСЃР»Рё РєРЅРѕРїРєР° СѓРґРµСЂР¶РёРІР°РµС‚СЃСЏ РґРѕР»РіРѕ
		//Р·Р°РїРёСЃР°С‚СЊ РµРµ РЅРѕРјРµСЂ РІ Р±СѓС„РµСЂ
		if (comp == THRESHOLD)
		{
			comp = THRESHOLD+10;
 86e:	8f e0       	ldi	r24, 0x0F	; 15
 870:	80 93 24 01 	sts	0x0124, r24
			pressedKey = key;
 874:	90 93 25 01 	sts	0x0125, r25
			return;
 878:	08 95       	ret
		}
		else if (comp < (THRESHOLD+5))
 87a:	8a 30       	cpi	r24, 0x0A	; 10
 87c:	b8 f4       	brcc	.+46     	; 0x8ac <BUT_Debrief+0x58>
		{
			comp++;
 87e:	8f 5f       	subi	r24, 0xFF	; 255
 880:	80 93 24 01 	sts	0x0124, r24
 884:	08 95       	ret
		};
	}
	else
	{
		comp=0;
 886:	10 92 24 01 	sts	0x0124, r1
 88a:	08 95       	ret
	//---------------------------------------------------------------------------------------
	unsigned char key;
	//---------------------------------------------------------------------------------------
	if((((PIN_BUTTON)>>(OK))&1)==0)
	{
		key = KEY_OK;
 88c:	91 e0       	ldi	r25, 0x01	; 1
 88e:	09 c0       	rjmp	.+18     	; 0x8a2 <BUT_Debrief+0x4e>
	}else if ((((PIN_BUTTON)>>(UP))&1)==0)
	{
		key = KEY_DOWN;
 890:	93 e0       	ldi	r25, 0x03	; 3
 892:	07 c0       	rjmp	.+14     	; 0x8a2 <BUT_Debrief+0x4e>
	}else if ((((PIN_BUTTON)>>(DOWN))&1)==0)
	{
		key = KEY_UP;
 894:	92 e0       	ldi	r25, 0x02	; 2
 896:	05 c0       	rjmp	.+10     	; 0x8a2 <BUT_Debrief+0x4e>
	}else if ((((PIN_BUTTON)>>(RIGHT))&1)==0)
	{
		key = KEY_RIGHT;
 898:	94 e0       	ldi	r25, 0x04	; 4
 89a:	03 c0       	rjmp	.+6      	; 0x8a2 <BUT_Debrief+0x4e>
	}
	else if ((((PIN_BUTTON)>>(LEFT))&1)==0)
	{
		key = KEY_LEFT;
 89c:	95 e0       	ldi	r25, 0x05	; 5
 89e:	01 c0       	rjmp	.+2      	; 0x8a2 <BUT_Debrief+0x4e>
	}
	else if ((((PIN_BUTTON)>>(KEY_ESC))&1)==0)
	{
		key = KEY_ESC;
 8a0:	96 e0       	ldi	r25, 0x06	; 6
	//РµСЃР»Рё РІРѕ РІСЂРµРјРµРЅРЅРѕР№ РїРµСЂРµРјРµРЅРЅРѕР№ С‡С‚Рѕ-С‚Рѕ РµСЃС‚СЊ
	if (key!=0)
	{
		//Рё РµСЃР»Рё РєРЅРѕРїРєР° СѓРґРµСЂР¶РёРІР°РµС‚СЃСЏ РґРѕР»РіРѕ
		//Р·Р°РїРёСЃР°С‚СЊ РµРµ РЅРѕРјРµСЂ РІ Р±СѓС„РµСЂ
		if (comp == THRESHOLD)
 8a2:	80 91 24 01 	lds	r24, 0x0124
 8a6:	85 30       	cpi	r24, 0x05	; 5
 8a8:	41 f7       	brne	.-48     	; 0x87a <BUT_Debrief+0x26>
 8aa:	e1 cf       	rjmp	.-62     	; 0x86e <BUT_Debrief+0x1a>
 8ac:	08 95       	ret

000008ae <__umulhisi3>:
 8ae:	a2 9f       	mul	r26, r18
 8b0:	b0 01       	movw	r22, r0
 8b2:	b3 9f       	mul	r27, r19
 8b4:	c0 01       	movw	r24, r0
 8b6:	a3 9f       	mul	r26, r19
 8b8:	01 d0       	rcall	.+2      	; 0x8bc <__umulhisi3+0xe>
 8ba:	b2 9f       	mul	r27, r18
 8bc:	70 0d       	add	r23, r0
 8be:	81 1d       	adc	r24, r1
 8c0:	11 24       	eor	r1, r1
 8c2:	91 1d       	adc	r25, r1
 8c4:	08 95       	ret

000008c6 <_exit>:
 8c6:	f8 94       	cli

000008c8 <__stop_program>:
 8c8:	ff cf       	rjmp	.-2      	; 0x8c8 <__stop_program>
