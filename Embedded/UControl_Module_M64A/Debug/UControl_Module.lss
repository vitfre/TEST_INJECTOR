
UControl_Module.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  000006a8  0000073c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006a8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000004a  00800100  00800100  0000073c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000073c  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000002a0  00000000  00000000  0000076c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000022e9  00000000  00000000  00000a0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000be2  00000000  00000000  00002cf5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000f21  00000000  00000000  000038d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000678  00000000  00000000  000047f8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000682  00000000  00000000  00004e70  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001472  00000000  00000000  000054f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000290  00000000  00000000  00006964  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:

char const _BURN_OK_[]			PROGMEM = "  Hello  world  ";

//****************************************************************************************
void Main_menu_i2c (unsigned int data)
{
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
	set_i2c_lcd_position(1,1);
   8:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
   c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
	send_i2c_lcd_string_P(_BURN_OK_);
  10:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  14:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
	set_i2c_lcd_position(2,1);
  18:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  1c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
	detect_i2c_string(data);				// Виводим на дисплей
  20:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
};			//Main_menu
  24:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  28:	0c 94 e4 00 	jmp	0x1c8	; 0x1c8 <__vector_10>
  2c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  30:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  34:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  38:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__vector_14>
  3c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  40:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__vector_16>
  44:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  48:	0c 94 bc 02 	jmp	0x578	; 0x578 <__vector_18>
  4c:	0c 94 e0 02 	jmp	0x5c0	; 0x5c0 <__vector_19>
  50:	0c 94 0b 03 	jmp	0x616	; 0x616 <__vector_20>
  54:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  58:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  5c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  60:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  64:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  68:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  6c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  70:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  74:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__vector_29>
  78:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__vector_30>
  7c:	0c 94 84 00 	jmp	0x108	; 0x108 <__vector_31>
  80:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  84:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  88:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	aa 34       	cpi	r26, 0x4A	; 74
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	0e 94 69 01 	call	0x2d2	; 0x2d2 <main>
  ac:	0c 94 52 03 	jmp	0x6a4	; 0x6a4 <_exit>

000000b0 <__bad_interrupt>:
  b0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b4 <init_adc>:
{
	//---------------------------------------------------------------------------------------
	// ADC initialization
	// ADC Clock frequency: 500,000 kHz
	// ADC Voltage Reference: AVCC pin
	ADMUX=ADC_VREF_TYPE & 0xff;
  b4:	80 e4       	ldi	r24, 0x40	; 64
  b6:	87 b9       	out	0x07, r24	; 7
	ADCSRA=0x85;
  b8:	85 e8       	ldi	r24, 0x85	; 133
  ba:	86 b9       	out	0x06, r24	; 6
  bc:	08 95       	ret

000000be <__vector_30>:

#include "buart_1.h"

//****************************************************************************************
ISR(USART1_RX_vect)
{
  be:	1f 92       	push	r1
  c0:	0f 92       	push	r0
  c2:	0f b6       	in	r0, 0x3f	; 63
  c4:	0f 92       	push	r0
  c6:	11 24       	eor	r1, r1
  c8:	2f 93       	push	r18
  ca:	8f 93       	push	r24
  cc:	9f 93       	push	r25
  ce:	ef 93       	push	r30
  d0:	ff 93       	push	r31
	uint8_t byte;
	uint8_t wr = (uart_1_rxwr+1) & UART_BUFEND_1_;
  d2:	e0 91 22 01 	lds	r30, 0x0122
  d6:	81 e0       	ldi	r24, 0x01	; 1
  d8:	8e 0f       	add	r24, r30
  da:	8f 70       	andi	r24, 0x0F	; 15
	byte = UDR1;
  dc:	20 91 9c 00 	lds	r18, 0x009C
	if(wr != uart_1_rxrd)
  e0:	90 91 23 01 	lds	r25, 0x0123
  e4:	89 17       	cp	r24, r25
  e6:	31 f0       	breq	.+12     	; 0xf4 <__vector_30+0x36>
	{
		uart_1_rx[uart_1_rxwr] = byte;
  e8:	f0 e0       	ldi	r31, 0x00	; 0
  ea:	ef 5e       	subi	r30, 0xEF	; 239
  ec:	fe 4f       	sbci	r31, 0xFE	; 254
  ee:	20 83       	st	Z, r18
		uart_1_rxwr = wr;
  f0:	80 93 22 01 	sts	0x0122, r24
	};
};
  f4:	ff 91       	pop	r31
  f6:	ef 91       	pop	r30
  f8:	9f 91       	pop	r25
  fa:	8f 91       	pop	r24
  fc:	2f 91       	pop	r18
  fe:	0f 90       	pop	r0
 100:	0f be       	out	0x3f, r0	; 63
 102:	0f 90       	pop	r0
 104:	1f 90       	pop	r1
 106:	18 95       	reti

00000108 <__vector_31>:
//****************************************************************************************
ISR(USART1_UDRE_vect)
{
 108:	1f 92       	push	r1
 10a:	0f 92       	push	r0
 10c:	0f b6       	in	r0, 0x3f	; 63
 10e:	0f 92       	push	r0
 110:	11 24       	eor	r1, r1
 112:	8f 93       	push	r24
 114:	9f 93       	push	r25
 116:	ef 93       	push	r30
 118:	ff 93       	push	r31
	uint8_t rd = uart_1_txrd;
 11a:	80 91 00 01 	lds	r24, 0x0100
	if(rd != uart_1_txwr)
 11e:	90 91 21 01 	lds	r25, 0x0121
 122:	89 17       	cp	r24, r25
 124:	61 f0       	breq	.+24     	; 0x13e <__vector_31+0x36>
	{
		UDR1 = uart_1_tx[rd];
 126:	e8 2f       	mov	r30, r24
 128:	f0 e0       	ldi	r31, 0x00	; 0
 12a:	ef 5f       	subi	r30, 0xFF	; 255
 12c:	fe 4f       	sbci	r31, 0xFE	; 254
 12e:	90 81       	ld	r25, Z
 130:	90 93 9c 00 	sts	0x009C, r25
		uart_1_txrd = (rd+1) & UART_BUFEND_1_;
 134:	8f 5f       	subi	r24, 0xFF	; 255
 136:	8f 70       	andi	r24, 0x0F	; 15
 138:	80 93 00 01 	sts	0x0100, r24
		return;
 13c:	05 c0       	rjmp	.+10     	; 0x148 <__vector_31+0x40>
	};
	UCSR1B &= ~(1<<UDRIE1);
 13e:	ea e9       	ldi	r30, 0x9A	; 154
 140:	f0 e0       	ldi	r31, 0x00	; 0
 142:	80 81       	ld	r24, Z
 144:	8f 7d       	andi	r24, 0xDF	; 223
 146:	80 83       	st	Z, r24
};
 148:	ff 91       	pop	r31
 14a:	ef 91       	pop	r30
 14c:	9f 91       	pop	r25
 14e:	8f 91       	pop	r24
 150:	0f 90       	pop	r0
 152:	0f be       	out	0x3f, r0	; 63
 154:	0f 90       	pop	r0
 156:	1f 90       	pop	r1
 158:	18 95       	reti

0000015a <uart_1_init>:
	};
};
//****************************************************************************************
void uart_1_init()
{
	UBRR1L = F_CPU/UART_BAUD_RATE_1_/16-1;
 15a:	89 e1       	ldi	r24, 0x19	; 25
 15c:	80 93 99 00 	sts	0x0099, r24
	UBRR1H = (F_CPU/UART_BAUD_RATE_1_/16-1)>>8;
 160:	10 92 98 00 	sts	0x0098, r1
	UCSR1B = (1<<RXCIE1)|(1<<RXEN1)|(1<<TXEN1);
 164:	88 e9       	ldi	r24, 0x98	; 152
 166:	80 93 9a 00 	sts	0x009A, r24
 16a:	08 95       	ret

0000016c <__vector_16>:

//****************************************************************************************
// Timer0 overflow interrupt service routine
//****************************************************************************************
ISR (TIMER0_OVF_vect)
{
 16c:	1f 92       	push	r1
 16e:	0f 92       	push	r0
 170:	0f b6       	in	r0, 0x3f	; 63
 172:	0f 92       	push	r0
 174:	11 24       	eor	r1, r1
 176:	2f 93       	push	r18
 178:	3f 93       	push	r19
 17a:	4f 93       	push	r20
 17c:	5f 93       	push	r21
 17e:	6f 93       	push	r22
 180:	7f 93       	push	r23
 182:	8f 93       	push	r24
 184:	9f 93       	push	r25
 186:	af 93       	push	r26
 188:	bf 93       	push	r27
 18a:	ef 93       	push	r30
 18c:	ff 93       	push	r31
	//---------------------------------------------------------------------------------------
	BUT_Debrief();
 18e:	0e 94 25 03 	call	0x64a	; 0x64a <BUT_Debrief>

	//---------------------------------------------------------------------------------------
	return;
};
 192:	ff 91       	pop	r31
 194:	ef 91       	pop	r30
 196:	bf 91       	pop	r27
 198:	af 91       	pop	r26
 19a:	9f 91       	pop	r25
 19c:	8f 91       	pop	r24
 19e:	7f 91       	pop	r23
 1a0:	6f 91       	pop	r22
 1a2:	5f 91       	pop	r21
 1a4:	4f 91       	pop	r20
 1a6:	3f 91       	pop	r19
 1a8:	2f 91       	pop	r18
 1aa:	0f 90       	pop	r0
 1ac:	0f be       	out	0x3f, r0	; 63
 1ae:	0f 90       	pop	r0
 1b0:	1f 90       	pop	r1
 1b2:	18 95       	reti

000001b4 <__vector_14>:
//****************************************************************************************
// Timer1 overflow interrupt service routine
//****************************************************************************************
ISR (TIMER1_OVF_vect)
{
 1b4:	1f 92       	push	r1
 1b6:	0f 92       	push	r0
 1b8:	0f b6       	in	r0, 0x3f	; 63
 1ba:	0f 92       	push	r0
 1bc:	11 24       	eor	r1, r1
// 	TCNT1L=0xDC;
	//---------------------------------------------------------------------------------------

	//---------------------------------------------------------------------------------------
	return;
};
 1be:	0f 90       	pop	r0
 1c0:	0f be       	out	0x3f, r0	; 63
 1c2:	0f 90       	pop	r0
 1c4:	1f 90       	pop	r1
 1c6:	18 95       	reti

000001c8 <__vector_10>:
//****************************************************************************************
// Timer2 overflow interrupt service routine
//****************************************************************************************
ISR (TIMER2_OVF_vect)
{
 1c8:	1f 92       	push	r1
 1ca:	0f 92       	push	r0
 1cc:	0f b6       	in	r0, 0x3f	; 63
 1ce:	0f 92       	push	r0
 1d0:	11 24       	eor	r1, r1
	//---------------------------------------------------------------------------------------

	//---------------------------------------------------------------------------------------
	return;
};
 1d2:	0f 90       	pop	r0
 1d4:	0f be       	out	0x3f, r0	; 63
 1d6:	0f 90       	pop	r0
 1d8:	1f 90       	pop	r1
 1da:	18 95       	reti

000001dc <__vector_29>:
//****************************************************************************************
// Timer3 overflow interrupt service routine
//****************************************************************************************
ISR (TIMER3_OVF_vect)
{
 1dc:	1f 92       	push	r1
 1de:	0f 92       	push	r0
 1e0:	0f b6       	in	r0, 0x3f	; 63
 1e2:	0f 92       	push	r0
 1e4:	11 24       	eor	r1, r1
	//---------------------------------------------------------------------------------------

	//---------------------------------------------------------------------------------------
	return;
};
 1e6:	0f 90       	pop	r0
 1e8:	0f be       	out	0x3f, r0	; 63
 1ea:	0f 90       	pop	r0
 1ec:	1f 90       	pop	r1
 1ee:	18 95       	reti

000001f0 <init_mcu>:
	
// Input/Output Ports initialization
// Port A initialization
// Func7=Out Func6=Out Func5=Out Func4=Out Func3=Out Func2=Out Func1=In Func0=Out
// State7=0 State6=0 State5=0 State4=0 State3=0 State2=0 State1=T State0=0
PORTA=0x00;
 1f0:	1b ba       	out	0x1b, r1	; 27
DDRA=0xFD;
 1f2:	8d ef       	ldi	r24, 0xFD	; 253
 1f4:	8a bb       	out	0x1a, r24	; 26

// Port B initialization
// Func7=Out Func6=Out Func5=Out Func4=Out Func3=Out Func2=In Func1=In Func0=In
// State7=0 State6=0 State5=0 State4=0 State3=0 State2=T State1=T State0=T
PORTB=0x00;
 1f6:	18 ba       	out	0x18, r1	; 24
DDRB=0xF8;
 1f8:	88 ef       	ldi	r24, 0xF8	; 248
 1fa:	87 bb       	out	0x17, r24	; 23

// Port C initialization
// Func7=Out Func6=Out Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
// State7=0 State6=1 State5=P State4=P State3=P State2=P State1=P State0=P
PORTC=0x7F;
 1fc:	8f e7       	ldi	r24, 0x7F	; 127
 1fe:	85 bb       	out	0x15, r24	; 21
DDRC=0xC0;
 200:	80 ec       	ldi	r24, 0xC0	; 192
 202:	84 bb       	out	0x14, r24	; 20

// Port D initialization
// Func7=Out Func6=In Func5=Out Func4=In Func3=In Func2=In Func1=In Func0=In
// State7=0 State6=T State5=0 State4=T State3=T State2=T State1=T State0=T
PORTD=0x00;
 204:	12 ba       	out	0x12, r1	; 18
DDRD=0xA0;
 206:	80 ea       	ldi	r24, 0xA0	; 160
 208:	81 bb       	out	0x11, r24	; 17

// Port E initialization
// Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
// State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
PORTE=0x00;
 20a:	13 b8       	out	0x03, r1	; 3
DDRE=0x00;
 20c:	12 b8       	out	0x02, r1	; 2

// Port F initialization
// Func7=In Func6=Out Func5=In Func4=Out Func3=In Func2=In Func1=In Func0=In
// State7=P State6=0 State5=P State4=0 State3=T State2=T State1=T State0=T
PORTF=0xA0;
 20e:	80 93 62 00 	sts	0x0062, r24
DDRF=0x50;
 212:	80 e5       	ldi	r24, 0x50	; 80
 214:	80 93 61 00 	sts	0x0061, r24


// Port G initialization
// Func4=Out Func3=Out Func2=In Func1=Out Func0=Out
// State4=0 State3=0 State2=T State1=1 State0=1
PORTG=0x03;
 218:	83 e0       	ldi	r24, 0x03	; 3
 21a:	80 93 65 00 	sts	0x0065, r24
DDRG=0x1B;
 21e:	8b e1       	ldi	r24, 0x1B	; 27
 220:	80 93 64 00 	sts	0x0064, r24
// Timer/Counter 0 initialization
// Clock source: System Clock
// Clock value: 62,500 kHz
// Mode: Normal top=0xFF
// OC0 output: Disconnected
ASSR=0x00;
 224:	10 be       	out	0x30, r1	; 48
TCCR0=0x06;
 226:	86 e0       	ldi	r24, 0x06	; 6
 228:	83 bf       	out	0x33, r24	; 51
TCNT0=0x00;
 22a:	12 be       	out	0x32, r1	; 50
OCR0=0x00;
 22c:	11 be       	out	0x31, r1	; 49
// Timer1 Overflow Interrupt: Off
// Input Capture Interrupt: Off
// Compare A Match Interrupt: Off
// Compare B Match Interrupt: Off
// Compare C Match Interrupt: Off
TCCR1A=0x00;
 22e:	1f bc       	out	0x2f, r1	; 47
TCCR1B=0x00;
 230:	1e bc       	out	0x2e, r1	; 46
TCNT1H=0x00;
 232:	1d bc       	out	0x2d, r1	; 45
TCNT1L=0x00;
 234:	1c bc       	out	0x2c, r1	; 44
ICR1H=0x00;
 236:	17 bc       	out	0x27, r1	; 39
ICR1L=0x00;
 238:	16 bc       	out	0x26, r1	; 38
OCR1AH=0x00;
 23a:	1b bc       	out	0x2b, r1	; 43
OCR1AL=0x00;
 23c:	1a bc       	out	0x2a, r1	; 42
OCR1BH=0x00;
 23e:	19 bc       	out	0x29, r1	; 41
OCR1BL=0x00;
 240:	18 bc       	out	0x28, r1	; 40
OCR1CH=0x00;
 242:	10 92 79 00 	sts	0x0079, r1
OCR1CL=0x00;
 246:	10 92 78 00 	sts	0x0078, r1
// Clock value: 16000,000 kHz
// Mode: Fast PWM top=0xFF
// OC2 output: Non-Inverted PWM
//TCCR2=0x69;

TCCR2=0x00;
 24a:	15 bc       	out	0x25, r1	; 37
TCNT2=0x00;
 24c:	14 bc       	out	0x24, r1	; 36
OCR2=0x00;
 24e:	13 bc       	out	0x23, r1	; 35
// Compare A Match Interrupt: Off
// Compare B Match Interrupt: Off
// Compare C Match Interrupt: Off
//TCCR3A=0x00;
//TCCR3B=0x01;
TCCR3A=0x00;
 250:	10 92 8b 00 	sts	0x008B, r1
TCCR3B=0x00;
 254:	10 92 8a 00 	sts	0x008A, r1
TCNT3H=0x00;
 258:	10 92 89 00 	sts	0x0089, r1
TCNT3L=0x00;
 25c:	10 92 88 00 	sts	0x0088, r1
ICR3H=0x00;
 260:	10 92 81 00 	sts	0x0081, r1
ICR3L=0x00;
 264:	10 92 80 00 	sts	0x0080, r1
OCR3AH=0x00;
 268:	10 92 87 00 	sts	0x0087, r1
OCR3AL=0x00;
 26c:	10 92 86 00 	sts	0x0086, r1
OCR3BH=0x00;
 270:	10 92 85 00 	sts	0x0085, r1
OCR3BL=0x00;
 274:	10 92 84 00 	sts	0x0084, r1
OCR3CH=0x00;
 278:	10 92 83 00 	sts	0x0083, r1
OCR3CL=0x00;
 27c:	10 92 82 00 	sts	0x0082, r1
// INT3: Off
// INT4: Off
// INT5: Off
// INT6: Off
// INT7: Off
EICRA=0x00;
 280:	10 92 6a 00 	sts	0x006A, r1
EICRB=0x00;
 284:	1a be       	out	0x3a, r1	; 58
EIMSK=0x00;
 286:	19 be       	out	0x39, r1	; 57

// Timer(s)/Counter(s) Interrupt(s) initialization
TIMSK=0x05;//TIMSK=0xC5;
 288:	85 e0       	ldi	r24, 0x05	; 5
 28a:	87 bf       	out	0x37, r24	; 55
ETIMSK=0x04;
 28c:	84 e0       	ldi	r24, 0x04	; 4
 28e:	80 93 7d 00 	sts	0x007D, r24

// USART0 initialization
// USART0 disabled
UCSR0B=0x00;
 292:	1a b8       	out	0x0a, r1	; 10

// USART1 initialization
// USART1 disabled
UCSR1B=0x00;
 294:	10 92 9a 00 	sts	0x009A, r1

// Analog Comparator initialization
// Analog Comparator: Off
// Analog Comparator Input Capture by Timer/Counter 1: Off
ACSR=0x80;
 298:	80 e8       	ldi	r24, 0x80	; 128
 29a:	88 b9       	out	0x08, r24	; 8
SFIOR=0x00;
 29c:	10 bc       	out	0x20, r1	; 32

// ADC initialization
// ADC disabled
ADCSRA=0x00;
 29e:	16 b8       	out	0x06, r1	; 6

// SPI initialization
// SPI disabled
SPCR=0x00;
 2a0:	1d b8       	out	0x0d, r1	; 13

// TWI initialization
// TWI disabled
TWCR=0x00;
 2a2:	10 92 74 00 	sts	0x0074, r1
 2a6:	08 95       	ret

000002a8 <init_pwm>:
*   Purpose :       Ініціалізаціяу ШИМ
****************************************************************************/
void init_pwm(void)
{
	//---------------------------------------------------------------------------------------
	DDRX_PWM |= (MASK_PWM);
 2a8:	87 b3       	in	r24, 0x17	; 23
 2aa:	80 6e       	ori	r24, 0xE0	; 224
 2ac:	87 bb       	out	0x17, r24	; 23
	PORT_PWM &=~ MASK_PWM;
 2ae:	c5 98       	cbi	0x18, 5	; 24
	// Timer1 Overflow Interrupt: Off
	// Input Capture Interrupt: Off
	// Compare A Match Interrupt: Off
	// Compare B Match Interrupt: Off
	// Compare C Match Interrupt: Off
	TCCR1A=0xAB;
 2b0:	8b ea       	ldi	r24, 0xAB	; 171
 2b2:	8f bd       	out	0x2f, r24	; 47
	TCCR1B=0x09;
 2b4:	89 e0       	ldi	r24, 0x09	; 9
 2b6:	8e bd       	out	0x2e, r24	; 46
	TCNT1H=0x00;
 2b8:	1d bc       	out	0x2d, r1	; 45
	TCNT1L=0x00;
 2ba:	1c bc       	out	0x2c, r1	; 44
	ICR1H=0x00;
 2bc:	17 bc       	out	0x27, r1	; 39
	ICR1L=0x00;
 2be:	16 bc       	out	0x26, r1	; 38
	OCR1AH=0x00;
 2c0:	1b bc       	out	0x2b, r1	; 43
	OCR1AL=0x00;
 2c2:	1a bc       	out	0x2a, r1	; 42
	OCR1BH=0x00;
 2c4:	19 bc       	out	0x29, r1	; 41
	OCR1BL=0x00;
 2c6:	18 bc       	out	0x28, r1	; 40
	OCR1CH=0x00;
 2c8:	10 92 79 00 	sts	0x0079, r1
	OCR1CL=0x00;
 2cc:	10 92 78 00 	sts	0x0078, r1
 2d0:	08 95       	ret

000002d2 <main>:
{
	//---------------------------------------------------------------------------------------
	// Declare your local variables here
	unsigned int cnt = 0;
	//---------------------------------------------------------------------------------------
	init_mcu();
 2d2:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <init_mcu>
	//---------------------------------------------------------------------------------------
	init_adc();
 2d6:	0e 94 5a 00 	call	0xb4	; 0xb4 <init_adc>
	rs485_0_init();
 2da:	0e 94 15 03 	call	0x62a	; 0x62a <rs485_0_init>
	uart_1_init();
 2de:	0e 94 ad 00 	call	0x15a	; 0x15a <uart_1_init>
	i2c_lcd_init();
 2e2:	0e 94 73 02 	call	0x4e6	; 0x4e6 <i2c_lcd_init>
	BUT_Init();
 2e6:	0e 94 1e 03 	call	0x63c	; 0x63c <BUT_Init>
	init_pwm();
 2ea:	0e 94 54 01 	call	0x2a8	; 0x2a8 <init_pwm>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2ee:	8f e3       	ldi	r24, 0x3F	; 63
 2f0:	9c e9       	ldi	r25, 0x9C	; 156
 2f2:	01 97       	sbiw	r24, 0x01	; 1
 2f4:	f1 f7       	brne	.-4      	; 0x2f2 <main+0x20>
 2f6:	00 c0       	rjmp	.+0      	; 0x2f8 <main+0x26>
 2f8:	00 00       	nop
	_delay_ms(10);
	//---------------------------------------------------------------------------------------
	asm("sei");
 2fa:	78 94       	sei
 2fc:	af e3       	ldi	r26, 0x3F	; 63
 2fe:	bc e9       	ldi	r27, 0x9C	; 156
 300:	11 97       	sbiw	r26, 0x01	; 1
 302:	f1 f7       	brne	.-4      	; 0x300 <main+0x2e>
 304:	00 c0       	rjmp	.+0      	; 0x306 <main+0x34>
 306:	00 00       	nop
	switch (chanel)
	{
		case pwm_1 :
		{
			//---------------------------------------------------------------------------------------
			OCR1A=val ;
 308:	1b bc       	out	0x2b, r1	; 43
 30a:	1a bc       	out	0x2a, r1	; 42
		};
		break;
		case pwm_2 :
		{
			//---------------------------------------------------------------------------------------
			OCR1B=val;
 30c:	19 bc       	out	0x29, r1	; 41
 30e:	18 bc       	out	0x28, r1	; 40
		};
		break;
		case pwm_3 :
		{
			//---------------------------------------------------------------------------------------
			OCR1C=val ;
 310:	10 92 79 00 	sts	0x0079, r1
 314:	10 92 78 00 	sts	0x0078, r1
//  		uart_1_write (cnt);
 		_delay_ms(10);
		 set_pwm(pwm_1, cnt);
		 set_pwm(pwm_2, cnt);
		 set_pwm(pwm_3, cnt);
 		cnt++;
 318:	81 e0       	ldi	r24, 0x01	; 1
 31a:	90 e0       	ldi	r25, 0x00	; 0
 31c:	e8 e7       	ldi	r30, 0x78	; 120
 31e:	f0 e0       	ldi	r31, 0x00	; 0
		 if (cnt>1023)
		 {
			 cnt=1;
 320:	31 e0       	ldi	r19, 0x01	; 1
 322:	20 e0       	ldi	r18, 0x00	; 0
 324:	02 c0       	rjmp	.+4      	; 0x32a <main+0x58>
 326:	83 2f       	mov	r24, r19
 328:	92 2f       	mov	r25, r18
 32a:	af e3       	ldi	r26, 0x3F	; 63
 32c:	bc e9       	ldi	r27, 0x9C	; 156
 32e:	11 97       	sbiw	r26, 0x01	; 1
 330:	f1 f7       	brne	.-4      	; 0x32e <main+0x5c>
 332:	00 c0       	rjmp	.+0      	; 0x334 <main+0x62>
 334:	00 00       	nop
	switch (chanel)
	{
		case pwm_1 :
		{
			//---------------------------------------------------------------------------------------
			OCR1A=val ;
 336:	9b bd       	out	0x2b, r25	; 43
 338:	8a bd       	out	0x2a, r24	; 42
		};
		break;
		case pwm_2 :
		{
			//---------------------------------------------------------------------------------------
			OCR1B=val;
 33a:	99 bd       	out	0x29, r25	; 41
 33c:	88 bd       	out	0x28, r24	; 40
		};
		break;
		case pwm_3 :
		{
			//---------------------------------------------------------------------------------------
			OCR1C=val ;
 33e:	91 83       	std	Z+1, r25	; 0x01
 340:	80 83       	st	Z, r24
//  		uart_1_write (cnt);
 		_delay_ms(10);
		 set_pwm(pwm_1, cnt);
		 set_pwm(pwm_2, cnt);
		 set_pwm(pwm_3, cnt);
 		cnt++;
 342:	01 96       	adiw	r24, 0x01	; 1
		 if (cnt>1023)
 344:	81 15       	cp	r24, r1
 346:	b4 e0       	ldi	r27, 0x04	; 4
 348:	9b 07       	cpc	r25, r27
 34a:	68 f7       	brcc	.-38     	; 0x326 <main+0x54>
 34c:	ee cf       	rjmp	.-36     	; 0x32a <main+0x58>

0000034e <i2c_init>:
*   Parameters :    нет
*   Purpose :       Инициализация i2c
****************************************************************************/
void i2c_init(void)
{
	(PORT_I2C&=~(1<<SDA));
 34e:	90 98       	cbi	0x12, 0	; 18
	(PORT_I2C&=~(1<<SCL));
 350:	91 98       	cbi	0x12, 1	; 18
	(DDR_I2C&=~(1<<SDA));
 352:	88 98       	cbi	0x11, 0	; 17
	(DDR_I2C&=~(1<<SCL));
 354:	89 98       	cbi	0x11, 1	; 17
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 356:	85 e0       	ldi	r24, 0x05	; 5
 358:	8a 95       	dec	r24
 35a:	f1 f7       	brne	.-4      	; 0x358 <i2c_init+0xa>
 35c:	00 00       	nop
 35e:	08 95       	ret

00000360 <i2c_start>:
*   Parameters :    нет
*   Purpose :       Старт i2c
****************************************************************************/
void i2c_start(void)         
{ 
	(DDR_I2C|=(1<<SDA)); _delay_us(pause);
 360:	88 9a       	sbi	0x11, 0	; 17
 362:	85 e0       	ldi	r24, 0x05	; 5
 364:	8a 95       	dec	r24
 366:	f1 f7       	brne	.-4      	; 0x364 <i2c_start+0x4>
 368:	00 00       	nop
	(DDR_I2C|=(1<<SCL)); _delay_us(pause); 
 36a:	89 9a       	sbi	0x11, 1	; 17
 36c:	85 e0       	ldi	r24, 0x05	; 5
 36e:	8a 95       	dec	r24
 370:	f1 f7       	brne	.-4      	; 0x36e <i2c_start+0xe>
 372:	00 00       	nop
 374:	08 95       	ret

00000376 <i2c_write>:
*   Returns :       нет
*   Parameters :    Данныэ на отправку
*   Purpose :       Передача 1го байта по i2c
****************************************************************************/
void i2c_write(unsigned char byt)  
{ 
 376:	27 e0       	ldi	r18, 0x07	; 7
 378:	30 e0       	ldi	r19, 0x00	; 0
    unsigned char k;                       
    for (k = 0; k < 8; k++)    
    { 
		(DDR_I2C|=(1<<SCL));
        if(0x01 & (byt >> (7 - k)))
 37a:	90 e0       	ldi	r25, 0x00	; 0
void i2c_write(unsigned char byt)  
{ 
    unsigned char k;                       
    for (k = 0; k < 8; k++)    
    { 
		(DDR_I2C|=(1<<SCL));
 37c:	89 9a       	sbi	0x11, 1	; 17
        if(0x01 & (byt >> (7 - k)))
 37e:	ac 01       	movw	r20, r24
 380:	02 2e       	mov	r0, r18
 382:	02 c0       	rjmp	.+4      	; 0x388 <i2c_write+0x12>
 384:	55 95       	asr	r21
 386:	47 95       	ror	r20
 388:	0a 94       	dec	r0
 38a:	e2 f7       	brpl	.-8      	; 0x384 <i2c_write+0xe>
 38c:	40 ff       	sbrs	r20, 0
 38e:	02 c0       	rjmp	.+4      	; 0x394 <i2c_write+0x1e>
		{
			(DDR_I2C&=~(1<<SDA));
 390:	88 98       	cbi	0x11, 0	; 17
 392:	01 c0       	rjmp	.+2      	; 0x396 <i2c_write+0x20>
		}else
		{
			(DDR_I2C|=(1<<SDA));
 394:	88 9a       	sbi	0x11, 0	; 17
 396:	45 e0       	ldi	r20, 0x05	; 5
 398:	4a 95       	dec	r20
 39a:	f1 f7       	brne	.-4      	; 0x398 <i2c_write+0x22>
 39c:	00 00       	nop
		};
	    _delay_us(pause);   
        (DDR_I2C&=~(1<<SCL));
 39e:	89 98       	cbi	0x11, 1	; 17
 3a0:	45 e0       	ldi	r20, 0x05	; 5
 3a2:	4a 95       	dec	r20
 3a4:	f1 f7       	brne	.-4      	; 0x3a2 <i2c_write+0x2c>
 3a6:	00 00       	nop
 3a8:	21 50       	subi	r18, 0x01	; 1
 3aa:	31 09       	sbc	r19, r1
 3ac:	38 f7       	brcc	.-50     	; 0x37c <i2c_write+0x6>
		_delay_us(pause);             
    };
	(DDR_I2C&=~(1<<SDA));
 3ae:	88 98       	cbi	0x11, 0	; 17
	(DDR_I2C|=(1<<SCL));
 3b0:	89 9a       	sbi	0x11, 1	; 17
 3b2:	85 e0       	ldi	r24, 0x05	; 5
 3b4:	8a 95       	dec	r24
 3b6:	f1 f7       	brne	.-4      	; 0x3b4 <i2c_write+0x3e>
 3b8:	00 00       	nop
	_delay_us(pause);
	(DDR_I2C&=~(1<<SCL));
 3ba:	89 98       	cbi	0x11, 1	; 17
 3bc:	45 e0       	ldi	r20, 0x05	; 5
 3be:	4a 95       	dec	r20
 3c0:	f1 f7       	brne	.-4      	; 0x3be <i2c_write+0x48>
 3c2:	00 00       	nop
	_delay_us(pause);
	(DDR_I2C|=(1<<SCL));
 3c4:	89 9a       	sbi	0x11, 1	; 17
 3c6:	08 95       	ret

000003c8 <i2c_stop>:
*   Parameters :    нет
*   Purpose :       Стоп i2c
****************************************************************************/
void i2c_stop(void)            
{ 
    (DDR_I2C|=(1<<SDA)); _delay_us(pause);   
 3c8:	88 9a       	sbi	0x11, 0	; 17
 3ca:	85 e0       	ldi	r24, 0x05	; 5
 3cc:	8a 95       	dec	r24
 3ce:	f1 f7       	brne	.-4      	; 0x3cc <i2c_stop+0x4>
 3d0:	00 00       	nop
    (DDR_I2C&=~(1<<SCL)); _delay_us(pause);           
 3d2:	89 98       	cbi	0x11, 1	; 17
 3d4:	85 e0       	ldi	r24, 0x05	; 5
 3d6:	8a 95       	dec	r24
 3d8:	f1 f7       	brne	.-4      	; 0x3d6 <i2c_stop+0xe>
 3da:	00 00       	nop
    (DDR_I2C&=~(1<<SDA)); _delay_us(pause);                                 
 3dc:	88 98       	cbi	0x11, 0	; 17
 3de:	85 e0       	ldi	r24, 0x05	; 5
 3e0:	8a 95       	dec	r24
 3e2:	f1 f7       	brne	.-4      	; 0x3e0 <i2c_stop+0x18>
 3e4:	00 00       	nop
 3e6:	08 95       	ret

000003e8 <i2c_acknowledge>:
    return (check);      
};

void i2c_acknowledge(void)
{
	(DDR_I2C&=~(1<<SDA));
 3e8:	88 98       	cbi	0x11, 0	; 17
	//delayMicroseconds(1);
	(DDR_I2C|=(1<<SCL));
 3ea:	89 9a       	sbi	0x11, 1	; 17
 3ec:	85 e0       	ldi	r24, 0x05	; 5
 3ee:	8a 95       	dec	r24
 3f0:	f1 f7       	brne	.-4      	; 0x3ee <i2c_acknowledge+0x6>
 3f2:	00 00       	nop
	_delay_us(pause);
	(DDR_I2C&=~(1<<SCL));
 3f4:	89 98       	cbi	0x11, 1	; 17
 3f6:	08 95       	ret

000003f8 <PCF8574_Write>:

#include "i2c_lcd.h"

//****************************************************************************************
void PCF8574_Write(unsigned char data)
{
 3f8:	cf 93       	push	r28
 3fa:	c8 2f       	mov	r28, r24
	i2c_start();              //         |-[S]-|  ;Start Condition
 3fc:	0e 94 b0 01 	call	0x360	; 0x360 <i2c_start>
	i2c_write(PCF8574_ADDR | I2C_WRITE);    //         |---Slave address (PCF8574)--[A2=0,A1=0,A0=0]---|   +    |-R/W-|
 400:	8e e4       	ldi	r24, 0x4E	; 78
 402:	0e 94 bb 01 	call	0x376	; 0x376 <i2c_write>
	i2c_acknowledge();        //         |-[A]-|  ;Active LOW
 406:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <i2c_acknowledge>
	i2c_write(data);          //         |-------------------data to port-----------------------|
 40a:	8c 2f       	mov	r24, r28
 40c:	0e 94 bb 01 	call	0x376	; 0x376 <i2c_write>
	i2c_acknowledge();        //         |-[A]-|  ;Active LOW
 410:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <i2c_acknowledge>
	i2c_stop();               //         |-[P]-|  ;Stop Condition
 414:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <i2c_stop>
};
 418:	cf 91       	pop	r28
 41a:	08 95       	ret

0000041c <send_i2c_lcd_byte>:
//***************************************************************************************
//Procedure sending LCD byte
//Input: Byte, Kommand/Symbol data
//***************************************************************************************
void send_i2c_lcd_byte(unsigned char lcd_data, unsigned char rs_status ) //bool lcd_command,
{
 41c:	df 92       	push	r13
 41e:	ef 92       	push	r14
 420:	ff 92       	push	r15
 422:	0f 93       	push	r16
 424:	1f 93       	push	r17
 426:	cf 93       	push	r28
 428:	df 93       	push	r29
	//lcd_data=0x08;
	//---------------------------------------------------------------------------------------
	rs_status=rs_status*2;
 42a:	d6 2e       	mov	r13, r22
 42c:	dd 0c       	add	r13, r13
	PCF8574_Write(rs_status|E_L|((lcd_data<<1)&0xE0)|((lcd_data>>3)&0x10));
 42e:	e8 2e       	mov	r14, r24
 430:	f1 2c       	mov	r15, r1
 432:	e7 01       	movw	r28, r14
 434:	cc 0f       	add	r28, r28
 436:	dd 1f       	adc	r29, r29
 438:	18 2f       	mov	r17, r24
 43a:	16 95       	lsr	r17
 43c:	16 95       	lsr	r17
 43e:	16 95       	lsr	r17
 440:	d1 2f       	mov	r29, r17
 442:	d0 71       	andi	r29, 0x10	; 16
 444:	dd 29       	or	r29, r13
 446:	8c 2f       	mov	r24, r28
 448:	80 7e       	andi	r24, 0xE0	; 224
 44a:	d8 2b       	or	r29, r24
 44c:	8d 2f       	mov	r24, r29
 44e:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <PCF8574_Write>
 452:	85 e3       	ldi	r24, 0x35	; 53
 454:	8a 95       	dec	r24
 456:	f1 f7       	brne	.-4      	; 0x454 <send_i2c_lcd_byte+0x38>
 458:	00 00       	nop
	_delay_us(10);
	PCF8574_Write(rs_status|E_H|((lcd_data<<1)&0xE0)|((lcd_data>>3)&0x10));
 45a:	81 2f       	mov	r24, r17
 45c:	80 71       	andi	r24, 0x10	; 16
 45e:	8d 29       	or	r24, r13
 460:	88 60       	ori	r24, 0x08	; 8
 462:	9c 2f       	mov	r25, r28
 464:	90 7e       	andi	r25, 0xE0	; 224
 466:	89 2b       	or	r24, r25
 468:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <PCF8574_Write>
 46c:	95 e3       	ldi	r25, 0x35	; 53
 46e:	9a 95       	dec	r25
 470:	f1 f7       	brne	.-4      	; 0x46e <send_i2c_lcd_byte+0x52>
 472:	00 00       	nop
	_delay_us(10);
	PCF8574_Write(rs_status|E_L|((lcd_data<<1)&0xE0)|((lcd_data>>3)&0x10));
 474:	8d 2f       	mov	r24, r29
 476:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <PCF8574_Write>
 47a:	85 e3       	ldi	r24, 0x35	; 53
 47c:	8a 95       	dec	r24
 47e:	f1 f7       	brne	.-4      	; 0x47c <send_i2c_lcd_byte+0x60>
 480:	00 00       	nop
	_delay_us(10);
	PCF8574_Write(rs_status|E_L|((lcd_data<<5)&0xE0)|((lcd_data<<1)&0x10));
 482:	87 01       	movw	r16, r14
 484:	00 0f       	add	r16, r16
 486:	11 1f       	adc	r17, r17
 488:	02 95       	swap	r16
 48a:	12 95       	swap	r17
 48c:	10 7f       	andi	r17, 0xF0	; 240
 48e:	10 27       	eor	r17, r16
 490:	00 7f       	andi	r16, 0xF0	; 240
 492:	10 27       	eor	r17, r16
 494:	dd 2d       	mov	r29, r13
 496:	d0 2b       	or	r29, r16
 498:	8c 2f       	mov	r24, r28
 49a:	80 71       	andi	r24, 0x10	; 16
 49c:	d8 2b       	or	r29, r24
 49e:	8d 2f       	mov	r24, r29
 4a0:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <PCF8574_Write>
 4a4:	95 e3       	ldi	r25, 0x35	; 53
 4a6:	9a 95       	dec	r25
 4a8:	f1 f7       	brne	.-4      	; 0x4a6 <send_i2c_lcd_byte+0x8a>
 4aa:	00 00       	nop
	_delay_us(10);
	PCF8574_Write(rs_status|E_H|((lcd_data<<5)&0xE0)|((lcd_data<<1)&0x10));
 4ac:	8d 2d       	mov	r24, r13
 4ae:	88 60       	ori	r24, 0x08	; 8
 4b0:	08 2b       	or	r16, r24
 4b2:	8c 2f       	mov	r24, r28
 4b4:	80 71       	andi	r24, 0x10	; 16
 4b6:	80 2b       	or	r24, r16
 4b8:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <PCF8574_Write>
 4bc:	85 e3       	ldi	r24, 0x35	; 53
 4be:	8a 95       	dec	r24
 4c0:	f1 f7       	brne	.-4      	; 0x4be <send_i2c_lcd_byte+0xa2>
 4c2:	00 00       	nop
	_delay_us(10);
	PCF8574_Write(rs_status|E_L|((lcd_data<<5)&0xE0)|((lcd_data<<1)&0x10));
 4c4:	8d 2f       	mov	r24, r29
 4c6:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <PCF8574_Write>
 4ca:	87 ec       	ldi	r24, 0xC7	; 199
 4cc:	90 e0       	ldi	r25, 0x00	; 0
 4ce:	01 97       	sbiw	r24, 0x01	; 1
 4d0:	f1 f7       	brne	.-4      	; 0x4ce <send_i2c_lcd_byte+0xb2>
 4d2:	00 c0       	rjmp	.+0      	; 0x4d4 <send_i2c_lcd_byte+0xb8>
 4d4:	00 00       	nop

	
	
	
	
};
 4d6:	df 91       	pop	r29
 4d8:	cf 91       	pop	r28
 4da:	1f 91       	pop	r17
 4dc:	0f 91       	pop	r16
 4de:	ff 90       	pop	r15
 4e0:	ef 90       	pop	r14
 4e2:	df 90       	pop	r13
 4e4:	08 95       	ret

000004e6 <i2c_lcd_init>:
void i2c_lcd_init(void)
{
	//---------------------------------------------------------------------------------------
	//init i2c
	//---------------------------------------------------------------------------------------
	i2c_init();
 4e6:	0e 94 a7 01 	call	0x34e	; 0x34e <i2c_init>
	//---------------------------------------------------------------------------------------
	PCF8574_Write(0x00);//E = 0 RS= 0 R/W = 0
 4ea:	80 e0       	ldi	r24, 0x00	; 0
 4ec:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <PCF8574_Write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4f0:	8f e9       	ldi	r24, 0x9F	; 159
 4f2:	9f e0       	ldi	r25, 0x0F	; 15
 4f4:	01 97       	sbiw	r24, 0x01	; 1
 4f6:	f1 f7       	brne	.-4      	; 0x4f4 <i2c_lcd_init+0xe>
 4f8:	00 c0       	rjmp	.+0      	; 0x4fa <i2c_lcd_init+0x14>
 4fa:	00 00       	nop
	_delay_ms(1);
	//---------------------------------------------------------------------------------------
	//Function Set 3 ????? ?????? D4-D7 ????????????? bus
	PCF8574_Write(0x60);      //1    0x20 + 0x03
 4fc:	80 e6       	ldi	r24, 0x60	; 96
 4fe:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <PCF8574_Write>
 502:	8f e9       	ldi	r24, 0x9F	; 159
 504:	9f e0       	ldi	r25, 0x0F	; 15
 506:	01 97       	sbiw	r24, 0x01	; 1
 508:	f1 f7       	brne	.-4      	; 0x506 <i2c_lcd_init+0x20>
 50a:	00 c0       	rjmp	.+0      	; 0x50c <i2c_lcd_init+0x26>
 50c:	00 00       	nop
	_delay_ms(1);
	PCF8574_Write(0x40);
 50e:	80 e4       	ldi	r24, 0x40	; 64
 510:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <PCF8574_Write>
 514:	8f e9       	ldi	r24, 0x9F	; 159
 516:	9f e0       	ldi	r25, 0x0F	; 15
 518:	01 97       	sbiw	r24, 0x01	; 1
 51a:	f1 f7       	brne	.-4      	; 0x518 <i2c_lcd_init+0x32>
 51c:	00 c0       	rjmp	.+0      	; 0x51e <i2c_lcd_init+0x38>
 51e:	00 00       	nop
	_delay_ms(1);
	PCF8574_Write(E_H|0x40);     //2
 520:	88 e4       	ldi	r24, 0x48	; 72
 522:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <PCF8574_Write>
 526:	8f e9       	ldi	r24, 0x9F	; 159
 528:	9f e0       	ldi	r25, 0x0F	; 15
 52a:	01 97       	sbiw	r24, 0x01	; 1
 52c:	f1 f7       	brne	.-4      	; 0x52a <i2c_lcd_init+0x44>
 52e:	00 c0       	rjmp	.+0      	; 0x530 <i2c_lcd_init+0x4a>
 530:	00 00       	nop
	_delay_ms(1);
	PCF8574_Write(E_L|0x40);
 532:	80 e4       	ldi	r24, 0x40	; 64
 534:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <PCF8574_Write>
 538:	8f e9       	ldi	r24, 0x9F	; 159
 53a:	9f e0       	ldi	r25, 0x0F	; 15
 53c:	01 97       	sbiw	r24, 0x01	; 1
 53e:	f1 f7       	brne	.-4      	; 0x53c <i2c_lcd_init+0x56>
 540:	00 c0       	rjmp	.+0      	; 0x542 <i2c_lcd_init+0x5c>
 542:	00 00       	nop
	_delay_ms(1);
	//---------------------------------------------------------------------------------------
	send_i2c_lcd_byte(0x28,lcd_kom);			//2 lines, 5*8 pixels, 8bit data
 544:	60 e0       	ldi	r22, 0x00	; 0
 546:	88 e2       	ldi	r24, 0x28	; 40
 548:	0e 94 0e 02 	call	0x41c	; 0x41c <send_i2c_lcd_byte>
	send_i2c_lcd_byte(0x0C,lcd_kom);			//screen enable,
 54c:	60 e0       	ldi	r22, 0x00	; 0
 54e:	8c e0       	ldi	r24, 0x0C	; 12
 550:	0e 94 0e 02 	call	0x41c	; 0x41c <send_i2c_lcd_byte>
	send_i2c_lcd_byte(0x06,lcd_kom);			//auto shift left enable
 554:	60 e0       	ldi	r22, 0x00	; 0
 556:	86 e0       	ldi	r24, 0x06	; 6
 558:	0e 94 0e 02 	call	0x41c	; 0x41c <send_i2c_lcd_byte>
	send_i2c_lcd_byte(0x01,lcd_kom);			//0x01 clear screen
 55c:	60 e0       	ldi	r22, 0x00	; 0
 55e:	81 e0       	ldi	r24, 0x01	; 1
 560:	0e 94 0e 02 	call	0x41c	; 0x41c <send_i2c_lcd_byte>
 564:	9f ef       	ldi	r25, 0xFF	; 255
 566:	29 ef       	ldi	r18, 0xF9	; 249
 568:	80 e0       	ldi	r24, 0x00	; 0
 56a:	91 50       	subi	r25, 0x01	; 1
 56c:	20 40       	sbci	r18, 0x00	; 0
 56e:	80 40       	sbci	r24, 0x00	; 0
 570:	e1 f7       	brne	.-8      	; 0x56a <i2c_lcd_init+0x84>
 572:	00 c0       	rjmp	.+0      	; 0x574 <i2c_lcd_init+0x8e>
 574:	00 00       	nop
 576:	08 95       	ret

00000578 <__vector_18>:

#include "rs485_0.h"

//****************************************************************************************
ISR(USART0_RX_vect)
{
 578:	1f 92       	push	r1
 57a:	0f 92       	push	r0
 57c:	0f b6       	in	r0, 0x3f	; 63
 57e:	0f 92       	push	r0
 580:	11 24       	eor	r1, r1
 582:	2f 93       	push	r18
 584:	8f 93       	push	r24
 586:	9f 93       	push	r25
 588:	ef 93       	push	r30
 58a:	ff 93       	push	r31
	uint8_t byte;
	uint8_t wr = (uart_0_rxwr+1) & UART_BUFEND_0_;
 58c:	e0 91 38 01 	lds	r30, 0x0138
 590:	81 e0       	ldi	r24, 0x01	; 1
 592:	8e 0f       	add	r24, r30
 594:	8f 70       	andi	r24, 0x0F	; 15
	byte = UDR0;
 596:	2c b1       	in	r18, 0x0c	; 12
	if(wr != uart_0_rxrd)
 598:	90 91 39 01 	lds	r25, 0x0139
 59c:	89 17       	cp	r24, r25
 59e:	31 f0       	breq	.+12     	; 0x5ac <__vector_18+0x34>
	{
		uart_0_rx[uart_0_rxwr] = byte;
 5a0:	f0 e0       	ldi	r31, 0x00	; 0
 5a2:	e9 5d       	subi	r30, 0xD9	; 217
 5a4:	fe 4f       	sbci	r31, 0xFE	; 254
 5a6:	20 83       	st	Z, r18
		uart_0_rxwr = wr;
 5a8:	80 93 38 01 	sts	0x0138, r24
	};
};
 5ac:	ff 91       	pop	r31
 5ae:	ef 91       	pop	r30
 5b0:	9f 91       	pop	r25
 5b2:	8f 91       	pop	r24
 5b4:	2f 91       	pop	r18
 5b6:	0f 90       	pop	r0
 5b8:	0f be       	out	0x3f, r0	; 63
 5ba:	0f 90       	pop	r0
 5bc:	1f 90       	pop	r1
 5be:	18 95       	reti

000005c0 <__vector_19>:
//****************************************************************************************
ISR(USART0_UDRE_vect)
{
 5c0:	1f 92       	push	r1
 5c2:	0f 92       	push	r0
 5c4:	0f b6       	in	r0, 0x3f	; 63
 5c6:	0f 92       	push	r0
 5c8:	11 24       	eor	r1, r1
 5ca:	8f 93       	push	r24
 5cc:	9f 93       	push	r25
 5ce:	ef 93       	push	r30
 5d0:	ff 93       	push	r31
	uint8_t rd = uart_0_txrd;
 5d2:	80 91 37 01 	lds	r24, 0x0137
	if(rd != uart_0_txwr)
 5d6:	90 91 26 01 	lds	r25, 0x0126
 5da:	89 17       	cp	r24, r25
 5dc:	59 f0       	breq	.+22     	; 0x5f4 <__vector_19+0x34>
	{
		UDR0 = uart_0_tx[rd];
 5de:	e8 2f       	mov	r30, r24
 5e0:	f0 e0       	ldi	r31, 0x00	; 0
 5e2:	e6 5c       	subi	r30, 0xC6	; 198
 5e4:	fe 4f       	sbci	r31, 0xFE	; 254
 5e6:	90 81       	ld	r25, Z
 5e8:	9c b9       	out	0x0c, r25	; 12
		uart_0_txrd = (rd+1) & UART_BUFEND_0_;
 5ea:	8f 5f       	subi	r24, 0xFF	; 255
 5ec:	8f 70       	andi	r24, 0x0F	; 15
 5ee:	80 93 37 01 	sts	0x0137, r24
		return;
 5f2:	08 c0       	rjmp	.+16     	; 0x604 <__vector_19+0x44>
	}else
	{

	};
	UCSR0B &= ~(1<<UDRIE0);
 5f4:	55 98       	cbi	0x0a, 5	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 5f6:	87 ee       	ldi	r24, 0xE7	; 231
 5f8:	93 e0       	ldi	r25, 0x03	; 3
 5fa:	01 97       	sbiw	r24, 0x01	; 1
 5fc:	f1 f7       	brne	.-4      	; 0x5fa <__vector_19+0x3a>
 5fe:	00 c0       	rjmp	.+0      	; 0x600 <__vector_19+0x40>
 600:	00 00       	nop
	_delay_us(250);
	TXD_DISABLE
 602:	1a 98       	cbi	0x03, 2	; 3
};
 604:	ff 91       	pop	r31
 606:	ef 91       	pop	r30
 608:	9f 91       	pop	r25
 60a:	8f 91       	pop	r24
 60c:	0f 90       	pop	r0
 60e:	0f be       	out	0x3f, r0	; 63
 610:	0f 90       	pop	r0
 612:	1f 90       	pop	r1
 614:	18 95       	reti

00000616 <__vector_20>:
//****************************************************************************************
ISR(USART0_TX_vect)
{
 616:	1f 92       	push	r1
 618:	0f 92       	push	r0
 61a:	0f b6       	in	r0, 0x3f	; 63
 61c:	0f 92       	push	r0
 61e:	11 24       	eor	r1, r1
	//TXD_DISABLE
};
 620:	0f 90       	pop	r0
 622:	0f be       	out	0x3f, r0	; 63
 624:	0f 90       	pop	r0
 626:	1f 90       	pop	r1
 628:	18 95       	reti

0000062a <rs485_0_init>:
	};
};
//****************************************************************************************
void rs485_0_init()
{
	(PORT_TXDE&=~(1<<TXDE));
 62a:	1a 98       	cbi	0x03, 2	; 3
	(DDR_TXDE|=(1<<TXDE));
 62c:	12 9a       	sbi	0x02, 2	; 2
	//UBRR0L = (F_CPU+UART_RATE/8)/(UART_RATE/16)-1;
	//UBRR0H = ((F_CPU+UART_RATE/8)/(UART_RATE/16)-1)>>8;
	UBRR0L = F_CPU/UART_BAUD_RATE_0_/16-1;
 62e:	89 e1       	ldi	r24, 0x19	; 25
 630:	89 b9       	out	0x09, r24	; 9
	UBRR0H = (F_CPU/UART_BAUD_RATE_0_/16-1)>>8;
 632:	10 92 90 00 	sts	0x0090, r1
	UCSR0B = (1<<RXCIE0)|(1<<RXEN0)|(1<<TXEN0);
 636:	88 e9       	ldi	r24, 0x98	; 152
 638:	8a b9       	out	0x0a, r24	; 10
 63a:	08 95       	ret

0000063c <BUT_Init>:
*   Purpose :       РёРЅРёС†РёР°Р»РёР·Р°С†РёСЏ РїРѕСЂС‚РѕРІ РІРІРѕРґР°/РІС‹РІРѕРґР°
*                   РІС‹Р·С‹РІР°РµС‚СЃСЏ РѕР±С‹С‡РЅРѕ РІ РЅР°С‡Р°Р»Рµ main`a
****************************************************************************/
void BUT_Init(void)
{
	DDRX_BUTTON &= ~(MASK_BUTTON);
 63c:	84 b3       	in	r24, 0x14	; 20
 63e:	80 7c       	andi	r24, 0xC0	; 192
 640:	84 bb       	out	0x14, r24	; 20
	PORT_BUTTON |= MASK_BUTTON;
 642:	85 b3       	in	r24, 0x15	; 21
 644:	8f 63       	ori	r24, 0x3F	; 63
 646:	85 bb       	out	0x15, r24	; 21
 648:	08 95       	ret

0000064a <BUT_Debrief>:
void BUT_Debrief(void)
{
	//---------------------------------------------------------------------------------------
	unsigned char key;
	//---------------------------------------------------------------------------------------
	if((((PIN_BUTTON)>>(OK))&1)==0)
 64a:	98 9b       	sbis	0x13, 0	; 19
 64c:	1a c0       	rjmp	.+52     	; 0x682 <BUT_Debrief+0x38>
	{
		key = KEY_OK;
	}else if ((((PIN_BUTTON)>>(UP))&1)==0)
 64e:	99 9b       	sbis	0x13, 1	; 19
 650:	1a c0       	rjmp	.+52     	; 0x686 <BUT_Debrief+0x3c>
	{
		key = KEY_DOWN;
	}else if ((((PIN_BUTTON)>>(DOWN))&1)==0)
 652:	9a 9b       	sbis	0x13, 2	; 19
 654:	1a c0       	rjmp	.+52     	; 0x68a <BUT_Debrief+0x40>
	{
		key = KEY_UP;
	}else if ((((PIN_BUTTON)>>(RIGHT))&1)==0)
 656:	9b 9b       	sbis	0x13, 3	; 19
 658:	1a c0       	rjmp	.+52     	; 0x68e <BUT_Debrief+0x44>
	{
		key = KEY_RIGHT;
	}
	else if ((((PIN_BUTTON)>>(LEFT))&1)==0)
 65a:	9c 9b       	sbis	0x13, 4	; 19
 65c:	1a c0       	rjmp	.+52     	; 0x692 <BUT_Debrief+0x48>
	{
		key = KEY_LEFT;
	}
	else if ((((PIN_BUTTON)>>(KEY_ESC))&1)==0)
 65e:	9e 9b       	sbis	0x13, 6	; 19
 660:	1a c0       	rjmp	.+52     	; 0x696 <BUT_Debrief+0x4c>
 662:	0c c0       	rjmp	.+24     	; 0x67c <BUT_Debrief+0x32>
	{
		//Рё РµСЃР»Рё РєРЅРѕРїРєР° СѓРґРµСЂР¶РёРІР°РµС‚СЃСЏ РґРѕР»РіРѕ
		//Р·Р°РїРёСЃР°С‚СЊ РµРµ РЅРѕРјРµСЂ РІ Р±СѓС„РµСЂ
		if (comp == THRESHOLD)
		{
			comp = THRESHOLD+10;
 664:	8f e0       	ldi	r24, 0x0F	; 15
 666:	80 93 24 01 	sts	0x0124, r24
			pressedKey = key;
 66a:	90 93 25 01 	sts	0x0125, r25
			return;
 66e:	08 95       	ret
		}
		else if (comp < (THRESHOLD+5))
 670:	8a 30       	cpi	r24, 0x0A	; 10
 672:	b8 f4       	brcc	.+46     	; 0x6a2 <BUT_Debrief+0x58>
		{
			comp++;
 674:	8f 5f       	subi	r24, 0xFF	; 255
 676:	80 93 24 01 	sts	0x0124, r24
 67a:	08 95       	ret
		};
	}
	else
	{
		comp=0;
 67c:	10 92 24 01 	sts	0x0124, r1
 680:	08 95       	ret
	//---------------------------------------------------------------------------------------
	unsigned char key;
	//---------------------------------------------------------------------------------------
	if((((PIN_BUTTON)>>(OK))&1)==0)
	{
		key = KEY_OK;
 682:	91 e0       	ldi	r25, 0x01	; 1
 684:	09 c0       	rjmp	.+18     	; 0x698 <BUT_Debrief+0x4e>
	}else if ((((PIN_BUTTON)>>(UP))&1)==0)
	{
		key = KEY_DOWN;
 686:	93 e0       	ldi	r25, 0x03	; 3
 688:	07 c0       	rjmp	.+14     	; 0x698 <BUT_Debrief+0x4e>
	}else if ((((PIN_BUTTON)>>(DOWN))&1)==0)
	{
		key = KEY_UP;
 68a:	92 e0       	ldi	r25, 0x02	; 2
 68c:	05 c0       	rjmp	.+10     	; 0x698 <BUT_Debrief+0x4e>
	}else if ((((PIN_BUTTON)>>(RIGHT))&1)==0)
	{
		key = KEY_RIGHT;
 68e:	94 e0       	ldi	r25, 0x04	; 4
 690:	03 c0       	rjmp	.+6      	; 0x698 <BUT_Debrief+0x4e>
	}
	else if ((((PIN_BUTTON)>>(LEFT))&1)==0)
	{
		key = KEY_LEFT;
 692:	95 e0       	ldi	r25, 0x05	; 5
 694:	01 c0       	rjmp	.+2      	; 0x698 <BUT_Debrief+0x4e>
	}
	else if ((((PIN_BUTTON)>>(KEY_ESC))&1)==0)
	{
		key = KEY_ESC;
 696:	96 e0       	ldi	r25, 0x06	; 6
	//РµСЃР»Рё РІРѕ РІСЂРµРјРµРЅРЅРѕР№ РїРµСЂРµРјРµРЅРЅРѕР№ С‡С‚Рѕ-С‚Рѕ РµСЃС‚СЊ
	if (key!=0)
	{
		//Рё РµСЃР»Рё РєРЅРѕРїРєР° СѓРґРµСЂР¶РёРІР°РµС‚СЃСЏ РґРѕР»РіРѕ
		//Р·Р°РїРёСЃР°С‚СЊ РµРµ РЅРѕРјРµСЂ РІ Р±СѓС„РµСЂ
		if (comp == THRESHOLD)
 698:	80 91 24 01 	lds	r24, 0x0124
 69c:	85 30       	cpi	r24, 0x05	; 5
 69e:	41 f7       	brne	.-48     	; 0x670 <BUT_Debrief+0x26>
 6a0:	e1 cf       	rjmp	.-62     	; 0x664 <BUT_Debrief+0x1a>
 6a2:	08 95       	ret

000006a4 <_exit>:
 6a4:	f8 94       	cli

000006a6 <__stop_program>:
 6a6:	ff cf       	rjmp	.-2      	; 0x6a6 <__stop_program>
