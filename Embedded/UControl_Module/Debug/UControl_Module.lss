
UControl_Module.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00000684  00000718  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000684  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000004a  00800100  00800100  00000718  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000718  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000228  00000000  00000000  00000748  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001df6  00000000  00000000  00000970  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000946  00000000  00000000  00002766  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000c88  00000000  00000000  000030ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000005cc  00000000  00000000  00003d34  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005df  00000000  00000000  00004300  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001257  00000000  00000000  000048df  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001e0  00000000  00000000  00005b36  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:

char const _BURN_OK_[]			PROGMEM = "  Hello  world  ";

//****************************************************************************************
void Main_menu_i2c (unsigned char data)
{
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
	set_i2c_lcd_position(1,1);
   4:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
   8:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
	send_i2c_lcd_string_P(_BURN_OK_);
   c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  10:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
	set_i2c_lcd_position(2,1);
  14:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  18:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
	detect_i2c_string(data);				// Виводим на дисплей
  1c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  20:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
};			//Main_menu
  24:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  28:	0c 94 78 01 	jmp	0x2f0	; 0x2f0 <__vector_10>
  2c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  30:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  34:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  38:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__vector_14>
  3c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  40:	0c 94 44 01 	jmp	0x288	; 0x288 <__vector_16>
  44:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  48:	0c 94 de 02 	jmp	0x5bc	; 0x5bc <__vector_18>
  4c:	0c 94 02 03 	jmp	0x604	; 0x604 <__vector_19>
  50:	0c 94 2d 03 	jmp	0x65a	; 0x65a <__vector_20>
  54:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  58:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  5c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  60:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  64:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  68:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  6c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  70:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  74:	0c 94 82 01 	jmp	0x304	; 0x304 <__vector_29>
  78:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__vector_30>
  7c:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__vector_31>
  80:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  84:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  88:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	aa 34       	cpi	r26, 0x4A	; 74
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	0e 94 8c 01 	call	0x318	; 0x318 <main>
  ac:	0c 94 40 03 	jmp	0x680	; 0x680 <_exit>

000000b0 <__bad_interrupt>:
  b0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b4 <__vector_30>:

#include "buart_1.h"

//****************************************************************************************
ISR(USART1_RX_vect)
{
  b4:	1f 92       	push	r1
  b6:	0f 92       	push	r0
  b8:	0f b6       	in	r0, 0x3f	; 63
  ba:	0f 92       	push	r0
  bc:	11 24       	eor	r1, r1
  be:	2f 93       	push	r18
  c0:	8f 93       	push	r24
  c2:	9f 93       	push	r25
  c4:	ef 93       	push	r30
  c6:	ff 93       	push	r31
	uint8_t byte;
	uint8_t wr = (uart_1_rxwr+1) & UART_BUFEND_1_;
  c8:	e0 91 24 01 	lds	r30, 0x0124
  cc:	81 e0       	ldi	r24, 0x01	; 1
  ce:	8e 0f       	add	r24, r30
  d0:	8f 70       	andi	r24, 0x0F	; 15
	byte = UDR1;
  d2:	20 91 9c 00 	lds	r18, 0x009C
	if(wr != uart_1_rxrd)
  d6:	90 91 25 01 	lds	r25, 0x0125
  da:	89 17       	cp	r24, r25
  dc:	31 f0       	breq	.+12     	; 0xea <__vector_30+0x36>
	{
		uart_1_rx[uart_1_rxwr] = byte;
  de:	f0 e0       	ldi	r31, 0x00	; 0
  e0:	ed 5e       	subi	r30, 0xED	; 237
  e2:	fe 4f       	sbci	r31, 0xFE	; 254
  e4:	20 83       	st	Z, r18
		uart_1_rxwr = wr;
  e6:	80 93 24 01 	sts	0x0124, r24
	};
};
  ea:	ff 91       	pop	r31
  ec:	ef 91       	pop	r30
  ee:	9f 91       	pop	r25
  f0:	8f 91       	pop	r24
  f2:	2f 91       	pop	r18
  f4:	0f 90       	pop	r0
  f6:	0f be       	out	0x3f, r0	; 63
  f8:	0f 90       	pop	r0
  fa:	1f 90       	pop	r1
  fc:	18 95       	reti

000000fe <__vector_31>:
//****************************************************************************************
ISR(USART1_UDRE_vect)
{
  fe:	1f 92       	push	r1
 100:	0f 92       	push	r0
 102:	0f b6       	in	r0, 0x3f	; 63
 104:	0f 92       	push	r0
 106:	11 24       	eor	r1, r1
 108:	8f 93       	push	r24
 10a:	9f 93       	push	r25
 10c:	ef 93       	push	r30
 10e:	ff 93       	push	r31
	uint8_t rd = uart_1_txrd;
 110:	80 91 02 01 	lds	r24, 0x0102
	if(rd != uart_1_txwr)
 114:	90 91 23 01 	lds	r25, 0x0123
 118:	89 17       	cp	r24, r25
 11a:	61 f0       	breq	.+24     	; 0x134 <__vector_31+0x36>
	{
		UDR1 = uart_1_tx[rd];
 11c:	e8 2f       	mov	r30, r24
 11e:	f0 e0       	ldi	r31, 0x00	; 0
 120:	ed 5f       	subi	r30, 0xFD	; 253
 122:	fe 4f       	sbci	r31, 0xFE	; 254
 124:	90 81       	ld	r25, Z
 126:	90 93 9c 00 	sts	0x009C, r25
		uart_1_txrd = (rd+1) & UART_BUFEND_1_;
 12a:	8f 5f       	subi	r24, 0xFF	; 255
 12c:	8f 70       	andi	r24, 0x0F	; 15
 12e:	80 93 02 01 	sts	0x0102, r24
		return;
 132:	05 c0       	rjmp	.+10     	; 0x13e <__vector_31+0x40>
	};
	UCSR1B &= ~(1<<UDRIE1);
 134:	ea e9       	ldi	r30, 0x9A	; 154
 136:	f0 e0       	ldi	r31, 0x00	; 0
 138:	80 81       	ld	r24, Z
 13a:	8f 7d       	andi	r24, 0xDF	; 223
 13c:	80 83       	st	Z, r24
};
 13e:	ff 91       	pop	r31
 140:	ef 91       	pop	r30
 142:	9f 91       	pop	r25
 144:	8f 91       	pop	r24
 146:	0f 90       	pop	r0
 148:	0f be       	out	0x3f, r0	; 63
 14a:	0f 90       	pop	r0
 14c:	1f 90       	pop	r1
 14e:	18 95       	reti

00000150 <uart_1_init>:
	};
};
//****************************************************************************************
void uart_1_init()
{
	UBRR1L = F_CPU/UART_BAUD_RATE_1_/16-1;
 150:	89 e1       	ldi	r24, 0x19	; 25
 152:	80 93 99 00 	sts	0x0099, r24
	UBRR1H = (F_CPU/UART_BAUD_RATE_1_/16-1)>>8;
 156:	10 92 98 00 	sts	0x0098, r1
	UCSR1B = (1<<RXCIE1)|(1<<RXEN1)|(1<<TXEN1);
 15a:	88 e9       	ldi	r24, 0x98	; 152
 15c:	80 93 9a 00 	sts	0x009A, r24
 160:	08 95       	ret

00000162 <BUT_Init>:
*   Purpose :       инициализация портов ввода/вывода
*                   вызывается обычно в начале main`a
****************************************************************************/
void BUT_Init(void)
{
	DDRX_BUTTON &= ~(MASK_BUTTONS);
 162:	84 b3       	in	r24, 0x14	; 20
 164:	80 7c       	andi	r24, 0xC0	; 192
 166:	84 bb       	out	0x14, r24	; 20
	PORT_BUTTON |= MASK_BUTTONS;
 168:	85 b3       	in	r24, 0x15	; 21
 16a:	8f 63       	ori	r24, 0x3F	; 63
 16c:	85 bb       	out	0x15, r24	; 21
 16e:	08 95       	ret

00000170 <BUT_Debrief>:
void BUT_Debrief(void)
{
	//---------------------------------------------------------------------------------------
	unsigned char key;
	//---------------------------------------------------------------------------------------
	if((((PIN_BUTTON)>>(OK))&1)==0)
 170:	98 9b       	sbis	0x13, 0	; 19
 172:	1a c0       	rjmp	.+52     	; 0x1a8 <BUT_Debrief+0x38>
	{
		key = KEY_OK;
	}else if ((((PIN_BUTTON)>>(UP))&1)==0)
 174:	99 9b       	sbis	0x13, 1	; 19
 176:	1a c0       	rjmp	.+52     	; 0x1ac <BUT_Debrief+0x3c>
	{
		key = KEY_DOWN;
	}else if ((((PIN_BUTTON)>>(DOWN))&1)==0)
 178:	9a 9b       	sbis	0x13, 2	; 19
 17a:	1a c0       	rjmp	.+52     	; 0x1b0 <BUT_Debrief+0x40>
	{
		key = KEY_UP;
	}else if ((((PIN_BUTTON)>>(RIGHT))&1)==0)
 17c:	9b 9b       	sbis	0x13, 3	; 19
 17e:	1a c0       	rjmp	.+52     	; 0x1b4 <BUT_Debrief+0x44>
	{
		key = KEY_RIGHT;
	}
	else if ((((PIN_BUTTON)>>(LEFT))&1)==0)
 180:	9c 9b       	sbis	0x13, 4	; 19
 182:	1a c0       	rjmp	.+52     	; 0x1b8 <BUT_Debrief+0x48>
	{
		key = KEY_LEFT;
	}
	else if ((((PIN_BUTTON)>>(KEY_ESC))&1)==0)
 184:	9e 9b       	sbis	0x13, 6	; 19
 186:	1a c0       	rjmp	.+52     	; 0x1bc <BUT_Debrief+0x4c>
 188:	0c c0       	rjmp	.+24     	; 0x1a2 <BUT_Debrief+0x32>
		{
			//и если кнопка удерживается долго
			//записать ее номер в буфер
			if (comp == THRESHOLD)
			{
				comp = THRESHOLD+10;
 18a:	8f e0       	ldi	r24, 0x0F	; 15
 18c:	80 93 00 01 	sts	0x0100, r24
				pressedKey = key;
 190:	90 93 01 01 	sts	0x0101, r25
				return;
 194:	08 95       	ret
			}
			else if (comp < (THRESHOLD+5))
 196:	8a 30       	cpi	r24, 0x0A	; 10
 198:	b8 f4       	brcc	.+46     	; 0x1c8 <BUT_Debrief+0x58>
			{
				comp++;
 19a:	8f 5f       	subi	r24, 0xFF	; 255
 19c:	80 93 00 01 	sts	0x0100, r24
 1a0:	08 95       	ret
			};
		}
		else
		{
			comp=0;
 1a2:	10 92 00 01 	sts	0x0100, r1
 1a6:	08 95       	ret
	//---------------------------------------------------------------------------------------
	unsigned char key;
	//---------------------------------------------------------------------------------------
	if((((PIN_BUTTON)>>(OK))&1)==0)
	{
		key = KEY_OK;
 1a8:	91 e0       	ldi	r25, 0x01	; 1
 1aa:	09 c0       	rjmp	.+18     	; 0x1be <BUT_Debrief+0x4e>
	}else if ((((PIN_BUTTON)>>(UP))&1)==0)
	{
		key = KEY_DOWN;
 1ac:	93 e0       	ldi	r25, 0x03	; 3
 1ae:	07 c0       	rjmp	.+14     	; 0x1be <BUT_Debrief+0x4e>
	}else if ((((PIN_BUTTON)>>(DOWN))&1)==0)
	{
		key = KEY_UP;
 1b0:	92 e0       	ldi	r25, 0x02	; 2
 1b2:	05 c0       	rjmp	.+10     	; 0x1be <BUT_Debrief+0x4e>
	}else if ((((PIN_BUTTON)>>(RIGHT))&1)==0)
	{
		key = KEY_RIGHT;
 1b4:	94 e0       	ldi	r25, 0x04	; 4
 1b6:	03 c0       	rjmp	.+6      	; 0x1be <BUT_Debrief+0x4e>
	}
	else if ((((PIN_BUTTON)>>(LEFT))&1)==0)
	{
		key = KEY_LEFT;
 1b8:	95 e0       	ldi	r25, 0x05	; 5
 1ba:	01 c0       	rjmp	.+2      	; 0x1be <BUT_Debrief+0x4e>
	}
	else if ((((PIN_BUTTON)>>(KEY_ESC))&1)==0)
	{
		key = KEY_ESC;
 1bc:	96 e0       	ldi	r25, 0x06	; 6
		//если во временной переменной что-то есть
		if (key!=0)
		{
			//и если кнопка удерживается долго
			//записать ее номер в буфер
			if (comp == THRESHOLD)
 1be:	80 91 00 01 	lds	r24, 0x0100
 1c2:	85 30       	cpi	r24, 0x05	; 5
 1c4:	41 f7       	brne	.-48     	; 0x196 <BUT_Debrief+0x26>
 1c6:	e1 cf       	rjmp	.-62     	; 0x18a <BUT_Debrief+0x1a>
 1c8:	08 95       	ret

000001ca <init_mcu>:
	
// Input/Output Ports initialization
// Port A initialization
// Func7=Out Func6=Out Func5=Out Func4=Out Func3=Out Func2=Out Func1=In Func0=Out
// State7=0 State6=0 State5=0 State4=0 State3=0 State2=0 State1=T State0=0
PORTA=0x00;
 1ca:	1b ba       	out	0x1b, r1	; 27
DDRA=0xFD;
 1cc:	8d ef       	ldi	r24, 0xFD	; 253
 1ce:	8a bb       	out	0x1a, r24	; 26

// Port B initialization
// Func7=Out Func6=Out Func5=Out Func4=Out Func3=Out Func2=In Func1=In Func0=In
// State7=0 State6=0 State5=0 State4=0 State3=0 State2=T State1=T State0=T
PORTB=0x00;
 1d0:	18 ba       	out	0x18, r1	; 24
DDRB=0xF8;
 1d2:	88 ef       	ldi	r24, 0xF8	; 248
 1d4:	87 bb       	out	0x17, r24	; 23

// Port C initialization
// Func7=Out Func6=Out Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
// State7=0 State6=1 State5=P State4=P State3=P State2=P State1=P State0=P
PORTC=0x7F;
 1d6:	8f e7       	ldi	r24, 0x7F	; 127
 1d8:	85 bb       	out	0x15, r24	; 21
DDRC=0xC0;
 1da:	80 ec       	ldi	r24, 0xC0	; 192
 1dc:	84 bb       	out	0x14, r24	; 20

// Port D initialization
// Func7=Out Func6=In Func5=Out Func4=In Func3=In Func2=In Func1=In Func0=In
// State7=0 State6=T State5=0 State4=T State3=T State2=T State1=T State0=T
PORTD=0x00;
 1de:	12 ba       	out	0x12, r1	; 18
DDRD=0xA0;
 1e0:	80 ea       	ldi	r24, 0xA0	; 160
 1e2:	81 bb       	out	0x11, r24	; 17

// Port E initialization
// Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
// State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
PORTE=0x00;
 1e4:	13 b8       	out	0x03, r1	; 3
DDRE=0x00;
 1e6:	12 b8       	out	0x02, r1	; 2

// Port F initialization
// Func7=In Func6=In Func5=In Func4=In Func3=Out Func2=Out Func1=Out Func0=In
// State7=T State6=T State5=T State4=T State3=0 State2=0 State1=0 State0=P
PORTF=0x01;
 1e8:	81 e0       	ldi	r24, 0x01	; 1
 1ea:	80 93 62 00 	sts	0x0062, r24
DDRF=0x0E;
 1ee:	8e e0       	ldi	r24, 0x0E	; 14
 1f0:	80 93 61 00 	sts	0x0061, r24

// Port G initialization
// Func4=Out Func3=Out Func2=In Func1=Out Func0=Out
// State4=0 State3=0 State2=T State1=1 State0=1
PORTG=0x03;
 1f4:	83 e0       	ldi	r24, 0x03	; 3
 1f6:	80 93 65 00 	sts	0x0065, r24
DDRG=0x1B;
 1fa:	8b e1       	ldi	r24, 0x1B	; 27
 1fc:	80 93 64 00 	sts	0x0064, r24
// Timer/Counter 0 initialization
// Clock source: System Clock
// Clock value: 62,500 kHz
// Mode: Normal top=0xFF
// OC0 output: Disconnected
ASSR=0x00;
 200:	10 be       	out	0x30, r1	; 48
TCCR0=0x06;
 202:	86 e0       	ldi	r24, 0x06	; 6
 204:	83 bf       	out	0x33, r24	; 51
TCNT0=0x00;
 206:	12 be       	out	0x32, r1	; 50
OCR0=0x00;
 208:	11 be       	out	0x31, r1	; 49
// Timer1 Overflow Interrupt: On
// Input Capture Interrupt: Off
// Compare A Match Interrupt: Off
// Compare B Match Interrupt: Off
// Compare C Match Interrupt: Off
TCCR1A=0x00;
 20a:	1f bc       	out	0x2f, r1	; 47
TCCR1B=0x04;
 20c:	84 e0       	ldi	r24, 0x04	; 4
 20e:	8e bd       	out	0x2e, r24	; 46
TCNT1H=0x0B;
 210:	9b e0       	ldi	r25, 0x0B	; 11
 212:	9d bd       	out	0x2d, r25	; 45
TCNT1L=0xDC;
 214:	9c ed       	ldi	r25, 0xDC	; 220
 216:	9c bd       	out	0x2c, r25	; 44
ICR1H=0x00;
 218:	17 bc       	out	0x27, r1	; 39
ICR1L=0x00;
 21a:	16 bc       	out	0x26, r1	; 38
OCR1AH=0x00;
 21c:	1b bc       	out	0x2b, r1	; 43
OCR1AL=0x00;
 21e:	1a bc       	out	0x2a, r1	; 42
OCR1BH=0x00;
 220:	19 bc       	out	0x29, r1	; 41
OCR1BL=0x00;
 222:	18 bc       	out	0x28, r1	; 40
OCR1CH=0x00;
 224:	10 92 79 00 	sts	0x0079, r1
OCR1CL=0x00;
 228:	10 92 78 00 	sts	0x0078, r1
// Clock value: 16000,000 kHz
// Mode: Fast PWM top=0xFF
// OC2 output: Non-Inverted PWM
//TCCR2=0x69;

TCCR2=0x00;
 22c:	15 bc       	out	0x25, r1	; 37
TCNT2=0x00;
 22e:	14 bc       	out	0x24, r1	; 36
OCR2=0x00;
 230:	13 bc       	out	0x23, r1	; 35
// Compare A Match Interrupt: Off
// Compare B Match Interrupt: Off
// Compare C Match Interrupt: Off
//TCCR3A=0x00;
//TCCR3B=0x01;
TCCR3A=0x00;
 232:	10 92 8b 00 	sts	0x008B, r1
TCCR3B=0x00;
 236:	10 92 8a 00 	sts	0x008A, r1
TCNT3H=0x00;
 23a:	10 92 89 00 	sts	0x0089, r1
TCNT3L=0x00;
 23e:	10 92 88 00 	sts	0x0088, r1
ICR3H=0x00;
 242:	10 92 81 00 	sts	0x0081, r1
ICR3L=0x00;
 246:	10 92 80 00 	sts	0x0080, r1
OCR3AH=0x00;
 24a:	10 92 87 00 	sts	0x0087, r1
OCR3AL=0x00;
 24e:	10 92 86 00 	sts	0x0086, r1
OCR3BH=0x00;
 252:	10 92 85 00 	sts	0x0085, r1
OCR3BL=0x00;
 256:	10 92 84 00 	sts	0x0084, r1
OCR3CH=0x00;
 25a:	10 92 83 00 	sts	0x0083, r1
OCR3CL=0x00;
 25e:	10 92 82 00 	sts	0x0082, r1
// INT3: Off
// INT4: Off
// INT5: Off
// INT6: Off
// INT7: Off
EICRA=0x00;
 262:	10 92 6a 00 	sts	0x006A, r1
EICRB=0x00;
 266:	1a be       	out	0x3a, r1	; 58
EIMSK=0x00;
 268:	19 be       	out	0x39, r1	; 57

// Timer(s)/Counter(s) Interrupt(s) initialization
TIMSK=0x05;//TIMSK=0xC5;
 26a:	95 e0       	ldi	r25, 0x05	; 5
 26c:	97 bf       	out	0x37, r25	; 55
ETIMSK=0x04;
 26e:	80 93 7d 00 	sts	0x007D, r24

// USART0 initialization
// USART0 disabled
UCSR0B=0x00;
 272:	1a b8       	out	0x0a, r1	; 10

// USART1 initialization
// USART1 disabled
UCSR1B=0x00;
 274:	10 92 9a 00 	sts	0x009A, r1

// Analog Comparator initialization
// Analog Comparator: Off
// Analog Comparator Input Capture by Timer/Counter 1: Off
ACSR=0x80;
 278:	80 e8       	ldi	r24, 0x80	; 128
 27a:	88 b9       	out	0x08, r24	; 8
SFIOR=0x00;
 27c:	10 bc       	out	0x20, r1	; 32

// ADC initialization
// ADC disabled
ADCSRA=0x00;
 27e:	16 b8       	out	0x06, r1	; 6

// SPI initialization
// SPI disabled
SPCR=0x00;
 280:	1d b8       	out	0x0d, r1	; 13

// TWI initialization
// TWI disabled
TWCR=0x00;
 282:	10 92 74 00 	sts	0x0074, r1
 286:	08 95       	ret

00000288 <__vector_16>:

//****************************************************************************************
// Timer0 overflow interrupt service routine
//****************************************************************************************
ISR (TIMER0_OVF_vect)
{
 288:	1f 92       	push	r1
 28a:	0f 92       	push	r0
 28c:	0f b6       	in	r0, 0x3f	; 63
 28e:	0f 92       	push	r0
 290:	11 24       	eor	r1, r1
 292:	2f 93       	push	r18
 294:	3f 93       	push	r19
 296:	4f 93       	push	r20
 298:	5f 93       	push	r21
 29a:	6f 93       	push	r22
 29c:	7f 93       	push	r23
 29e:	8f 93       	push	r24
 2a0:	9f 93       	push	r25
 2a2:	af 93       	push	r26
 2a4:	bf 93       	push	r27
 2a6:	ef 93       	push	r30
 2a8:	ff 93       	push	r31
	//---------------------------------------------------------------------------------------
	BUT_Debrief();
 2aa:	0e 94 b8 00 	call	0x170	; 0x170 <BUT_Debrief>
	//---------------------------------------------------------------------------------------
	return;
};
 2ae:	ff 91       	pop	r31
 2b0:	ef 91       	pop	r30
 2b2:	bf 91       	pop	r27
 2b4:	af 91       	pop	r26
 2b6:	9f 91       	pop	r25
 2b8:	8f 91       	pop	r24
 2ba:	7f 91       	pop	r23
 2bc:	6f 91       	pop	r22
 2be:	5f 91       	pop	r21
 2c0:	4f 91       	pop	r20
 2c2:	3f 91       	pop	r19
 2c4:	2f 91       	pop	r18
 2c6:	0f 90       	pop	r0
 2c8:	0f be       	out	0x3f, r0	; 63
 2ca:	0f 90       	pop	r0
 2cc:	1f 90       	pop	r1
 2ce:	18 95       	reti

000002d0 <__vector_14>:
//****************************************************************************************
// Timer1 overflow interrupt service routine
//****************************************************************************************
ISR (TIMER1_OVF_vect)
{
 2d0:	1f 92       	push	r1
 2d2:	0f 92       	push	r0
 2d4:	0f b6       	in	r0, 0x3f	; 63
 2d6:	0f 92       	push	r0
 2d8:	11 24       	eor	r1, r1
 2da:	8f 93       	push	r24
	// Reinitialize Timer1 value
	TCNT1H=0x0B;
 2dc:	8b e0       	ldi	r24, 0x0B	; 11
 2de:	8d bd       	out	0x2d, r24	; 45
	TCNT1L=0xDC;
 2e0:	8c ed       	ldi	r24, 0xDC	; 220
 2e2:	8c bd       	out	0x2c, r24	; 44
	//---------------------------------------------------------------------------------------

	//---------------------------------------------------------------------------------------
	return;
};
 2e4:	8f 91       	pop	r24
 2e6:	0f 90       	pop	r0
 2e8:	0f be       	out	0x3f, r0	; 63
 2ea:	0f 90       	pop	r0
 2ec:	1f 90       	pop	r1
 2ee:	18 95       	reti

000002f0 <__vector_10>:
//****************************************************************************************
// Timer2 overflow interrupt service routine
//****************************************************************************************
ISR (TIMER2_OVF_vect)
{
 2f0:	1f 92       	push	r1
 2f2:	0f 92       	push	r0
 2f4:	0f b6       	in	r0, 0x3f	; 63
 2f6:	0f 92       	push	r0
 2f8:	11 24       	eor	r1, r1
	//---------------------------------------------------------------------------------------

	//---------------------------------------------------------------------------------------
	return;
};
 2fa:	0f 90       	pop	r0
 2fc:	0f be       	out	0x3f, r0	; 63
 2fe:	0f 90       	pop	r0
 300:	1f 90       	pop	r1
 302:	18 95       	reti

00000304 <__vector_29>:
//****************************************************************************************
// Timer3 overflow interrupt service routine
//****************************************************************************************
ISR (TIMER3_OVF_vect)
{
 304:	1f 92       	push	r1
 306:	0f 92       	push	r0
 308:	0f b6       	in	r0, 0x3f	; 63
 30a:	0f 92       	push	r0
 30c:	11 24       	eor	r1, r1
	//---------------------------------------------------------------------------------------

	//---------------------------------------------------------------------------------------
	return;
};
 30e:	0f 90       	pop	r0
 310:	0f be       	out	0x3f, r0	; 63
 312:	0f 90       	pop	r0
 314:	1f 90       	pop	r1
 316:	18 95       	reti

00000318 <main>:
{
	//---------------------------------------------------------------------------------------
	// Declare your local variables here
	unsigned char cnt = 0;
	//---------------------------------------------------------------------------------------
	init_mcu();
 318:	0e 94 e5 00 	call	0x1ca	; 0x1ca <init_mcu>
	//---------------------------------------------------------------------------------------
	rs485_0_init();
 31c:	0e 94 37 03 	call	0x66e	; 0x66e <rs485_0_init>
	uart_1_init();
 320:	0e 94 a8 00 	call	0x150	; 0x150 <uart_1_init>
	i2c_lcd_init();
 324:	0e 94 95 02 	call	0x52a	; 0x52a <i2c_lcd_init>
	BUT_Init();
 328:	0e 94 b1 00 	call	0x162	; 0x162 <BUT_Init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 32c:	2f ef       	ldi	r18, 0xFF	; 255
 32e:	81 ee       	ldi	r24, 0xE1	; 225
 330:	94 e0       	ldi	r25, 0x04	; 4
 332:	21 50       	subi	r18, 0x01	; 1
 334:	80 40       	sbci	r24, 0x00	; 0
 336:	90 40       	sbci	r25, 0x00	; 0
 338:	e1 f7       	brne	.-8      	; 0x332 <main+0x1a>
 33a:	00 c0       	rjmp	.+0      	; 0x33c <main+0x24>
 33c:	00 00       	nop
	_delay_ms(100);
	//---------------------------------------------------------------------------------------
	asm("sei");
 33e:	78 94       	sei
		SET_OUT_4
		CLR_OUT_4
		
		SET_OUT_5
		CLR_OUT_5
		SET_OUT_6
 340:	e5 e6       	ldi	r30, 0x65	; 101
 342:	f0 e0       	ldi	r31, 0x00	; 0
		CLR_OUT_9
		SET_OUT_10
		CLR_OUT_10
		SET_OUT_11
		CLR_OUT_11
		SET_OUT_12
 344:	a2 e6       	ldi	r26, 0x62	; 98
 346:	b0 e0       	ldi	r27, 0x00	; 0
	asm("sei");
	//---------------------------------------------------------------------------------------
    while(1)
    {
        //TODO:: Please write your application code
		SET_OUT_1
 348:	c3 9a       	sbi	0x18, 3	; 24
		CLR_OUT_1
 34a:	c3 98       	cbi	0x18, 3	; 24
		SET_OUT_2
 34c:	c4 9a       	sbi	0x18, 4	; 24
		CLR_OUT_2
 34e:	c4 98       	cbi	0x18, 4	; 24
		SET_OUT_3
 350:	c5 9a       	sbi	0x18, 5	; 24
		CLR_OUT_3
 352:	c5 98       	cbi	0x18, 5	; 24
		SET_OUT_4
 354:	c6 9a       	sbi	0x18, 6	; 24
		CLR_OUT_4
 356:	c6 98       	cbi	0x18, 6	; 24
		
		SET_OUT_5
 358:	c7 9a       	sbi	0x18, 7	; 24
		CLR_OUT_5
 35a:	c7 98       	cbi	0x18, 7	; 24
		SET_OUT_6
 35c:	80 81       	ld	r24, Z
 35e:	88 60       	ori	r24, 0x08	; 8
 360:	80 83       	st	Z, r24
		CLR_OUT_6
 362:	80 81       	ld	r24, Z
 364:	87 7f       	andi	r24, 0xF7	; 247
 366:	80 83       	st	Z, r24
		SET_OUT_7
 368:	80 81       	ld	r24, Z
 36a:	80 61       	ori	r24, 0x10	; 16
 36c:	80 83       	st	Z, r24
		CLR_OUT_7
 36e:	80 81       	ld	r24, Z
 370:	8f 7e       	andi	r24, 0xEF	; 239
 372:	80 83       	st	Z, r24
		SET_OUT_8
 374:	af 9a       	sbi	0x15, 7	; 21
		CLR_OUT_8
 376:	af 98       	cbi	0x15, 7	; 21
		
		SET_OUT_9
 378:	97 9a       	sbi	0x12, 7	; 18
		CLR_OUT_9
 37a:	97 98       	cbi	0x12, 7	; 18
		SET_OUT_10
 37c:	d8 9a       	sbi	0x1b, 0	; 27
		CLR_OUT_10
 37e:	d8 98       	cbi	0x1b, 0	; 27
		SET_OUT_11
 380:	95 9a       	sbi	0x12, 5	; 18
		CLR_OUT_11
 382:	95 98       	cbi	0x12, 5	; 18
		SET_OUT_12
 384:	8c 91       	ld	r24, X
 386:	80 61       	ori	r24, 0x10	; 16
 388:	8c 93       	st	X, r24
		CLR_OUT_12
 38a:	8c 91       	ld	r24, X
 38c:	8f 7e       	andi	r24, 0xEF	; 239
 38e:	8c 93       	st	X, r24
 390:	db cf       	rjmp	.-74     	; 0x348 <main+0x30>

00000392 <i2c_init>:
*   Parameters :    нет
*   Purpose :       Инициализация i2c
****************************************************************************/
void i2c_init(void)
{
	(PORT_I2C&=~(1<<SDA));
 392:	90 98       	cbi	0x12, 0	; 18
	(PORT_I2C&=~(1<<SCL));
 394:	91 98       	cbi	0x12, 1	; 18
	(DDR_I2C&=~(1<<SDA));
 396:	88 98       	cbi	0x11, 0	; 17
	(DDR_I2C&=~(1<<SCL));
 398:	89 98       	cbi	0x11, 1	; 17
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 39a:	85 e0       	ldi	r24, 0x05	; 5
 39c:	8a 95       	dec	r24
 39e:	f1 f7       	brne	.-4      	; 0x39c <i2c_init+0xa>
 3a0:	00 00       	nop
 3a2:	08 95       	ret

000003a4 <i2c_start>:
*   Parameters :    нет
*   Purpose :       Старт i2c
****************************************************************************/
void i2c_start(void)         
{ 
	(DDR_I2C|=(1<<SDA)); _delay_us(pause);
 3a4:	88 9a       	sbi	0x11, 0	; 17
 3a6:	85 e0       	ldi	r24, 0x05	; 5
 3a8:	8a 95       	dec	r24
 3aa:	f1 f7       	brne	.-4      	; 0x3a8 <i2c_start+0x4>
 3ac:	00 00       	nop
	(DDR_I2C|=(1<<SCL)); _delay_us(pause); 
 3ae:	89 9a       	sbi	0x11, 1	; 17
 3b0:	85 e0       	ldi	r24, 0x05	; 5
 3b2:	8a 95       	dec	r24
 3b4:	f1 f7       	brne	.-4      	; 0x3b2 <i2c_start+0xe>
 3b6:	00 00       	nop
 3b8:	08 95       	ret

000003ba <i2c_write>:
*   Returns :       нет
*   Parameters :    Данныэ на отправку
*   Purpose :       Передача 1го байта по i2c
****************************************************************************/
void i2c_write(unsigned char byt)  
{ 
 3ba:	27 e0       	ldi	r18, 0x07	; 7
 3bc:	30 e0       	ldi	r19, 0x00	; 0
    unsigned char k;                       
    for (k = 0; k < 8; k++)    
    { 
		(DDR_I2C|=(1<<SCL));
        if(0x01 & (byt >> (7 - k)))
 3be:	90 e0       	ldi	r25, 0x00	; 0
void i2c_write(unsigned char byt)  
{ 
    unsigned char k;                       
    for (k = 0; k < 8; k++)    
    { 
		(DDR_I2C|=(1<<SCL));
 3c0:	89 9a       	sbi	0x11, 1	; 17
        if(0x01 & (byt >> (7 - k)))
 3c2:	ac 01       	movw	r20, r24
 3c4:	02 2e       	mov	r0, r18
 3c6:	02 c0       	rjmp	.+4      	; 0x3cc <i2c_write+0x12>
 3c8:	55 95       	asr	r21
 3ca:	47 95       	ror	r20
 3cc:	0a 94       	dec	r0
 3ce:	e2 f7       	brpl	.-8      	; 0x3c8 <i2c_write+0xe>
 3d0:	40 ff       	sbrs	r20, 0
 3d2:	02 c0       	rjmp	.+4      	; 0x3d8 <i2c_write+0x1e>
		{
			(DDR_I2C&=~(1<<SDA));
 3d4:	88 98       	cbi	0x11, 0	; 17
 3d6:	01 c0       	rjmp	.+2      	; 0x3da <i2c_write+0x20>
		}else
		{
			(DDR_I2C|=(1<<SDA));
 3d8:	88 9a       	sbi	0x11, 0	; 17
 3da:	45 e0       	ldi	r20, 0x05	; 5
 3dc:	4a 95       	dec	r20
 3de:	f1 f7       	brne	.-4      	; 0x3dc <i2c_write+0x22>
 3e0:	00 00       	nop
		};
	    _delay_us(pause);   
        (DDR_I2C&=~(1<<SCL));
 3e2:	89 98       	cbi	0x11, 1	; 17
 3e4:	45 e0       	ldi	r20, 0x05	; 5
 3e6:	4a 95       	dec	r20
 3e8:	f1 f7       	brne	.-4      	; 0x3e6 <i2c_write+0x2c>
 3ea:	00 00       	nop
 3ec:	21 50       	subi	r18, 0x01	; 1
 3ee:	31 09       	sbc	r19, r1
 3f0:	38 f7       	brcc	.-50     	; 0x3c0 <i2c_write+0x6>
		_delay_us(pause);             
    };
	(DDR_I2C&=~(1<<SDA));
 3f2:	88 98       	cbi	0x11, 0	; 17
	(DDR_I2C|=(1<<SCL));
 3f4:	89 9a       	sbi	0x11, 1	; 17
 3f6:	85 e0       	ldi	r24, 0x05	; 5
 3f8:	8a 95       	dec	r24
 3fa:	f1 f7       	brne	.-4      	; 0x3f8 <i2c_write+0x3e>
 3fc:	00 00       	nop
	_delay_us(pause);
	(DDR_I2C&=~(1<<SCL));
 3fe:	89 98       	cbi	0x11, 1	; 17
 400:	45 e0       	ldi	r20, 0x05	; 5
 402:	4a 95       	dec	r20
 404:	f1 f7       	brne	.-4      	; 0x402 <i2c_write+0x48>
 406:	00 00       	nop
	_delay_us(pause);
	(DDR_I2C|=(1<<SCL));
 408:	89 9a       	sbi	0x11, 1	; 17
 40a:	08 95       	ret

0000040c <i2c_stop>:
*   Parameters :    нет
*   Purpose :       Стоп i2c
****************************************************************************/
void i2c_stop(void)            
{ 
    (DDR_I2C|=(1<<SDA)); _delay_us(pause);   
 40c:	88 9a       	sbi	0x11, 0	; 17
 40e:	85 e0       	ldi	r24, 0x05	; 5
 410:	8a 95       	dec	r24
 412:	f1 f7       	brne	.-4      	; 0x410 <i2c_stop+0x4>
 414:	00 00       	nop
    (DDR_I2C&=~(1<<SCL)); _delay_us(pause);           
 416:	89 98       	cbi	0x11, 1	; 17
 418:	85 e0       	ldi	r24, 0x05	; 5
 41a:	8a 95       	dec	r24
 41c:	f1 f7       	brne	.-4      	; 0x41a <i2c_stop+0xe>
 41e:	00 00       	nop
    (DDR_I2C&=~(1<<SDA)); _delay_us(pause);                                 
 420:	88 98       	cbi	0x11, 0	; 17
 422:	85 e0       	ldi	r24, 0x05	; 5
 424:	8a 95       	dec	r24
 426:	f1 f7       	brne	.-4      	; 0x424 <i2c_stop+0x18>
 428:	00 00       	nop
 42a:	08 95       	ret

0000042c <i2c_acknowledge>:
    return (check);      
};

void i2c_acknowledge(void)
{
	(DDR_I2C&=~(1<<SDA));
 42c:	88 98       	cbi	0x11, 0	; 17
	//delayMicroseconds(1);
	(DDR_I2C|=(1<<SCL));
 42e:	89 9a       	sbi	0x11, 1	; 17
 430:	85 e0       	ldi	r24, 0x05	; 5
 432:	8a 95       	dec	r24
 434:	f1 f7       	brne	.-4      	; 0x432 <i2c_acknowledge+0x6>
 436:	00 00       	nop
	_delay_us(pause);
	(DDR_I2C&=~(1<<SCL));
 438:	89 98       	cbi	0x11, 1	; 17
 43a:	08 95       	ret

0000043c <PCF8574_Write>:

#include "i2c_lcd.h"

//****************************************************************************************
void PCF8574_Write(unsigned char data)
{
 43c:	cf 93       	push	r28
 43e:	c8 2f       	mov	r28, r24
	i2c_start();              //         |-[S]-|  ;Start Condition
 440:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <i2c_start>
	i2c_write(PCF8574_ADDR | I2C_WRITE);    //         |---Slave address (PCF8574)--[A2=0,A1=0,A0=0]---|   +    |-R/W-|
 444:	8e e4       	ldi	r24, 0x4E	; 78
 446:	0e 94 dd 01 	call	0x3ba	; 0x3ba <i2c_write>
	i2c_acknowledge();        //         |-[A]-|  ;Active LOW
 44a:	0e 94 16 02 	call	0x42c	; 0x42c <i2c_acknowledge>
	i2c_write(data);          //         |-------------------data to port-----------------------|
 44e:	8c 2f       	mov	r24, r28
 450:	0e 94 dd 01 	call	0x3ba	; 0x3ba <i2c_write>
	i2c_acknowledge();        //         |-[A]-|  ;Active LOW
 454:	0e 94 16 02 	call	0x42c	; 0x42c <i2c_acknowledge>
	i2c_stop();               //         |-[P]-|  ;Stop Condition
 458:	0e 94 06 02 	call	0x40c	; 0x40c <i2c_stop>
};
 45c:	cf 91       	pop	r28
 45e:	08 95       	ret

00000460 <send_i2c_lcd_byte>:
//***************************************************************************************
//Procedure sending LCD byte
//Input: Byte, Kommand/Symbol data
//***************************************************************************************
void send_i2c_lcd_byte(unsigned char lcd_data, unsigned char rs_status ) //bool lcd_command,
{
 460:	df 92       	push	r13
 462:	ef 92       	push	r14
 464:	ff 92       	push	r15
 466:	0f 93       	push	r16
 468:	1f 93       	push	r17
 46a:	cf 93       	push	r28
 46c:	df 93       	push	r29
	//lcd_data=0x08;
	//---------------------------------------------------------------------------------------
	rs_status=rs_status*2;
 46e:	d6 2e       	mov	r13, r22
 470:	dd 0c       	add	r13, r13
	PCF8574_Write(rs_status|E_L|((lcd_data<<1)&0xE0)|((lcd_data>>3)&0x10));
 472:	e8 2e       	mov	r14, r24
 474:	f1 2c       	mov	r15, r1
 476:	e7 01       	movw	r28, r14
 478:	cc 0f       	add	r28, r28
 47a:	dd 1f       	adc	r29, r29
 47c:	18 2f       	mov	r17, r24
 47e:	16 95       	lsr	r17
 480:	16 95       	lsr	r17
 482:	16 95       	lsr	r17
 484:	d1 2f       	mov	r29, r17
 486:	d0 71       	andi	r29, 0x10	; 16
 488:	dd 29       	or	r29, r13
 48a:	8c 2f       	mov	r24, r28
 48c:	80 7e       	andi	r24, 0xE0	; 224
 48e:	d8 2b       	or	r29, r24
 490:	8d 2f       	mov	r24, r29
 492:	0e 94 1e 02 	call	0x43c	; 0x43c <PCF8574_Write>
 496:	85 e3       	ldi	r24, 0x35	; 53
 498:	8a 95       	dec	r24
 49a:	f1 f7       	brne	.-4      	; 0x498 <send_i2c_lcd_byte+0x38>
 49c:	00 00       	nop
	_delay_us(10);
	PCF8574_Write(rs_status|E_H|((lcd_data<<1)&0xE0)|((lcd_data>>3)&0x10));
 49e:	81 2f       	mov	r24, r17
 4a0:	80 71       	andi	r24, 0x10	; 16
 4a2:	8d 29       	or	r24, r13
 4a4:	88 60       	ori	r24, 0x08	; 8
 4a6:	9c 2f       	mov	r25, r28
 4a8:	90 7e       	andi	r25, 0xE0	; 224
 4aa:	89 2b       	or	r24, r25
 4ac:	0e 94 1e 02 	call	0x43c	; 0x43c <PCF8574_Write>
 4b0:	95 e3       	ldi	r25, 0x35	; 53
 4b2:	9a 95       	dec	r25
 4b4:	f1 f7       	brne	.-4      	; 0x4b2 <send_i2c_lcd_byte+0x52>
 4b6:	00 00       	nop
	_delay_us(10);
	PCF8574_Write(rs_status|E_L|((lcd_data<<1)&0xE0)|((lcd_data>>3)&0x10));
 4b8:	8d 2f       	mov	r24, r29
 4ba:	0e 94 1e 02 	call	0x43c	; 0x43c <PCF8574_Write>
 4be:	85 e3       	ldi	r24, 0x35	; 53
 4c0:	8a 95       	dec	r24
 4c2:	f1 f7       	brne	.-4      	; 0x4c0 <send_i2c_lcd_byte+0x60>
 4c4:	00 00       	nop
	_delay_us(10);
	PCF8574_Write(rs_status|E_L|((lcd_data<<5)&0xE0)|((lcd_data<<1)&0x10));
 4c6:	87 01       	movw	r16, r14
 4c8:	00 0f       	add	r16, r16
 4ca:	11 1f       	adc	r17, r17
 4cc:	02 95       	swap	r16
 4ce:	12 95       	swap	r17
 4d0:	10 7f       	andi	r17, 0xF0	; 240
 4d2:	10 27       	eor	r17, r16
 4d4:	00 7f       	andi	r16, 0xF0	; 240
 4d6:	10 27       	eor	r17, r16
 4d8:	dd 2d       	mov	r29, r13
 4da:	d0 2b       	or	r29, r16
 4dc:	8c 2f       	mov	r24, r28
 4de:	80 71       	andi	r24, 0x10	; 16
 4e0:	d8 2b       	or	r29, r24
 4e2:	8d 2f       	mov	r24, r29
 4e4:	0e 94 1e 02 	call	0x43c	; 0x43c <PCF8574_Write>
 4e8:	95 e3       	ldi	r25, 0x35	; 53
 4ea:	9a 95       	dec	r25
 4ec:	f1 f7       	brne	.-4      	; 0x4ea <send_i2c_lcd_byte+0x8a>
 4ee:	00 00       	nop
	_delay_us(10);
	PCF8574_Write(rs_status|E_H|((lcd_data<<5)&0xE0)|((lcd_data<<1)&0x10));
 4f0:	8d 2d       	mov	r24, r13
 4f2:	88 60       	ori	r24, 0x08	; 8
 4f4:	08 2b       	or	r16, r24
 4f6:	8c 2f       	mov	r24, r28
 4f8:	80 71       	andi	r24, 0x10	; 16
 4fa:	80 2b       	or	r24, r16
 4fc:	0e 94 1e 02 	call	0x43c	; 0x43c <PCF8574_Write>
 500:	85 e3       	ldi	r24, 0x35	; 53
 502:	8a 95       	dec	r24
 504:	f1 f7       	brne	.-4      	; 0x502 <send_i2c_lcd_byte+0xa2>
 506:	00 00       	nop
	_delay_us(10);
	PCF8574_Write(rs_status|E_L|((lcd_data<<5)&0xE0)|((lcd_data<<1)&0x10));
 508:	8d 2f       	mov	r24, r29
 50a:	0e 94 1e 02 	call	0x43c	; 0x43c <PCF8574_Write>
 50e:	87 ec       	ldi	r24, 0xC7	; 199
 510:	90 e0       	ldi	r25, 0x00	; 0
 512:	01 97       	sbiw	r24, 0x01	; 1
 514:	f1 f7       	brne	.-4      	; 0x512 <send_i2c_lcd_byte+0xb2>
 516:	00 c0       	rjmp	.+0      	; 0x518 <send_i2c_lcd_byte+0xb8>
 518:	00 00       	nop

	
	
	
	
};
 51a:	df 91       	pop	r29
 51c:	cf 91       	pop	r28
 51e:	1f 91       	pop	r17
 520:	0f 91       	pop	r16
 522:	ff 90       	pop	r15
 524:	ef 90       	pop	r14
 526:	df 90       	pop	r13
 528:	08 95       	ret

0000052a <i2c_lcd_init>:
void i2c_lcd_init(void)
{
	//---------------------------------------------------------------------------------------
	//init i2c
	//---------------------------------------------------------------------------------------
	i2c_init();
 52a:	0e 94 c9 01 	call	0x392	; 0x392 <i2c_init>
	//---------------------------------------------------------------------------------------
	PCF8574_Write(0x00);//E = 0 RS= 0 R/W = 0
 52e:	80 e0       	ldi	r24, 0x00	; 0
 530:	0e 94 1e 02 	call	0x43c	; 0x43c <PCF8574_Write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 534:	8f e9       	ldi	r24, 0x9F	; 159
 536:	9f e0       	ldi	r25, 0x0F	; 15
 538:	01 97       	sbiw	r24, 0x01	; 1
 53a:	f1 f7       	brne	.-4      	; 0x538 <i2c_lcd_init+0xe>
 53c:	00 c0       	rjmp	.+0      	; 0x53e <i2c_lcd_init+0x14>
 53e:	00 00       	nop
	_delay_ms(1);
	//---------------------------------------------------------------------------------------
	//Function Set 3 ????? ?????? D4-D7 ????????????? bus
	PCF8574_Write(0x60);      //1    0x20 + 0x03
 540:	80 e6       	ldi	r24, 0x60	; 96
 542:	0e 94 1e 02 	call	0x43c	; 0x43c <PCF8574_Write>
 546:	8f e9       	ldi	r24, 0x9F	; 159
 548:	9f e0       	ldi	r25, 0x0F	; 15
 54a:	01 97       	sbiw	r24, 0x01	; 1
 54c:	f1 f7       	brne	.-4      	; 0x54a <i2c_lcd_init+0x20>
 54e:	00 c0       	rjmp	.+0      	; 0x550 <i2c_lcd_init+0x26>
 550:	00 00       	nop
	_delay_ms(1);
	PCF8574_Write(0x40);
 552:	80 e4       	ldi	r24, 0x40	; 64
 554:	0e 94 1e 02 	call	0x43c	; 0x43c <PCF8574_Write>
 558:	8f e9       	ldi	r24, 0x9F	; 159
 55a:	9f e0       	ldi	r25, 0x0F	; 15
 55c:	01 97       	sbiw	r24, 0x01	; 1
 55e:	f1 f7       	brne	.-4      	; 0x55c <i2c_lcd_init+0x32>
 560:	00 c0       	rjmp	.+0      	; 0x562 <i2c_lcd_init+0x38>
 562:	00 00       	nop
	_delay_ms(1);
	PCF8574_Write(E_H|0x40);     //2
 564:	88 e4       	ldi	r24, 0x48	; 72
 566:	0e 94 1e 02 	call	0x43c	; 0x43c <PCF8574_Write>
 56a:	8f e9       	ldi	r24, 0x9F	; 159
 56c:	9f e0       	ldi	r25, 0x0F	; 15
 56e:	01 97       	sbiw	r24, 0x01	; 1
 570:	f1 f7       	brne	.-4      	; 0x56e <i2c_lcd_init+0x44>
 572:	00 c0       	rjmp	.+0      	; 0x574 <i2c_lcd_init+0x4a>
 574:	00 00       	nop
	_delay_ms(1);
	PCF8574_Write(E_L|0x40);
 576:	80 e4       	ldi	r24, 0x40	; 64
 578:	0e 94 1e 02 	call	0x43c	; 0x43c <PCF8574_Write>
 57c:	8f e9       	ldi	r24, 0x9F	; 159
 57e:	9f e0       	ldi	r25, 0x0F	; 15
 580:	01 97       	sbiw	r24, 0x01	; 1
 582:	f1 f7       	brne	.-4      	; 0x580 <i2c_lcd_init+0x56>
 584:	00 c0       	rjmp	.+0      	; 0x586 <i2c_lcd_init+0x5c>
 586:	00 00       	nop
	_delay_ms(1);
	//---------------------------------------------------------------------------------------
	send_i2c_lcd_byte(0x28,lcd_kom);			//2 lines, 5*8 pixels, 8bit data
 588:	60 e0       	ldi	r22, 0x00	; 0
 58a:	88 e2       	ldi	r24, 0x28	; 40
 58c:	0e 94 30 02 	call	0x460	; 0x460 <send_i2c_lcd_byte>
	send_i2c_lcd_byte(0x0C,lcd_kom);			//screen enable,
 590:	60 e0       	ldi	r22, 0x00	; 0
 592:	8c e0       	ldi	r24, 0x0C	; 12
 594:	0e 94 30 02 	call	0x460	; 0x460 <send_i2c_lcd_byte>
	send_i2c_lcd_byte(0x06,lcd_kom);			//auto shift left enable
 598:	60 e0       	ldi	r22, 0x00	; 0
 59a:	86 e0       	ldi	r24, 0x06	; 6
 59c:	0e 94 30 02 	call	0x460	; 0x460 <send_i2c_lcd_byte>
	send_i2c_lcd_byte(0x01,lcd_kom);			//0x01 clear screen
 5a0:	60 e0       	ldi	r22, 0x00	; 0
 5a2:	81 e0       	ldi	r24, 0x01	; 1
 5a4:	0e 94 30 02 	call	0x460	; 0x460 <send_i2c_lcd_byte>
 5a8:	9f ef       	ldi	r25, 0xFF	; 255
 5aa:	29 ef       	ldi	r18, 0xF9	; 249
 5ac:	80 e0       	ldi	r24, 0x00	; 0
 5ae:	91 50       	subi	r25, 0x01	; 1
 5b0:	20 40       	sbci	r18, 0x00	; 0
 5b2:	80 40       	sbci	r24, 0x00	; 0
 5b4:	e1 f7       	brne	.-8      	; 0x5ae <i2c_lcd_init+0x84>
 5b6:	00 c0       	rjmp	.+0      	; 0x5b8 <i2c_lcd_init+0x8e>
 5b8:	00 00       	nop
 5ba:	08 95       	ret

000005bc <__vector_18>:

#include "rs485_0.h"

//****************************************************************************************
ISR(USART0_RX_vect)
{
 5bc:	1f 92       	push	r1
 5be:	0f 92       	push	r0
 5c0:	0f b6       	in	r0, 0x3f	; 63
 5c2:	0f 92       	push	r0
 5c4:	11 24       	eor	r1, r1
 5c6:	2f 93       	push	r18
 5c8:	8f 93       	push	r24
 5ca:	9f 93       	push	r25
 5cc:	ef 93       	push	r30
 5ce:	ff 93       	push	r31
	uint8_t byte;
	uint8_t wr = (uart_0_rxwr+1) & UART_BUFEND_0_;
 5d0:	e0 91 38 01 	lds	r30, 0x0138
 5d4:	81 e0       	ldi	r24, 0x01	; 1
 5d6:	8e 0f       	add	r24, r30
 5d8:	8f 70       	andi	r24, 0x0F	; 15
	byte = UDR0;
 5da:	2c b1       	in	r18, 0x0c	; 12
	if(wr != uart_0_rxrd)
 5dc:	90 91 39 01 	lds	r25, 0x0139
 5e0:	89 17       	cp	r24, r25
 5e2:	31 f0       	breq	.+12     	; 0x5f0 <__vector_18+0x34>
	{
		uart_0_rx[uart_0_rxwr] = byte;
 5e4:	f0 e0       	ldi	r31, 0x00	; 0
 5e6:	e9 5d       	subi	r30, 0xD9	; 217
 5e8:	fe 4f       	sbci	r31, 0xFE	; 254
 5ea:	20 83       	st	Z, r18
		uart_0_rxwr = wr;
 5ec:	80 93 38 01 	sts	0x0138, r24
	};
};
 5f0:	ff 91       	pop	r31
 5f2:	ef 91       	pop	r30
 5f4:	9f 91       	pop	r25
 5f6:	8f 91       	pop	r24
 5f8:	2f 91       	pop	r18
 5fa:	0f 90       	pop	r0
 5fc:	0f be       	out	0x3f, r0	; 63
 5fe:	0f 90       	pop	r0
 600:	1f 90       	pop	r1
 602:	18 95       	reti

00000604 <__vector_19>:
//****************************************************************************************
ISR(USART0_UDRE_vect)
{
 604:	1f 92       	push	r1
 606:	0f 92       	push	r0
 608:	0f b6       	in	r0, 0x3f	; 63
 60a:	0f 92       	push	r0
 60c:	11 24       	eor	r1, r1
 60e:	8f 93       	push	r24
 610:	9f 93       	push	r25
 612:	ef 93       	push	r30
 614:	ff 93       	push	r31
	uint8_t rd = uart_0_txrd;
 616:	80 91 37 01 	lds	r24, 0x0137
	if(rd != uart_0_txwr)
 61a:	90 91 26 01 	lds	r25, 0x0126
 61e:	89 17       	cp	r24, r25
 620:	59 f0       	breq	.+22     	; 0x638 <__vector_19+0x34>
	{
		UDR0 = uart_0_tx[rd];
 622:	e8 2f       	mov	r30, r24
 624:	f0 e0       	ldi	r31, 0x00	; 0
 626:	e6 5c       	subi	r30, 0xC6	; 198
 628:	fe 4f       	sbci	r31, 0xFE	; 254
 62a:	90 81       	ld	r25, Z
 62c:	9c b9       	out	0x0c, r25	; 12
		uart_0_txrd = (rd+1) & UART_BUFEND_0_;
 62e:	8f 5f       	subi	r24, 0xFF	; 255
 630:	8f 70       	andi	r24, 0x0F	; 15
 632:	80 93 37 01 	sts	0x0137, r24
		return;
 636:	08 c0       	rjmp	.+16     	; 0x648 <__vector_19+0x44>
	}else
	{

	};
	UCSR0B &= ~(1<<UDRIE0);
 638:	55 98       	cbi	0x0a, 5	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 63a:	87 ee       	ldi	r24, 0xE7	; 231
 63c:	93 e0       	ldi	r25, 0x03	; 3
 63e:	01 97       	sbiw	r24, 0x01	; 1
 640:	f1 f7       	brne	.-4      	; 0x63e <__vector_19+0x3a>
 642:	00 c0       	rjmp	.+0      	; 0x644 <__vector_19+0x40>
 644:	00 00       	nop
	_delay_us(250);
	TXD_DISABLE
 646:	1a 98       	cbi	0x03, 2	; 3
};
 648:	ff 91       	pop	r31
 64a:	ef 91       	pop	r30
 64c:	9f 91       	pop	r25
 64e:	8f 91       	pop	r24
 650:	0f 90       	pop	r0
 652:	0f be       	out	0x3f, r0	; 63
 654:	0f 90       	pop	r0
 656:	1f 90       	pop	r1
 658:	18 95       	reti

0000065a <__vector_20>:
//****************************************************************************************
ISR(USART0_TX_vect)
{
 65a:	1f 92       	push	r1
 65c:	0f 92       	push	r0
 65e:	0f b6       	in	r0, 0x3f	; 63
 660:	0f 92       	push	r0
 662:	11 24       	eor	r1, r1
	//TXD_DISABLE
};
 664:	0f 90       	pop	r0
 666:	0f be       	out	0x3f, r0	; 63
 668:	0f 90       	pop	r0
 66a:	1f 90       	pop	r1
 66c:	18 95       	reti

0000066e <rs485_0_init>:
	};
};
//****************************************************************************************
void rs485_0_init()
{
	(PORT_TXDE&=~(1<<TXDE));
 66e:	1a 98       	cbi	0x03, 2	; 3
	(DDR_TXDE|=(1<<TXDE));
 670:	12 9a       	sbi	0x02, 2	; 2
	//UBRR0L = (F_CPU+UART_RATE/8)/(UART_RATE/16)-1;
	//UBRR0H = ((F_CPU+UART_RATE/8)/(UART_RATE/16)-1)>>8;
	UBRR0L = F_CPU/UART_BAUD_RATE_0_/16-1;
 672:	89 e1       	ldi	r24, 0x19	; 25
 674:	89 b9       	out	0x09, r24	; 9
	UBRR0H = (F_CPU/UART_BAUD_RATE_0_/16-1)>>8;
 676:	10 92 90 00 	sts	0x0090, r1
	UCSR0B = (1<<RXCIE0)|(1<<RXEN0)|(1<<TXEN0);
 67a:	88 e9       	ldi	r24, 0x98	; 152
 67c:	8a b9       	out	0x0a, r24	; 10
 67e:	08 95       	ret

00000680 <_exit>:
 680:	f8 94       	cli

00000682 <__stop_program>:
 682:	ff cf       	rjmp	.-2      	; 0x682 <__stop_program>
