
UControl_Module.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00000888  0000091c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000888  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000004a  00800100  00800100  0000091c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000091c  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000228  00000000  00000000  0000094c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001ea4  00000000  00000000  00000b74  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000986  00000000  00000000  00002a18  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000c4e  00000000  00000000  0000339e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000005cc  00000000  00000000  00003fec  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005e1  00000000  00000000  000045b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001276  00000000  00000000  00004b99  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001e0  00000000  00000000  00005e0f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__ctors_end>
   4:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
   8:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
   c:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  10:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  14:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  18:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  1c:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  20:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  24:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  28:	0c 94 a0 01 	jmp	0x340	; 0x340 <__vector_10>
  2c:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  30:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  34:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  38:	0c 94 90 01 	jmp	0x320	; 0x320 <__vector_14>
  3c:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  40:	0c 94 6c 01 	jmp	0x2d8	; 0x2d8 <__vector_16>
  44:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  48:	0c 94 b9 03 	jmp	0x772	; 0x772 <__vector_18>
  4c:	0c 94 dd 03 	jmp	0x7ba	; 0x7ba <__vector_19>
  50:	0c 94 08 04 	jmp	0x810	; 0x810 <__vector_20>
  54:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  58:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  5c:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  60:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  64:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  68:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  6c:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  70:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  74:	0c 94 aa 01 	jmp	0x354	; 0x354 <__vector_29>
  78:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__vector_30>
  7c:	0c 94 91 00 	jmp	0x122	; 0x122 <__vector_31>
  80:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  84:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  88:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  8c:	41 03       	mulsu	r20, r17
  8e:	31 03       	mulsu	r19, r17
  90:	33 03       	mulsu	r19, r19
  92:	35 03       	mulsu	r19, r21
  94:	37 03       	mulsu	r19, r23
  96:	39 03       	fmul	r19, r17
  98:	3b 03       	fmul	r19, r19
  9a:	3d 03       	fmul	r19, r21
  9c:	3f 03       	fmul	r19, r23

0000009e <_BURN_OK_>:
  9e:	20 20 48 65 6c 6c 6f 20 20 77 6f 72 6c 64 20 20       Hello  world  
	...

000000b0 <__ctors_end>:
  b0:	11 24       	eor	r1, r1
  b2:	1f be       	out	0x3f, r1	; 63
  b4:	cf ef       	ldi	r28, 0xFF	; 255
  b6:	d0 e1       	ldi	r29, 0x10	; 16
  b8:	de bf       	out	0x3e, r29	; 62
  ba:	cd bf       	out	0x3d, r28	; 61

000000bc <__do_clear_bss>:
  bc:	21 e0       	ldi	r18, 0x01	; 1
  be:	a0 e0       	ldi	r26, 0x00	; 0
  c0:	b1 e0       	ldi	r27, 0x01	; 1
  c2:	01 c0       	rjmp	.+2      	; 0xc6 <.do_clear_bss_start>

000000c4 <.do_clear_bss_loop>:
  c4:	1d 92       	st	X+, r1

000000c6 <.do_clear_bss_start>:
  c6:	aa 34       	cpi	r26, 0x4A	; 74
  c8:	b2 07       	cpc	r27, r18
  ca:	e1 f7       	brne	.-8      	; 0xc4 <.do_clear_bss_loop>
  cc:	0e 94 b4 01 	call	0x368	; 0x368 <main>
  d0:	0c 94 42 04 	jmp	0x884	; 0x884 <_exit>

000000d4 <__bad_interrupt>:
  d4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d8 <__vector_30>:

#include "buart_1.h"

//****************************************************************************************
ISR(USART1_RX_vect)
{
  d8:	1f 92       	push	r1
  da:	0f 92       	push	r0
  dc:	0f b6       	in	r0, 0x3f	; 63
  de:	0f 92       	push	r0
  e0:	11 24       	eor	r1, r1
  e2:	2f 93       	push	r18
  e4:	8f 93       	push	r24
  e6:	9f 93       	push	r25
  e8:	ef 93       	push	r30
  ea:	ff 93       	push	r31
	uint8_t byte;
	uint8_t wr = (uart_1_rxwr+1) & UART_BUFEND_1_;
  ec:	e0 91 24 01 	lds	r30, 0x0124
  f0:	81 e0       	ldi	r24, 0x01	; 1
  f2:	8e 0f       	add	r24, r30
  f4:	8f 70       	andi	r24, 0x0F	; 15
	byte = UDR1;
  f6:	20 91 9c 00 	lds	r18, 0x009C
	if(wr != uart_1_rxrd)
  fa:	90 91 25 01 	lds	r25, 0x0125
  fe:	89 17       	cp	r24, r25
 100:	31 f0       	breq	.+12     	; 0x10e <__vector_30+0x36>
	{
		uart_1_rx[uart_1_rxwr] = byte;
 102:	f0 e0       	ldi	r31, 0x00	; 0
 104:	ed 5e       	subi	r30, 0xED	; 237
 106:	fe 4f       	sbci	r31, 0xFE	; 254
 108:	20 83       	st	Z, r18
		uart_1_rxwr = wr;
 10a:	80 93 24 01 	sts	0x0124, r24
	};
};
 10e:	ff 91       	pop	r31
 110:	ef 91       	pop	r30
 112:	9f 91       	pop	r25
 114:	8f 91       	pop	r24
 116:	2f 91       	pop	r18
 118:	0f 90       	pop	r0
 11a:	0f be       	out	0x3f, r0	; 63
 11c:	0f 90       	pop	r0
 11e:	1f 90       	pop	r1
 120:	18 95       	reti

00000122 <__vector_31>:
//****************************************************************************************
ISR(USART1_UDRE_vect)
{
 122:	1f 92       	push	r1
 124:	0f 92       	push	r0
 126:	0f b6       	in	r0, 0x3f	; 63
 128:	0f 92       	push	r0
 12a:	11 24       	eor	r1, r1
 12c:	8f 93       	push	r24
 12e:	9f 93       	push	r25
 130:	ef 93       	push	r30
 132:	ff 93       	push	r31
	uint8_t rd = uart_1_txrd;
 134:	80 91 02 01 	lds	r24, 0x0102
	if(rd != uart_1_txwr)
 138:	90 91 23 01 	lds	r25, 0x0123
 13c:	89 17       	cp	r24, r25
 13e:	61 f0       	breq	.+24     	; 0x158 <__vector_31+0x36>
	{
		UDR1 = uart_1_tx[rd];
 140:	e8 2f       	mov	r30, r24
 142:	f0 e0       	ldi	r31, 0x00	; 0
 144:	ed 5f       	subi	r30, 0xFD	; 253
 146:	fe 4f       	sbci	r31, 0xFE	; 254
 148:	90 81       	ld	r25, Z
 14a:	90 93 9c 00 	sts	0x009C, r25
		uart_1_txrd = (rd+1) & UART_BUFEND_1_;
 14e:	8f 5f       	subi	r24, 0xFF	; 255
 150:	8f 70       	andi	r24, 0x0F	; 15
 152:	80 93 02 01 	sts	0x0102, r24
		return;
 156:	05 c0       	rjmp	.+10     	; 0x162 <__vector_31+0x40>
	};
	UCSR1B &= ~(1<<UDRIE1);
 158:	ea e9       	ldi	r30, 0x9A	; 154
 15a:	f0 e0       	ldi	r31, 0x00	; 0
 15c:	80 81       	ld	r24, Z
 15e:	8f 7d       	andi	r24, 0xDF	; 223
 160:	80 83       	st	Z, r24
};
 162:	ff 91       	pop	r31
 164:	ef 91       	pop	r30
 166:	9f 91       	pop	r25
 168:	8f 91       	pop	r24
 16a:	0f 90       	pop	r0
 16c:	0f be       	out	0x3f, r0	; 63
 16e:	0f 90       	pop	r0
 170:	1f 90       	pop	r1
 172:	18 95       	reti

00000174 <uart_1_write>:
	return 0;
};
//****************************************************************************************
void uart_1_write(uint8_t byte)
{
	uint8_t wr = (uart_1_txwr+1) & UART_BUFEND_1_;
 174:	e0 91 23 01 	lds	r30, 0x0123
 178:	91 e0       	ldi	r25, 0x01	; 1
 17a:	9e 0f       	add	r25, r30
 17c:	9f 70       	andi	r25, 0x0F	; 15
	if(wr != uart_1_txrd)
 17e:	20 91 02 01 	lds	r18, 0x0102
 182:	92 17       	cp	r25, r18
 184:	59 f0       	breq	.+22     	; 0x19c <uart_1_write+0x28>
	{
		uart_1_tx[uart_1_txwr] = byte;
 186:	f0 e0       	ldi	r31, 0x00	; 0
 188:	ed 5f       	subi	r30, 0xFD	; 253
 18a:	fe 4f       	sbci	r31, 0xFE	; 254
 18c:	80 83       	st	Z, r24
		uart_1_txwr = wr;
 18e:	90 93 23 01 	sts	0x0123, r25
		UCSR1B |= (1<<UDRIE1);
 192:	ea e9       	ldi	r30, 0x9A	; 154
 194:	f0 e0       	ldi	r31, 0x00	; 0
 196:	80 81       	ld	r24, Z
 198:	80 62       	ori	r24, 0x20	; 32
 19a:	80 83       	st	Z, r24
 19c:	08 95       	ret

0000019e <uart_1_init>:
	};
};
//****************************************************************************************
void uart_1_init()
{
	UBRR1L = F_CPU/UART_BAUD_RATE_1_/16-1;
 19e:	89 e1       	ldi	r24, 0x19	; 25
 1a0:	80 93 99 00 	sts	0x0099, r24
	UBRR1H = (F_CPU/UART_BAUD_RATE_1_/16-1)>>8;
 1a4:	10 92 98 00 	sts	0x0098, r1
	UCSR1B = (1<<RXCIE1)|(1<<RXEN1)|(1<<TXEN1);
 1a8:	88 e9       	ldi	r24, 0x98	; 152
 1aa:	80 93 9a 00 	sts	0x009A, r24
 1ae:	08 95       	ret

000001b0 <BUT_Init>:
*   Purpose :       инициализация портов ввода/вывода
*                   вызывается обычно в начале main`a
****************************************************************************/
void BUT_Init(void)
{
	DDRX_BUTTON &= ~(MASK_BUTTONS);
 1b0:	84 b3       	in	r24, 0x14	; 20
 1b2:	80 7c       	andi	r24, 0xC0	; 192
 1b4:	84 bb       	out	0x14, r24	; 20
	PORT_BUTTON |= MASK_BUTTONS;
 1b6:	85 b3       	in	r24, 0x15	; 21
 1b8:	8f 63       	ori	r24, 0x3F	; 63
 1ba:	85 bb       	out	0x15, r24	; 21
 1bc:	08 95       	ret

000001be <BUT_Debrief>:
void BUT_Debrief(void)
{
	//---------------------------------------------------------------------------------------
	unsigned char key;
	//---------------------------------------------------------------------------------------
	if((((PIN_BUTTON)>>(OK))&1)==0)
 1be:	98 9b       	sbis	0x13, 0	; 19
 1c0:	1a c0       	rjmp	.+52     	; 0x1f6 <BUT_Debrief+0x38>
	{
		key = KEY_OK;
	}else if ((((PIN_BUTTON)>>(UP))&1)==0)
 1c2:	99 9b       	sbis	0x13, 1	; 19
 1c4:	1a c0       	rjmp	.+52     	; 0x1fa <BUT_Debrief+0x3c>
	{
		key = KEY_DOWN;
	}else if ((((PIN_BUTTON)>>(DOWN))&1)==0)
 1c6:	9a 9b       	sbis	0x13, 2	; 19
 1c8:	1a c0       	rjmp	.+52     	; 0x1fe <BUT_Debrief+0x40>
	{
		key = KEY_UP;
	}else if ((((PIN_BUTTON)>>(RIGHT))&1)==0)
 1ca:	9b 9b       	sbis	0x13, 3	; 19
 1cc:	1a c0       	rjmp	.+52     	; 0x202 <BUT_Debrief+0x44>
	{
		key = KEY_RIGHT;
	}
	else if ((((PIN_BUTTON)>>(LEFT))&1)==0)
 1ce:	9c 9b       	sbis	0x13, 4	; 19
 1d0:	1a c0       	rjmp	.+52     	; 0x206 <BUT_Debrief+0x48>
	{
		key = KEY_LEFT;
	}
	else if ((((PIN_BUTTON)>>(KEY_ESC))&1)==0)
 1d2:	9e 9b       	sbis	0x13, 6	; 19
 1d4:	1a c0       	rjmp	.+52     	; 0x20a <BUT_Debrief+0x4c>
 1d6:	0c c0       	rjmp	.+24     	; 0x1f0 <BUT_Debrief+0x32>
		{
			//и если кнопка удерживается долго
			//записать ее номер в буфер
			if (comp == THRESHOLD)
			{
				comp = THRESHOLD+10;
 1d8:	8f e0       	ldi	r24, 0x0F	; 15
 1da:	80 93 00 01 	sts	0x0100, r24
				pressedKey = key;
 1de:	90 93 01 01 	sts	0x0101, r25
				return;
 1e2:	08 95       	ret
			}
			else if (comp < (THRESHOLD+5))
 1e4:	8a 30       	cpi	r24, 0x0A	; 10
 1e6:	b8 f4       	brcc	.+46     	; 0x216 <BUT_Debrief+0x58>
			{
				comp++;
 1e8:	8f 5f       	subi	r24, 0xFF	; 255
 1ea:	80 93 00 01 	sts	0x0100, r24
 1ee:	08 95       	ret
			};
		}
		else
		{
			comp=0;
 1f0:	10 92 00 01 	sts	0x0100, r1
 1f4:	08 95       	ret
	//---------------------------------------------------------------------------------------
	unsigned char key;
	//---------------------------------------------------------------------------------------
	if((((PIN_BUTTON)>>(OK))&1)==0)
	{
		key = KEY_OK;
 1f6:	91 e0       	ldi	r25, 0x01	; 1
 1f8:	09 c0       	rjmp	.+18     	; 0x20c <BUT_Debrief+0x4e>
	}else if ((((PIN_BUTTON)>>(UP))&1)==0)
	{
		key = KEY_DOWN;
 1fa:	93 e0       	ldi	r25, 0x03	; 3
 1fc:	07 c0       	rjmp	.+14     	; 0x20c <BUT_Debrief+0x4e>
	}else if ((((PIN_BUTTON)>>(DOWN))&1)==0)
	{
		key = KEY_UP;
 1fe:	92 e0       	ldi	r25, 0x02	; 2
 200:	05 c0       	rjmp	.+10     	; 0x20c <BUT_Debrief+0x4e>
	}else if ((((PIN_BUTTON)>>(RIGHT))&1)==0)
	{
		key = KEY_RIGHT;
 202:	94 e0       	ldi	r25, 0x04	; 4
 204:	03 c0       	rjmp	.+6      	; 0x20c <BUT_Debrief+0x4e>
	}
	else if ((((PIN_BUTTON)>>(LEFT))&1)==0)
	{
		key = KEY_LEFT;
 206:	95 e0       	ldi	r25, 0x05	; 5
 208:	01 c0       	rjmp	.+2      	; 0x20c <BUT_Debrief+0x4e>
	}
	else if ((((PIN_BUTTON)>>(KEY_ESC))&1)==0)
	{
		key = KEY_ESC;
 20a:	96 e0       	ldi	r25, 0x06	; 6
		//если во временной переменной что-то есть
		if (key!=0)
		{
			//и если кнопка удерживается долго
			//записать ее номер в буфер
			if (comp == THRESHOLD)
 20c:	80 91 00 01 	lds	r24, 0x0100
 210:	85 30       	cpi	r24, 0x05	; 5
 212:	41 f7       	brne	.-48     	; 0x1e4 <BUT_Debrief+0x26>
 214:	e1 cf       	rjmp	.-62     	; 0x1d8 <BUT_Debrief+0x1a>
 216:	08 95       	ret

00000218 <init_mcu>:
	
// Input/Output Ports initialization
// Port A initialization
// Func7=Out Func6=Out Func5=Out Func4=Out Func3=Out Func2=Out Func1=In Func0=Out
// State7=0 State6=0 State5=0 State4=0 State3=0 State2=0 State1=T State0=0
PORTA=0x00;
 218:	1b ba       	out	0x1b, r1	; 27
DDRA=0xFD;
 21a:	8d ef       	ldi	r24, 0xFD	; 253
 21c:	8a bb       	out	0x1a, r24	; 26

// Port B initialization
// Func7=Out Func6=Out Func5=Out Func4=Out Func3=Out Func2=In Func1=In Func0=In
// State7=0 State6=0 State5=0 State4=0 State3=0 State2=T State1=T State0=T
PORTB=0x00;
 21e:	18 ba       	out	0x18, r1	; 24
DDRB=0xF8;
 220:	88 ef       	ldi	r24, 0xF8	; 248
 222:	87 bb       	out	0x17, r24	; 23

// Port C initialization
// Func7=Out Func6=Out Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
// State7=0 State6=1 State5=P State4=P State3=P State2=P State1=P State0=P
PORTC=0x7F;
 224:	8f e7       	ldi	r24, 0x7F	; 127
 226:	85 bb       	out	0x15, r24	; 21
DDRC=0xC0;
 228:	80 ec       	ldi	r24, 0xC0	; 192
 22a:	84 bb       	out	0x14, r24	; 20

// Port D initialization
// Func7=Out Func6=In Func5=Out Func4=In Func3=In Func2=In Func1=In Func0=In
// State7=0 State6=T State5=0 State4=T State3=T State2=T State1=T State0=T
PORTD=0x00;
 22c:	12 ba       	out	0x12, r1	; 18
DDRD=0xA0;
 22e:	80 ea       	ldi	r24, 0xA0	; 160
 230:	81 bb       	out	0x11, r24	; 17

// Port E initialization
// Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
// State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
PORTE=0x00;
 232:	13 b8       	out	0x03, r1	; 3
DDRE=0x00;
 234:	12 b8       	out	0x02, r1	; 2

// Port F initialization
// Func7=In Func6=In Func5=In Func4=In Func3=Out Func2=Out Func1=Out Func0=In
// State7=T State6=T State5=T State4=T State3=0 State2=0 State1=0 State0=P
PORTF=0x01;
 236:	81 e0       	ldi	r24, 0x01	; 1
 238:	80 93 62 00 	sts	0x0062, r24
DDRF=0x0E;
 23c:	8e e0       	ldi	r24, 0x0E	; 14
 23e:	80 93 61 00 	sts	0x0061, r24

// Port G initialization
// Func4=Out Func3=Out Func2=In Func1=Out Func0=Out
// State4=0 State3=0 State2=T State1=1 State0=1
PORTG=0x03;
 242:	83 e0       	ldi	r24, 0x03	; 3
 244:	80 93 65 00 	sts	0x0065, r24
DDRG=0x1B;
 248:	8b e1       	ldi	r24, 0x1B	; 27
 24a:	80 93 64 00 	sts	0x0064, r24
// Timer/Counter 0 initialization
// Clock source: System Clock
// Clock value: 62,500 kHz
// Mode: Normal top=0xFF
// OC0 output: Disconnected
ASSR=0x00;
 24e:	10 be       	out	0x30, r1	; 48
TCCR0=0x06;
 250:	86 e0       	ldi	r24, 0x06	; 6
 252:	83 bf       	out	0x33, r24	; 51
TCNT0=0x00;
 254:	12 be       	out	0x32, r1	; 50
OCR0=0x00;
 256:	11 be       	out	0x31, r1	; 49
// Timer1 Overflow Interrupt: On
// Input Capture Interrupt: Off
// Compare A Match Interrupt: Off
// Compare B Match Interrupt: Off
// Compare C Match Interrupt: Off
TCCR1A=0x00;
 258:	1f bc       	out	0x2f, r1	; 47
TCCR1B=0x04;
 25a:	84 e0       	ldi	r24, 0x04	; 4
 25c:	8e bd       	out	0x2e, r24	; 46
TCNT1H=0x0B;
 25e:	9b e0       	ldi	r25, 0x0B	; 11
 260:	9d bd       	out	0x2d, r25	; 45
TCNT1L=0xDC;
 262:	9c ed       	ldi	r25, 0xDC	; 220
 264:	9c bd       	out	0x2c, r25	; 44
ICR1H=0x00;
 266:	17 bc       	out	0x27, r1	; 39
ICR1L=0x00;
 268:	16 bc       	out	0x26, r1	; 38
OCR1AH=0x00;
 26a:	1b bc       	out	0x2b, r1	; 43
OCR1AL=0x00;
 26c:	1a bc       	out	0x2a, r1	; 42
OCR1BH=0x00;
 26e:	19 bc       	out	0x29, r1	; 41
OCR1BL=0x00;
 270:	18 bc       	out	0x28, r1	; 40
OCR1CH=0x00;
 272:	10 92 79 00 	sts	0x0079, r1
OCR1CL=0x00;
 276:	10 92 78 00 	sts	0x0078, r1
// Timer/Counter 2 initialization
// Clock source: System Clock
// Clock value: 16000,000 kHz
// Mode: Fast PWM top=0xFF
// OC2 output: Non-Inverted PWM
TCCR2=0x69;
 27a:	99 e6       	ldi	r25, 0x69	; 105
 27c:	95 bd       	out	0x25, r25	; 37
TCNT2=0x00;
 27e:	14 bc       	out	0x24, r1	; 36
OCR2=0x00;
 280:	13 bc       	out	0x23, r1	; 35
// Compare A Match Interrupt: Off
// Compare B Match Interrupt: Off
// Compare C Match Interrupt: Off
//TCCR3A=0x00;
//TCCR3B=0x01;
TCCR3A=0x00;
 282:	10 92 8b 00 	sts	0x008B, r1
TCCR3B=0x00;
 286:	10 92 8a 00 	sts	0x008A, r1
TCNT3H=0x00;
 28a:	10 92 89 00 	sts	0x0089, r1
TCNT3L=0x00;
 28e:	10 92 88 00 	sts	0x0088, r1
ICR3H=0x00;
 292:	10 92 81 00 	sts	0x0081, r1
ICR3L=0x00;
 296:	10 92 80 00 	sts	0x0080, r1
OCR3AH=0x00;
 29a:	10 92 87 00 	sts	0x0087, r1
OCR3AL=0x00;
 29e:	10 92 86 00 	sts	0x0086, r1
OCR3BH=0x00;
 2a2:	10 92 85 00 	sts	0x0085, r1
OCR3BL=0x00;
 2a6:	10 92 84 00 	sts	0x0084, r1
OCR3CH=0x00;
 2aa:	10 92 83 00 	sts	0x0083, r1
OCR3CL=0x00;
 2ae:	10 92 82 00 	sts	0x0082, r1
// INT3: Off
// INT4: Off
// INT5: Off
// INT6: Off
// INT7: Off
EICRA=0x00;
 2b2:	10 92 6a 00 	sts	0x006A, r1
EICRB=0x00;
 2b6:	1a be       	out	0x3a, r1	; 58
EIMSK=0x00;
 2b8:	19 be       	out	0x39, r1	; 57

// Timer(s)/Counter(s) Interrupt(s) initialization
TIMSK=0x05;//TIMSK=0xC5;
 2ba:	95 e0       	ldi	r25, 0x05	; 5
 2bc:	97 bf       	out	0x37, r25	; 55
ETIMSK=0x04;
 2be:	80 93 7d 00 	sts	0x007D, r24

// USART0 initialization
// USART0 disabled
UCSR0B=0x00;
 2c2:	1a b8       	out	0x0a, r1	; 10

// USART1 initialization
// USART1 disabled
UCSR1B=0x00;
 2c4:	10 92 9a 00 	sts	0x009A, r1

// Analog Comparator initialization
// Analog Comparator: Off
// Analog Comparator Input Capture by Timer/Counter 1: Off
ACSR=0x80;
 2c8:	80 e8       	ldi	r24, 0x80	; 128
 2ca:	88 b9       	out	0x08, r24	; 8
SFIOR=0x00;
 2cc:	10 bc       	out	0x20, r1	; 32

// ADC initialization
// ADC disabled
ADCSRA=0x00;
 2ce:	16 b8       	out	0x06, r1	; 6

// SPI initialization
// SPI disabled
SPCR=0x00;
 2d0:	1d b8       	out	0x0d, r1	; 13

// TWI initialization
// TWI disabled
TWCR=0x00;
 2d2:	10 92 74 00 	sts	0x0074, r1
 2d6:	08 95       	ret

000002d8 <__vector_16>:

//****************************************************************************************
// Timer0 overflow interrupt service routine
//****************************************************************************************
ISR (TIMER0_OVF_vect)
{
 2d8:	1f 92       	push	r1
 2da:	0f 92       	push	r0
 2dc:	0f b6       	in	r0, 0x3f	; 63
 2de:	0f 92       	push	r0
 2e0:	11 24       	eor	r1, r1
 2e2:	2f 93       	push	r18
 2e4:	3f 93       	push	r19
 2e6:	4f 93       	push	r20
 2e8:	5f 93       	push	r21
 2ea:	6f 93       	push	r22
 2ec:	7f 93       	push	r23
 2ee:	8f 93       	push	r24
 2f0:	9f 93       	push	r25
 2f2:	af 93       	push	r26
 2f4:	bf 93       	push	r27
 2f6:	ef 93       	push	r30
 2f8:	ff 93       	push	r31
	//---------------------------------------------------------------------------------------
	BUT_Debrief();
 2fa:	0e 94 df 00 	call	0x1be	; 0x1be <BUT_Debrief>
	//---------------------------------------------------------------------------------------
	return;
};
 2fe:	ff 91       	pop	r31
 300:	ef 91       	pop	r30
 302:	bf 91       	pop	r27
 304:	af 91       	pop	r26
 306:	9f 91       	pop	r25
 308:	8f 91       	pop	r24
 30a:	7f 91       	pop	r23
 30c:	6f 91       	pop	r22
 30e:	5f 91       	pop	r21
 310:	4f 91       	pop	r20
 312:	3f 91       	pop	r19
 314:	2f 91       	pop	r18
 316:	0f 90       	pop	r0
 318:	0f be       	out	0x3f, r0	; 63
 31a:	0f 90       	pop	r0
 31c:	1f 90       	pop	r1
 31e:	18 95       	reti

00000320 <__vector_14>:
//****************************************************************************************
// Timer1 overflow interrupt service routine
//****************************************************************************************
ISR (TIMER1_OVF_vect)
{
 320:	1f 92       	push	r1
 322:	0f 92       	push	r0
 324:	0f b6       	in	r0, 0x3f	; 63
 326:	0f 92       	push	r0
 328:	11 24       	eor	r1, r1
 32a:	8f 93       	push	r24
	// Reinitialize Timer1 value
	TCNT1H=0x0B;
 32c:	8b e0       	ldi	r24, 0x0B	; 11
 32e:	8d bd       	out	0x2d, r24	; 45
	TCNT1L=0xDC;
 330:	8c ed       	ldi	r24, 0xDC	; 220
 332:	8c bd       	out	0x2c, r24	; 44
	//---------------------------------------------------------------------------------------

	//---------------------------------------------------------------------------------------
	return;
};
 334:	8f 91       	pop	r24
 336:	0f 90       	pop	r0
 338:	0f be       	out	0x3f, r0	; 63
 33a:	0f 90       	pop	r0
 33c:	1f 90       	pop	r1
 33e:	18 95       	reti

00000340 <__vector_10>:
//****************************************************************************************
// Timer2 overflow interrupt service routine
//****************************************************************************************
ISR (TIMER2_OVF_vect)
{
 340:	1f 92       	push	r1
 342:	0f 92       	push	r0
 344:	0f b6       	in	r0, 0x3f	; 63
 346:	0f 92       	push	r0
 348:	11 24       	eor	r1, r1
	//---------------------------------------------------------------------------------------

	//---------------------------------------------------------------------------------------
	return;
};
 34a:	0f 90       	pop	r0
 34c:	0f be       	out	0x3f, r0	; 63
 34e:	0f 90       	pop	r0
 350:	1f 90       	pop	r1
 352:	18 95       	reti

00000354 <__vector_29>:
//****************************************************************************************
// Timer3 overflow interrupt service routine
//****************************************************************************************
ISR (TIMER3_OVF_vect)
{
 354:	1f 92       	push	r1
 356:	0f 92       	push	r0
 358:	0f b6       	in	r0, 0x3f	; 63
 35a:	0f 92       	push	r0
 35c:	11 24       	eor	r1, r1
	//---------------------------------------------------------------------------------------

	//---------------------------------------------------------------------------------------
	return;
};
 35e:	0f 90       	pop	r0
 360:	0f be       	out	0x3f, r0	; 63
 362:	0f 90       	pop	r0
 364:	1f 90       	pop	r1
 366:	18 95       	reti

00000368 <main>:
{
	//---------------------------------------------------------------------------------------
	// Declare your local variables here
	unsigned char cnt = 0;
	//---------------------------------------------------------------------------------------
	init_mcu();
 368:	0e 94 0c 01 	call	0x218	; 0x218 <init_mcu>
	//---------------------------------------------------------------------------------------
	uart_0_init();
 36c:	0e 94 24 04 	call	0x848	; 0x848 <uart_0_init>
	uart_1_init();
 370:	0e 94 cf 00 	call	0x19e	; 0x19e <uart_1_init>
	i2c_lcd_init();
 374:	0e 94 a9 02 	call	0x552	; 0x552 <i2c_lcd_init>
	BUT_Init();
 378:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <BUT_Init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 37c:	2f ef       	ldi	r18, 0xFF	; 255
 37e:	81 ee       	ldi	r24, 0xE1	; 225
 380:	94 e0       	ldi	r25, 0x04	; 4
 382:	21 50       	subi	r18, 0x01	; 1
 384:	80 40       	sbci	r24, 0x00	; 0
 386:	90 40       	sbci	r25, 0x00	; 0
 388:	e1 f7       	brne	.-8      	; 0x382 <main+0x1a>
 38a:	00 c0       	rjmp	.+0      	; 0x38c <main+0x24>
 38c:	00 00       	nop
	_delay_ms(100);
	//---------------------------------------------------------------------------------------
	asm("sei");
 38e:	78 94       	sei

int main(void)
{
	//---------------------------------------------------------------------------------------
	// Declare your local variables here
	unsigned char cnt = 0;
 390:	c0 e0       	ldi	r28, 0x00	; 0
	//---------------------------------------------------------------------------------------
    while(1)
    {
        //TODO:: Please write your application code
		
		Main_menu_i2c (cnt);
 392:	8c 2f       	mov	r24, r28
 394:	0e 94 a5 03 	call	0x74a	; 0x74a <Main_menu_i2c>
		uart_0_write (cnt);
 398:	8c 2f       	mov	r24, r28
 39a:	0e 94 12 04 	call	0x824	; 0x824 <uart_0_write>
		uart_1_write (cnt);
 39e:	8c 2f       	mov	r24, r28
 3a0:	0e 94 ba 00 	call	0x174	; 0x174 <uart_1_write>
 3a4:	2f ef       	ldi	r18, 0xFF	; 255
 3a6:	81 ee       	ldi	r24, 0xE1	; 225
 3a8:	94 e0       	ldi	r25, 0x04	; 4
 3aa:	21 50       	subi	r18, 0x01	; 1
 3ac:	80 40       	sbci	r24, 0x00	; 0
 3ae:	90 40       	sbci	r25, 0x00	; 0
 3b0:	e1 f7       	brne	.-8      	; 0x3aa <main+0x42>
 3b2:	00 c0       	rjmp	.+0      	; 0x3b4 <main+0x4c>
 3b4:	00 00       	nop
		_delay_ms(100);
		cnt++;
 3b6:	cf 5f       	subi	r28, 0xFF	; 255
 3b8:	ec cf       	rjmp	.-40     	; 0x392 <main+0x2a>

000003ba <i2c_init>:
*   Parameters :    нет
*   Purpose :       Инициализация i2c
****************************************************************************/
void i2c_init(void)
{
	(PORT_I2C&=~(1<<SDA));
 3ba:	90 98       	cbi	0x12, 0	; 18
	(PORT_I2C&=~(1<<SCL));
 3bc:	91 98       	cbi	0x12, 1	; 18
	(DDR_I2C&=~(1<<SDA));
 3be:	88 98       	cbi	0x11, 0	; 17
	(DDR_I2C&=~(1<<SCL));
 3c0:	89 98       	cbi	0x11, 1	; 17
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3c2:	85 e0       	ldi	r24, 0x05	; 5
 3c4:	8a 95       	dec	r24
 3c6:	f1 f7       	brne	.-4      	; 0x3c4 <i2c_init+0xa>
 3c8:	00 00       	nop
 3ca:	08 95       	ret

000003cc <i2c_start>:
*   Parameters :    нет
*   Purpose :       Старт i2c
****************************************************************************/
void i2c_start(void)         
{ 
	(DDR_I2C|=(1<<SDA)); _delay_us(pause);
 3cc:	88 9a       	sbi	0x11, 0	; 17
 3ce:	85 e0       	ldi	r24, 0x05	; 5
 3d0:	8a 95       	dec	r24
 3d2:	f1 f7       	brne	.-4      	; 0x3d0 <i2c_start+0x4>
 3d4:	00 00       	nop
	(DDR_I2C|=(1<<SCL)); _delay_us(pause); 
 3d6:	89 9a       	sbi	0x11, 1	; 17
 3d8:	85 e0       	ldi	r24, 0x05	; 5
 3da:	8a 95       	dec	r24
 3dc:	f1 f7       	brne	.-4      	; 0x3da <i2c_start+0xe>
 3de:	00 00       	nop
 3e0:	08 95       	ret

000003e2 <i2c_write>:
*   Returns :       нет
*   Parameters :    Данныэ на отправку
*   Purpose :       Передача 1го байта по i2c
****************************************************************************/
void i2c_write(unsigned char byt)  
{ 
 3e2:	27 e0       	ldi	r18, 0x07	; 7
 3e4:	30 e0       	ldi	r19, 0x00	; 0
    unsigned char k;                       
    for (k = 0; k < 8; k++)    
    { 
		(DDR_I2C|=(1<<SCL));
        if(0x01 & (byt >> (7 - k)))
 3e6:	90 e0       	ldi	r25, 0x00	; 0
void i2c_write(unsigned char byt)  
{ 
    unsigned char k;                       
    for (k = 0; k < 8; k++)    
    { 
		(DDR_I2C|=(1<<SCL));
 3e8:	89 9a       	sbi	0x11, 1	; 17
        if(0x01 & (byt >> (7 - k)))
 3ea:	ac 01       	movw	r20, r24
 3ec:	02 2e       	mov	r0, r18
 3ee:	02 c0       	rjmp	.+4      	; 0x3f4 <i2c_write+0x12>
 3f0:	55 95       	asr	r21
 3f2:	47 95       	ror	r20
 3f4:	0a 94       	dec	r0
 3f6:	e2 f7       	brpl	.-8      	; 0x3f0 <i2c_write+0xe>
 3f8:	40 ff       	sbrs	r20, 0
 3fa:	02 c0       	rjmp	.+4      	; 0x400 <i2c_write+0x1e>
		{
			(DDR_I2C&=~(1<<SDA));
 3fc:	88 98       	cbi	0x11, 0	; 17
 3fe:	01 c0       	rjmp	.+2      	; 0x402 <i2c_write+0x20>
		}else
		{
			(DDR_I2C|=(1<<SDA));
 400:	88 9a       	sbi	0x11, 0	; 17
 402:	45 e0       	ldi	r20, 0x05	; 5
 404:	4a 95       	dec	r20
 406:	f1 f7       	brne	.-4      	; 0x404 <i2c_write+0x22>
 408:	00 00       	nop
		};
	    _delay_us(pause);   
        (DDR_I2C&=~(1<<SCL));
 40a:	89 98       	cbi	0x11, 1	; 17
 40c:	45 e0       	ldi	r20, 0x05	; 5
 40e:	4a 95       	dec	r20
 410:	f1 f7       	brne	.-4      	; 0x40e <i2c_write+0x2c>
 412:	00 00       	nop
 414:	21 50       	subi	r18, 0x01	; 1
 416:	31 09       	sbc	r19, r1
 418:	38 f7       	brcc	.-50     	; 0x3e8 <i2c_write+0x6>
		_delay_us(pause);             
    };
	(DDR_I2C&=~(1<<SDA));
 41a:	88 98       	cbi	0x11, 0	; 17
	(DDR_I2C|=(1<<SCL));
 41c:	89 9a       	sbi	0x11, 1	; 17
 41e:	85 e0       	ldi	r24, 0x05	; 5
 420:	8a 95       	dec	r24
 422:	f1 f7       	brne	.-4      	; 0x420 <i2c_write+0x3e>
 424:	00 00       	nop
	_delay_us(pause);
	(DDR_I2C&=~(1<<SCL));
 426:	89 98       	cbi	0x11, 1	; 17
 428:	45 e0       	ldi	r20, 0x05	; 5
 42a:	4a 95       	dec	r20
 42c:	f1 f7       	brne	.-4      	; 0x42a <i2c_write+0x48>
 42e:	00 00       	nop
	_delay_us(pause);
	(DDR_I2C|=(1<<SCL));
 430:	89 9a       	sbi	0x11, 1	; 17
 432:	08 95       	ret

00000434 <i2c_stop>:
*   Parameters :    нет
*   Purpose :       Стоп i2c
****************************************************************************/
void i2c_stop(void)            
{ 
    (DDR_I2C|=(1<<SDA)); _delay_us(pause);   
 434:	88 9a       	sbi	0x11, 0	; 17
 436:	85 e0       	ldi	r24, 0x05	; 5
 438:	8a 95       	dec	r24
 43a:	f1 f7       	brne	.-4      	; 0x438 <i2c_stop+0x4>
 43c:	00 00       	nop
    (DDR_I2C&=~(1<<SCL)); _delay_us(pause);           
 43e:	89 98       	cbi	0x11, 1	; 17
 440:	85 e0       	ldi	r24, 0x05	; 5
 442:	8a 95       	dec	r24
 444:	f1 f7       	brne	.-4      	; 0x442 <i2c_stop+0xe>
 446:	00 00       	nop
    (DDR_I2C&=~(1<<SDA)); _delay_us(pause);                                 
 448:	88 98       	cbi	0x11, 0	; 17
 44a:	85 e0       	ldi	r24, 0x05	; 5
 44c:	8a 95       	dec	r24
 44e:	f1 f7       	brne	.-4      	; 0x44c <i2c_stop+0x18>
 450:	00 00       	nop
 452:	08 95       	ret

00000454 <i2c_acknowledge>:
    return (check);      
};

void i2c_acknowledge(void)
{
	(DDR_I2C&=~(1<<SDA));
 454:	88 98       	cbi	0x11, 0	; 17
	//delayMicroseconds(1);
	(DDR_I2C|=(1<<SCL));
 456:	89 9a       	sbi	0x11, 1	; 17
 458:	85 e0       	ldi	r24, 0x05	; 5
 45a:	8a 95       	dec	r24
 45c:	f1 f7       	brne	.-4      	; 0x45a <i2c_acknowledge+0x6>
 45e:	00 00       	nop
	_delay_us(pause);
	(DDR_I2C&=~(1<<SCL));
 460:	89 98       	cbi	0x11, 1	; 17
 462:	08 95       	ret

00000464 <PCF8574_Write>:

#include "i2c_lcd.h"

//****************************************************************************************
void PCF8574_Write(unsigned char data)
{
 464:	cf 93       	push	r28
 466:	c8 2f       	mov	r28, r24
	i2c_start();              //         |-[S]-|  ;Start Condition
 468:	0e 94 e6 01 	call	0x3cc	; 0x3cc <i2c_start>
	i2c_write(PCF8574_ADDR | I2C_WRITE);    //         |---Slave address (PCF8574)--[A2=0,A1=0,A0=0]---|   +    |-R/W-|
 46c:	8e e4       	ldi	r24, 0x4E	; 78
 46e:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <i2c_write>
	i2c_acknowledge();        //         |-[A]-|  ;Active LOW
 472:	0e 94 2a 02 	call	0x454	; 0x454 <i2c_acknowledge>
	i2c_write(data);          //         |-------------------data to port-----------------------|
 476:	8c 2f       	mov	r24, r28
 478:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <i2c_write>
	i2c_acknowledge();        //         |-[A]-|  ;Active LOW
 47c:	0e 94 2a 02 	call	0x454	; 0x454 <i2c_acknowledge>
	i2c_stop();               //         |-[P]-|  ;Stop Condition
 480:	0e 94 1a 02 	call	0x434	; 0x434 <i2c_stop>
};
 484:	cf 91       	pop	r28
 486:	08 95       	ret

00000488 <send_i2c_lcd_byte>:
//***************************************************************************************
//Procedure sending LCD byte
//Input: Byte, Kommand/Symbol data
//***************************************************************************************
void send_i2c_lcd_byte(unsigned char lcd_data, unsigned char rs_status ) //bool lcd_command,
{
 488:	df 92       	push	r13
 48a:	ef 92       	push	r14
 48c:	ff 92       	push	r15
 48e:	0f 93       	push	r16
 490:	1f 93       	push	r17
 492:	cf 93       	push	r28
 494:	df 93       	push	r29
	//lcd_data=0x08;
	//---------------------------------------------------------------------------------------
	rs_status=rs_status*2;
 496:	d6 2e       	mov	r13, r22
 498:	dd 0c       	add	r13, r13
	PCF8574_Write(rs_status|E_L|((lcd_data<<1)&0xE0)|((lcd_data>>3)&0x10));
 49a:	e8 2e       	mov	r14, r24
 49c:	f1 2c       	mov	r15, r1
 49e:	e7 01       	movw	r28, r14
 4a0:	cc 0f       	add	r28, r28
 4a2:	dd 1f       	adc	r29, r29
 4a4:	18 2f       	mov	r17, r24
 4a6:	16 95       	lsr	r17
 4a8:	16 95       	lsr	r17
 4aa:	16 95       	lsr	r17
 4ac:	d1 2f       	mov	r29, r17
 4ae:	d0 71       	andi	r29, 0x10	; 16
 4b0:	dd 29       	or	r29, r13
 4b2:	8c 2f       	mov	r24, r28
 4b4:	80 7e       	andi	r24, 0xE0	; 224
 4b6:	d8 2b       	or	r29, r24
 4b8:	8d 2f       	mov	r24, r29
 4ba:	0e 94 32 02 	call	0x464	; 0x464 <PCF8574_Write>
 4be:	85 e3       	ldi	r24, 0x35	; 53
 4c0:	8a 95       	dec	r24
 4c2:	f1 f7       	brne	.-4      	; 0x4c0 <send_i2c_lcd_byte+0x38>
 4c4:	00 00       	nop
	_delay_us(10);
	PCF8574_Write(rs_status|E_H|((lcd_data<<1)&0xE0)|((lcd_data>>3)&0x10));
 4c6:	81 2f       	mov	r24, r17
 4c8:	80 71       	andi	r24, 0x10	; 16
 4ca:	8d 29       	or	r24, r13
 4cc:	88 60       	ori	r24, 0x08	; 8
 4ce:	9c 2f       	mov	r25, r28
 4d0:	90 7e       	andi	r25, 0xE0	; 224
 4d2:	89 2b       	or	r24, r25
 4d4:	0e 94 32 02 	call	0x464	; 0x464 <PCF8574_Write>
 4d8:	95 e3       	ldi	r25, 0x35	; 53
 4da:	9a 95       	dec	r25
 4dc:	f1 f7       	brne	.-4      	; 0x4da <send_i2c_lcd_byte+0x52>
 4de:	00 00       	nop
	_delay_us(10);
	PCF8574_Write(rs_status|E_L|((lcd_data<<1)&0xE0)|((lcd_data>>3)&0x10));
 4e0:	8d 2f       	mov	r24, r29
 4e2:	0e 94 32 02 	call	0x464	; 0x464 <PCF8574_Write>
 4e6:	85 e3       	ldi	r24, 0x35	; 53
 4e8:	8a 95       	dec	r24
 4ea:	f1 f7       	brne	.-4      	; 0x4e8 <send_i2c_lcd_byte+0x60>
 4ec:	00 00       	nop
	_delay_us(10);
	PCF8574_Write(rs_status|E_L|((lcd_data<<5)&0xE0)|((lcd_data<<1)&0x10));
 4ee:	87 01       	movw	r16, r14
 4f0:	00 0f       	add	r16, r16
 4f2:	11 1f       	adc	r17, r17
 4f4:	02 95       	swap	r16
 4f6:	12 95       	swap	r17
 4f8:	10 7f       	andi	r17, 0xF0	; 240
 4fa:	10 27       	eor	r17, r16
 4fc:	00 7f       	andi	r16, 0xF0	; 240
 4fe:	10 27       	eor	r17, r16
 500:	dd 2d       	mov	r29, r13
 502:	d0 2b       	or	r29, r16
 504:	8c 2f       	mov	r24, r28
 506:	80 71       	andi	r24, 0x10	; 16
 508:	d8 2b       	or	r29, r24
 50a:	8d 2f       	mov	r24, r29
 50c:	0e 94 32 02 	call	0x464	; 0x464 <PCF8574_Write>
 510:	95 e3       	ldi	r25, 0x35	; 53
 512:	9a 95       	dec	r25
 514:	f1 f7       	brne	.-4      	; 0x512 <send_i2c_lcd_byte+0x8a>
 516:	00 00       	nop
	_delay_us(10);
	PCF8574_Write(rs_status|E_H|((lcd_data<<5)&0xE0)|((lcd_data<<1)&0x10));
 518:	8d 2d       	mov	r24, r13
 51a:	88 60       	ori	r24, 0x08	; 8
 51c:	08 2b       	or	r16, r24
 51e:	8c 2f       	mov	r24, r28
 520:	80 71       	andi	r24, 0x10	; 16
 522:	80 2b       	or	r24, r16
 524:	0e 94 32 02 	call	0x464	; 0x464 <PCF8574_Write>
 528:	85 e3       	ldi	r24, 0x35	; 53
 52a:	8a 95       	dec	r24
 52c:	f1 f7       	brne	.-4      	; 0x52a <send_i2c_lcd_byte+0xa2>
 52e:	00 00       	nop
	_delay_us(10);
	PCF8574_Write(rs_status|E_L|((lcd_data<<5)&0xE0)|((lcd_data<<1)&0x10));
 530:	8d 2f       	mov	r24, r29
 532:	0e 94 32 02 	call	0x464	; 0x464 <PCF8574_Write>
 536:	87 ec       	ldi	r24, 0xC7	; 199
 538:	90 e0       	ldi	r25, 0x00	; 0
 53a:	01 97       	sbiw	r24, 0x01	; 1
 53c:	f1 f7       	brne	.-4      	; 0x53a <send_i2c_lcd_byte+0xb2>
 53e:	00 c0       	rjmp	.+0      	; 0x540 <send_i2c_lcd_byte+0xb8>
 540:	00 00       	nop

	
	
	
	
};
 542:	df 91       	pop	r29
 544:	cf 91       	pop	r28
 546:	1f 91       	pop	r17
 548:	0f 91       	pop	r16
 54a:	ff 90       	pop	r15
 54c:	ef 90       	pop	r14
 54e:	df 90       	pop	r13
 550:	08 95       	ret

00000552 <i2c_lcd_init>:
void i2c_lcd_init(void)
{
	//---------------------------------------------------------------------------------------
	//init i2c
	//---------------------------------------------------------------------------------------
	i2c_init();
 552:	0e 94 dd 01 	call	0x3ba	; 0x3ba <i2c_init>
	//---------------------------------------------------------------------------------------
	PCF8574_Write(0x00);//E = 0 RS= 0 R/W = 0
 556:	80 e0       	ldi	r24, 0x00	; 0
 558:	0e 94 32 02 	call	0x464	; 0x464 <PCF8574_Write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 55c:	8f e9       	ldi	r24, 0x9F	; 159
 55e:	9f e0       	ldi	r25, 0x0F	; 15
 560:	01 97       	sbiw	r24, 0x01	; 1
 562:	f1 f7       	brne	.-4      	; 0x560 <i2c_lcd_init+0xe>
 564:	00 c0       	rjmp	.+0      	; 0x566 <i2c_lcd_init+0x14>
 566:	00 00       	nop
	_delay_ms(1);
	//---------------------------------------------------------------------------------------
	//Function Set 3 ????? ?????? D4-D7 ????????????? bus
	PCF8574_Write(0x60);      //1    0x20 + 0x03
 568:	80 e6       	ldi	r24, 0x60	; 96
 56a:	0e 94 32 02 	call	0x464	; 0x464 <PCF8574_Write>
 56e:	8f e9       	ldi	r24, 0x9F	; 159
 570:	9f e0       	ldi	r25, 0x0F	; 15
 572:	01 97       	sbiw	r24, 0x01	; 1
 574:	f1 f7       	brne	.-4      	; 0x572 <i2c_lcd_init+0x20>
 576:	00 c0       	rjmp	.+0      	; 0x578 <i2c_lcd_init+0x26>
 578:	00 00       	nop
	_delay_ms(1);
	PCF8574_Write(0x40);
 57a:	80 e4       	ldi	r24, 0x40	; 64
 57c:	0e 94 32 02 	call	0x464	; 0x464 <PCF8574_Write>
 580:	8f e9       	ldi	r24, 0x9F	; 159
 582:	9f e0       	ldi	r25, 0x0F	; 15
 584:	01 97       	sbiw	r24, 0x01	; 1
 586:	f1 f7       	brne	.-4      	; 0x584 <i2c_lcd_init+0x32>
 588:	00 c0       	rjmp	.+0      	; 0x58a <i2c_lcd_init+0x38>
 58a:	00 00       	nop
	_delay_ms(1);
	PCF8574_Write(E_H|0x40);     //2
 58c:	88 e4       	ldi	r24, 0x48	; 72
 58e:	0e 94 32 02 	call	0x464	; 0x464 <PCF8574_Write>
 592:	8f e9       	ldi	r24, 0x9F	; 159
 594:	9f e0       	ldi	r25, 0x0F	; 15
 596:	01 97       	sbiw	r24, 0x01	; 1
 598:	f1 f7       	brne	.-4      	; 0x596 <i2c_lcd_init+0x44>
 59a:	00 c0       	rjmp	.+0      	; 0x59c <i2c_lcd_init+0x4a>
 59c:	00 00       	nop
	_delay_ms(1);
	PCF8574_Write(E_L|0x40);
 59e:	80 e4       	ldi	r24, 0x40	; 64
 5a0:	0e 94 32 02 	call	0x464	; 0x464 <PCF8574_Write>
 5a4:	8f e9       	ldi	r24, 0x9F	; 159
 5a6:	9f e0       	ldi	r25, 0x0F	; 15
 5a8:	01 97       	sbiw	r24, 0x01	; 1
 5aa:	f1 f7       	brne	.-4      	; 0x5a8 <i2c_lcd_init+0x56>
 5ac:	00 c0       	rjmp	.+0      	; 0x5ae <i2c_lcd_init+0x5c>
 5ae:	00 00       	nop
	_delay_ms(1);
	//---------------------------------------------------------------------------------------
	send_i2c_lcd_byte(0x28,lcd_kom);			//2 lines, 5*8 pixels, 8bit data
 5b0:	60 e0       	ldi	r22, 0x00	; 0
 5b2:	88 e2       	ldi	r24, 0x28	; 40
 5b4:	0e 94 44 02 	call	0x488	; 0x488 <send_i2c_lcd_byte>
	send_i2c_lcd_byte(0x0C,lcd_kom);			//screen enable,
 5b8:	60 e0       	ldi	r22, 0x00	; 0
 5ba:	8c e0       	ldi	r24, 0x0C	; 12
 5bc:	0e 94 44 02 	call	0x488	; 0x488 <send_i2c_lcd_byte>
	send_i2c_lcd_byte(0x06,lcd_kom);			//auto shift left enable
 5c0:	60 e0       	ldi	r22, 0x00	; 0
 5c2:	86 e0       	ldi	r24, 0x06	; 6
 5c4:	0e 94 44 02 	call	0x488	; 0x488 <send_i2c_lcd_byte>
	send_i2c_lcd_byte(0x01,lcd_kom);			//0x01 clear screen
 5c8:	60 e0       	ldi	r22, 0x00	; 0
 5ca:	81 e0       	ldi	r24, 0x01	; 1
 5cc:	0e 94 44 02 	call	0x488	; 0x488 <send_i2c_lcd_byte>
 5d0:	9f ef       	ldi	r25, 0xFF	; 255
 5d2:	29 ef       	ldi	r18, 0xF9	; 249
 5d4:	80 e0       	ldi	r24, 0x00	; 0
 5d6:	91 50       	subi	r25, 0x01	; 1
 5d8:	20 40       	sbci	r18, 0x00	; 0
 5da:	80 40       	sbci	r24, 0x00	; 0
 5dc:	e1 f7       	brne	.-8      	; 0x5d6 <i2c_lcd_init+0x84>
 5de:	00 c0       	rjmp	.+0      	; 0x5e0 <i2c_lcd_init+0x8e>
 5e0:	00 00       	nop
 5e2:	08 95       	ret

000005e4 <send_i2c_lcd_symbol>:
//Input: Symbol
//***************************************************************************************
void send_i2c_lcd_symbol(unsigned char temp_symbol)
{
	//---------------------------------------------------------------------------------------
	send_i2c_lcd_byte(temp_symbol,lcd_sym);
 5e4:	61 e0       	ldi	r22, 0x01	; 1
 5e6:	0e 94 44 02 	call	0x488	; 0x488 <send_i2c_lcd_byte>
 5ea:	08 95       	ret

000005ec <set_i2c_lcd_position>:
//Input: Line(1,2), Position(1..16)
//***************************************************************************************
void set_i2c_lcd_position(unsigned char temp_line, unsigned char temp_pos)
{
	//---------------------------------------------------------------------------------------
	switch (temp_line)
 5ec:	82 30       	cpi	r24, 0x02	; 2
 5ee:	61 f0       	breq	.+24     	; 0x608 <set_i2c_lcd_position+0x1c>
 5f0:	18 f4       	brcc	.+6      	; 0x5f8 <set_i2c_lcd_position+0xc>
 5f2:	81 30       	cpi	r24, 0x01	; 1
 5f4:	31 f0       	breq	.+12     	; 0x602 <set_i2c_lcd_position+0x16>
 5f6:	10 c0       	rjmp	.+32     	; 0x618 <set_i2c_lcd_position+0x2c>
 5f8:	83 30       	cpi	r24, 0x03	; 3
 5fa:	49 f0       	breq	.+18     	; 0x60e <set_i2c_lcd_position+0x22>
 5fc:	84 30       	cpi	r24, 0x04	; 4
 5fe:	51 f0       	breq	.+20     	; 0x614 <set_i2c_lcd_position+0x28>
 600:	0b c0       	rjmp	.+22     	; 0x618 <set_i2c_lcd_position+0x2c>
	{
		//---------------------------------------------------------------------------------------
		case 0x01 :
			temp_line=0x80+temp_pos-1;
 602:	8f e7       	ldi	r24, 0x7F	; 127
 604:	86 0f       	add	r24, r22
		break;
 606:	08 c0       	rjmp	.+16     	; 0x618 <set_i2c_lcd_position+0x2c>
		case 0x02 :
			temp_line=0xC0+temp_pos-1;
 608:	8f eb       	ldi	r24, 0xBF	; 191
 60a:	86 0f       	add	r24, r22
		break;
 60c:	05 c0       	rjmp	.+10     	; 0x618 <set_i2c_lcd_position+0x2c>
		case 0x03 :
			temp_line=0x94+temp_pos-1;
 60e:	83 e9       	ldi	r24, 0x93	; 147
 610:	86 0f       	add	r24, r22
		break;
 612:	02 c0       	rjmp	.+4      	; 0x618 <set_i2c_lcd_position+0x2c>
		case 0x04 :
			temp_line=0xd4+temp_pos-1;
 614:	83 ed       	ldi	r24, 0xD3	; 211
 616:	86 0f       	add	r24, r22
		break;
		default :;
		//---------------------------------------------------------------------------------------
	};   //switch (temp_line)
	//---------------------------------------------------------------------------------------
	send_i2c_lcd_byte(temp_line,lcd_kom);
 618:	60 e0       	ldi	r22, 0x00	; 0
 61a:	0e 94 44 02 	call	0x488	; 0x488 <send_i2c_lcd_byte>
 61e:	08 95       	ret

00000620 <send_i2c_lcd_string_P>:
//***************************************************************************************
//Procedure send symbol string to LCD from FLASH
//Input: Symbol string
//***************************************************************************************
void send_i2c_lcd_string_P(const char *string)
{
 620:	cf 93       	push	r28
 622:	df 93       	push	r29
 624:	ec 01       	movw	r28, r24
	//---------------------------------------------------------------------------------------
	while (pgm_read_byte(string)!='\0')
 626:	fe 01       	movw	r30, r28
 628:	24 91       	lpm	r18, Z
 62a:	22 23       	and	r18, r18
 62c:	59 f0       	breq	.+22     	; 0x644 <send_i2c_lcd_string_P+0x24>
	{
		//---------------------------------------------------------------------------------------
		send_i2c_lcd_byte(pgm_read_byte(string),lcd_sym);
 62e:	fc 01       	movw	r30, r24
 630:	84 91       	lpm	r24, Z
 632:	61 e0       	ldi	r22, 0x01	; 1
 634:	0e 94 44 02 	call	0x488	; 0x488 <send_i2c_lcd_byte>
		string++;
 638:	21 96       	adiw	r28, 0x01	; 1
//Input: Symbol string
//***************************************************************************************
void send_i2c_lcd_string_P(const char *string)
{
	//---------------------------------------------------------------------------------------
	while (pgm_read_byte(string)!='\0')
 63a:	ce 01       	movw	r24, r28
 63c:	fe 01       	movw	r30, r28
 63e:	24 91       	lpm	r18, Z
 640:	21 11       	cpse	r18, r1
 642:	f5 cf       	rjmp	.-22     	; 0x62e <send_i2c_lcd_string_P+0xe>
		send_i2c_lcd_byte(pgm_read_byte(string),lcd_sym);
		string++;
		//---------------------------------------------------------------------------------------
	};
	//---------------------------------------------------------------------------------------
 };
 644:	df 91       	pop	r29
 646:	cf 91       	pop	r28
 648:	08 95       	ret

0000064a <detect_i2c_symbol>:
//Output: Symbol
//***************************************************************************************
unsigned char detect_i2c_symbol(unsigned char temp_det_sym)
{
	//---------------------------------------------------------------------------------------
	switch(temp_det_sym)
 64a:	90 e0       	ldi	r25, 0x00	; 0
 64c:	fc 01       	movw	r30, r24
 64e:	31 97       	sbiw	r30, 0x01	; 1
 650:	e9 30       	cpi	r30, 0x09	; 9
 652:	f1 05       	cpc	r31, r1
 654:	20 f4       	brcc	.+8      	; 0x65e <detect_i2c_symbol+0x14>
 656:	ea 5b       	subi	r30, 0xBA	; 186
 658:	ff 4f       	sbci	r31, 0xFF	; 255
 65a:	0c 94 2d 04 	jmp	0x85a	; 0x85a <__tablejump2__>
	{
		//---------------------------------------------------------------------------------------
		case 0:{return '0';}break;
 65e:	80 e3       	ldi	r24, 0x30	; 48
 660:	08 95       	ret
		case 1:{return '1';}break;
		case 2:{return '2';}break;	
 662:	82 e3       	ldi	r24, 0x32	; 50
 664:	08 95       	ret
		case 3:{return '3';}break;
 666:	83 e3       	ldi	r24, 0x33	; 51
 668:	08 95       	ret
		case 4:{return '4';}break;
 66a:	84 e3       	ldi	r24, 0x34	; 52
 66c:	08 95       	ret
		case 5:{return '5';}break;
 66e:	85 e3       	ldi	r24, 0x35	; 53
 670:	08 95       	ret
		case 6:{return '6';}break;	
 672:	86 e3       	ldi	r24, 0x36	; 54
 674:	08 95       	ret
		case 7:{return '7';}break;
 676:	87 e3       	ldi	r24, 0x37	; 55
 678:	08 95       	ret
		case 8:{return '8';}break;
 67a:	88 e3       	ldi	r24, 0x38	; 56
 67c:	08 95       	ret
		case 9:{return '9';}break;
 67e:	89 e3       	ldi	r24, 0x39	; 57
 680:	08 95       	ret
	//---------------------------------------------------------------------------------------
	switch(temp_det_sym)
	{
		//---------------------------------------------------------------------------------------
		case 0:{return '0';}break;
		case 1:{return '1';}break;
 682:	81 e3       	ldi	r24, 0x31	; 49
		case 9:{return '9';}break;
		default:return '0';
		//---------------------------------------------------------------------------------------
	};
	//---------------------------------------------------------------------------------------
};
 684:	08 95       	ret

00000686 <detect_i2c_string>:
};
//***************************************************************************************
//Вывести на индикатор короткую строку из 4-х цифр
//***************************************************************************************
void detect_i2c_string(unsigned int temp_volt)
{
 686:	af 92       	push	r10
 688:	bf 92       	push	r11
 68a:	cf 92       	push	r12
 68c:	df 92       	push	r13
 68e:	ef 92       	push	r14
 690:	ff 92       	push	r15
 692:	0f 93       	push	r16
 694:	1f 93       	push	r17
 696:	cf 93       	push	r28
 698:	df 93       	push	r29
 69a:	00 d0       	rcall	.+0      	; 0x69c <detect_i2c_string+0x16>
 69c:	00 d0       	rcall	.+0      	; 0x69e <detect_i2c_string+0x18>
 69e:	cd b7       	in	r28, 0x3d	; 61
 6a0:	de b7       	in	r29, 0x3e	; 62
 6a2:	8c 01       	movw	r16, r24
	//---------------------------------------------------------------------------------------
	unsigned char det_string[4]={0,0,0,0};
 6a4:	19 82       	std	Y+1, r1	; 0x01
 6a6:	1a 82       	std	Y+2, r1	; 0x02
 6a8:	1b 82       	std	Y+3, r1	; 0x03
 6aa:	1c 82       	std	Y+4, r1	; 0x04
 6ac:	ce 01       	movw	r24, r28
 6ae:	01 96       	adiw	r24, 0x01	; 1
 6b0:	7c 01       	movw	r14, r24
 6b2:	6c 01       	movw	r12, r24
 6b4:	5e 01       	movw	r10, r28
 6b6:	95 e0       	ldi	r25, 0x05	; 5
 6b8:	a9 0e       	add	r10, r25
 6ba:	b1 1c       	adc	r11, r1
	//---------------------------------------------------------------------------------------
	for (unsigned char j=0;j<=3;j++)
	{
		//---------------------------------------------------------------------------------------
		det_string[j]=detect_i2c_symbol(temp_volt%10);
 6bc:	98 01       	movw	r18, r16
 6be:	ad ec       	ldi	r26, 0xCD	; 205
 6c0:	bc ec       	ldi	r27, 0xCC	; 204
 6c2:	0e 94 33 04 	call	0x866	; 0x866 <__umulhisi3>
 6c6:	96 95       	lsr	r25
 6c8:	87 95       	ror	r24
 6ca:	96 95       	lsr	r25
 6cc:	87 95       	ror	r24
 6ce:	96 95       	lsr	r25
 6d0:	87 95       	ror	r24
 6d2:	9c 01       	movw	r18, r24
 6d4:	22 0f       	add	r18, r18
 6d6:	33 1f       	adc	r19, r19
 6d8:	88 0f       	add	r24, r24
 6da:	99 1f       	adc	r25, r25
 6dc:	88 0f       	add	r24, r24
 6de:	99 1f       	adc	r25, r25
 6e0:	88 0f       	add	r24, r24
 6e2:	99 1f       	adc	r25, r25
 6e4:	82 0f       	add	r24, r18
 6e6:	93 1f       	adc	r25, r19
 6e8:	e0 2f       	mov	r30, r16
 6ea:	e8 1b       	sub	r30, r24
 6ec:	8e 2f       	mov	r24, r30
 6ee:	0e 94 25 03 	call	0x64a	; 0x64a <detect_i2c_symbol>
 6f2:	f7 01       	movw	r30, r14
 6f4:	81 93       	st	Z+, r24
 6f6:	7f 01       	movw	r14, r30
		temp_volt=temp_volt/10;
 6f8:	98 01       	movw	r18, r16
 6fa:	ad ec       	ldi	r26, 0xCD	; 205
 6fc:	bc ec       	ldi	r27, 0xCC	; 204
 6fe:	0e 94 33 04 	call	0x866	; 0x866 <__umulhisi3>
 702:	8c 01       	movw	r16, r24
 704:	16 95       	lsr	r17
 706:	07 95       	ror	r16
 708:	16 95       	lsr	r17
 70a:	07 95       	ror	r16
 70c:	16 95       	lsr	r17
 70e:	07 95       	ror	r16
void detect_i2c_string(unsigned int temp_volt)
{
	//---------------------------------------------------------------------------------------
	unsigned char det_string[4]={0,0,0,0};
	//---------------------------------------------------------------------------------------
	for (unsigned char j=0;j<=3;j++)
 710:	ea 15       	cp	r30, r10
 712:	fb 05       	cpc	r31, r11
 714:	99 f6       	brne	.-90     	; 0x6bc <detect_i2c_string+0x36>
 716:	8e 01       	movw	r16, r28
 718:	0b 5f       	subi	r16, 0xFB	; 251
 71a:	1f 4f       	sbci	r17, 0xFF	; 255
	};
	//---------------------------------------------------------------------------------------
	for (unsigned char j=0;j<=3;j++)
	{
		//---------------------------------------------------------------------------------------
		send_i2c_lcd_symbol(det_string[3-j]);
 71c:	f8 01       	movw	r30, r16
 71e:	82 91       	ld	r24, -Z
 720:	8f 01       	movw	r16, r30
 722:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <send_i2c_lcd_symbol>
		det_string[j]=detect_i2c_symbol(temp_volt%10);
		temp_volt=temp_volt/10;
		//---------------------------------------------------------------------------------------
	};
	//---------------------------------------------------------------------------------------
	for (unsigned char j=0;j<=3;j++)
 726:	0c 15       	cp	r16, r12
 728:	1d 05       	cpc	r17, r13
 72a:	c1 f7       	brne	.-16     	; 0x71c <detect_i2c_string+0x96>
		//---------------------------------------------------------------------------------------
		send_i2c_lcd_symbol(det_string[3-j]);
		//---------------------------------------------------------------------------------------
	};
	//---------------------------------------------------------------------------------------	
};
 72c:	0f 90       	pop	r0
 72e:	0f 90       	pop	r0
 730:	0f 90       	pop	r0
 732:	0f 90       	pop	r0
 734:	df 91       	pop	r29
 736:	cf 91       	pop	r28
 738:	1f 91       	pop	r17
 73a:	0f 91       	pop	r16
 73c:	ff 90       	pop	r15
 73e:	ef 90       	pop	r14
 740:	df 90       	pop	r13
 742:	cf 90       	pop	r12
 744:	bf 90       	pop	r11
 746:	af 90       	pop	r10
 748:	08 95       	ret

0000074a <Main_menu_i2c>:

char const _BURN_OK_[]			PROGMEM = "  Hello  world  ";

//****************************************************************************************
void Main_menu_i2c (unsigned char data)
{
 74a:	cf 93       	push	r28
 74c:	c8 2f       	mov	r28, r24
	set_i2c_lcd_position(1,1);
 74e:	61 e0       	ldi	r22, 0x01	; 1
 750:	81 e0       	ldi	r24, 0x01	; 1
 752:	0e 94 f6 02 	call	0x5ec	; 0x5ec <set_i2c_lcd_position>
	send_i2c_lcd_string_P(_BURN_OK_);
 756:	8e e9       	ldi	r24, 0x9E	; 158
 758:	90 e0       	ldi	r25, 0x00	; 0
 75a:	0e 94 10 03 	call	0x620	; 0x620 <send_i2c_lcd_string_P>
	set_i2c_lcd_position(2,1);
 75e:	61 e0       	ldi	r22, 0x01	; 1
 760:	82 e0       	ldi	r24, 0x02	; 2
 762:	0e 94 f6 02 	call	0x5ec	; 0x5ec <set_i2c_lcd_position>
	detect_i2c_string(data);				// Виводим на дисплей
 766:	8c 2f       	mov	r24, r28
 768:	90 e0       	ldi	r25, 0x00	; 0
 76a:	0e 94 43 03 	call	0x686	; 0x686 <detect_i2c_string>
};			//Main_menu
 76e:	cf 91       	pop	r28
 770:	08 95       	ret

00000772 <__vector_18>:

#include "buart_0.h"

//****************************************************************************************
ISR(USART0_RX_vect)
{
 772:	1f 92       	push	r1
 774:	0f 92       	push	r0
 776:	0f b6       	in	r0, 0x3f	; 63
 778:	0f 92       	push	r0
 77a:	11 24       	eor	r1, r1
 77c:	2f 93       	push	r18
 77e:	8f 93       	push	r24
 780:	9f 93       	push	r25
 782:	ef 93       	push	r30
 784:	ff 93       	push	r31
	uint8_t byte;
	uint8_t wr = (uart_0_rxwr+1) & UART_BUFEND_0_;
 786:	e0 91 38 01 	lds	r30, 0x0138
 78a:	81 e0       	ldi	r24, 0x01	; 1
 78c:	8e 0f       	add	r24, r30
 78e:	8f 70       	andi	r24, 0x0F	; 15
	byte = UDR0;
 790:	2c b1       	in	r18, 0x0c	; 12
	if(wr != uart_0_rxrd)
 792:	90 91 39 01 	lds	r25, 0x0139
 796:	89 17       	cp	r24, r25
 798:	31 f0       	breq	.+12     	; 0x7a6 <__vector_18+0x34>
	{
		uart_0_rx[uart_0_rxwr] = byte;
 79a:	f0 e0       	ldi	r31, 0x00	; 0
 79c:	e9 5d       	subi	r30, 0xD9	; 217
 79e:	fe 4f       	sbci	r31, 0xFE	; 254
 7a0:	20 83       	st	Z, r18
		uart_0_rxwr = wr;
 7a2:	80 93 38 01 	sts	0x0138, r24
	};
};
 7a6:	ff 91       	pop	r31
 7a8:	ef 91       	pop	r30
 7aa:	9f 91       	pop	r25
 7ac:	8f 91       	pop	r24
 7ae:	2f 91       	pop	r18
 7b0:	0f 90       	pop	r0
 7b2:	0f be       	out	0x3f, r0	; 63
 7b4:	0f 90       	pop	r0
 7b6:	1f 90       	pop	r1
 7b8:	18 95       	reti

000007ba <__vector_19>:
//****************************************************************************************
ISR(USART0_UDRE_vect)
{
 7ba:	1f 92       	push	r1
 7bc:	0f 92       	push	r0
 7be:	0f b6       	in	r0, 0x3f	; 63
 7c0:	0f 92       	push	r0
 7c2:	11 24       	eor	r1, r1
 7c4:	8f 93       	push	r24
 7c6:	9f 93       	push	r25
 7c8:	ef 93       	push	r30
 7ca:	ff 93       	push	r31
	uint8_t rd = uart_0_txrd;
 7cc:	80 91 37 01 	lds	r24, 0x0137
	if(rd != uart_0_txwr)
 7d0:	90 91 26 01 	lds	r25, 0x0126
 7d4:	89 17       	cp	r24, r25
 7d6:	59 f0       	breq	.+22     	; 0x7ee <__vector_19+0x34>
	{
		UDR0 = uart_0_tx[rd];
 7d8:	e8 2f       	mov	r30, r24
 7da:	f0 e0       	ldi	r31, 0x00	; 0
 7dc:	e6 5c       	subi	r30, 0xC6	; 198
 7de:	fe 4f       	sbci	r31, 0xFE	; 254
 7e0:	90 81       	ld	r25, Z
 7e2:	9c b9       	out	0x0c, r25	; 12
		uart_0_txrd = (rd+1) & UART_BUFEND_0_;
 7e4:	8f 5f       	subi	r24, 0xFF	; 255
 7e6:	8f 70       	andi	r24, 0x0F	; 15
 7e8:	80 93 37 01 	sts	0x0137, r24
		return;
 7ec:	08 c0       	rjmp	.+16     	; 0x7fe <__vector_19+0x44>
	}else
	{

	};
	UCSR0B &= ~(1<<UDRIE0);
 7ee:	55 98       	cbi	0x0a, 5	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 7f0:	87 ee       	ldi	r24, 0xE7	; 231
 7f2:	93 e0       	ldi	r25, 0x03	; 3
 7f4:	01 97       	sbiw	r24, 0x01	; 1
 7f6:	f1 f7       	brne	.-4      	; 0x7f4 <__vector_19+0x3a>
 7f8:	00 c0       	rjmp	.+0      	; 0x7fa <__vector_19+0x40>
 7fa:	00 00       	nop
	_delay_us(250);
	TXD_DISABLE
 7fc:	1a 98       	cbi	0x03, 2	; 3
};
 7fe:	ff 91       	pop	r31
 800:	ef 91       	pop	r30
 802:	9f 91       	pop	r25
 804:	8f 91       	pop	r24
 806:	0f 90       	pop	r0
 808:	0f be       	out	0x3f, r0	; 63
 80a:	0f 90       	pop	r0
 80c:	1f 90       	pop	r1
 80e:	18 95       	reti

00000810 <__vector_20>:
//****************************************************************************************
ISR(USART0_TX_vect)
{
 810:	1f 92       	push	r1
 812:	0f 92       	push	r0
 814:	0f b6       	in	r0, 0x3f	; 63
 816:	0f 92       	push	r0
 818:	11 24       	eor	r1, r1
	//TXD_DISABLE
};
 81a:	0f 90       	pop	r0
 81c:	0f be       	out	0x3f, r0	; 63
 81e:	0f 90       	pop	r0
 820:	1f 90       	pop	r1
 822:	18 95       	reti

00000824 <uart_0_write>:
	return 0;
};
//****************************************************************************************
void uart_0_write(uint8_t byte)
{
	uint8_t wr = (uart_0_txwr+1) & UART_BUFEND_0_;
 824:	e0 91 26 01 	lds	r30, 0x0126
 828:	91 e0       	ldi	r25, 0x01	; 1
 82a:	9e 0f       	add	r25, r30
 82c:	9f 70       	andi	r25, 0x0F	; 15
	if(wr != uart_0_txrd)
 82e:	20 91 37 01 	lds	r18, 0x0137
 832:	92 17       	cp	r25, r18
 834:	41 f0       	breq	.+16     	; 0x846 <uart_0_write+0x22>
	{
		uart_0_tx[uart_0_txwr] = byte;
 836:	f0 e0       	ldi	r31, 0x00	; 0
 838:	e6 5c       	subi	r30, 0xC6	; 198
 83a:	fe 4f       	sbci	r31, 0xFE	; 254
 83c:	80 83       	st	Z, r24
		uart_0_txwr = wr;
 83e:	90 93 26 01 	sts	0x0126, r25
		TXD_ENABLE
 842:	1a 9a       	sbi	0x03, 2	; 3
		UCSR0B |= (1<<UDRIE0);
 844:	55 9a       	sbi	0x0a, 5	; 10
 846:	08 95       	ret

00000848 <uart_0_init>:
	};
};
//****************************************************************************************
void uart_0_init()
{
	(PORT_TXDE&=~(1<<TXDE));
 848:	1a 98       	cbi	0x03, 2	; 3
	(DDR_TXDE|=(1<<TXDE));
 84a:	12 9a       	sbi	0x02, 2	; 2
	//UBRR0L = (F_CPU+UART_RATE/8)/(UART_RATE/16)-1;
	//UBRR0H = ((F_CPU+UART_RATE/8)/(UART_RATE/16)-1)>>8;
	UBRR0L = F_CPU/UART_BAUD_RATE_0_/16-1;
 84c:	89 e1       	ldi	r24, 0x19	; 25
 84e:	89 b9       	out	0x09, r24	; 9
	UBRR0H = (F_CPU/UART_BAUD_RATE_0_/16-1)>>8;
 850:	10 92 90 00 	sts	0x0090, r1
	UCSR0B = (1<<RXCIE0)|(1<<RXEN0)|(1<<TXEN0);
 854:	88 e9       	ldi	r24, 0x98	; 152
 856:	8a b9       	out	0x0a, r24	; 10
 858:	08 95       	ret

0000085a <__tablejump2__>:
 85a:	ee 0f       	add	r30, r30
 85c:	ff 1f       	adc	r31, r31

0000085e <__tablejump__>:
 85e:	05 90       	lpm	r0, Z+
 860:	f4 91       	lpm	r31, Z
 862:	e0 2d       	mov	r30, r0
 864:	09 94       	ijmp

00000866 <__umulhisi3>:
 866:	a2 9f       	mul	r26, r18
 868:	b0 01       	movw	r22, r0
 86a:	b3 9f       	mul	r27, r19
 86c:	c0 01       	movw	r24, r0
 86e:	a3 9f       	mul	r26, r19
 870:	70 0d       	add	r23, r0
 872:	81 1d       	adc	r24, r1
 874:	11 24       	eor	r1, r1
 876:	91 1d       	adc	r25, r1
 878:	b2 9f       	mul	r27, r18
 87a:	70 0d       	add	r23, r0
 87c:	81 1d       	adc	r24, r1
 87e:	11 24       	eor	r1, r1
 880:	91 1d       	adc	r25, r1
 882:	08 95       	ret

00000884 <_exit>:
 884:	f8 94       	cli

00000886 <__stop_program>:
 886:	ff cf       	rjmp	.-2      	; 0x886 <__stop_program>
